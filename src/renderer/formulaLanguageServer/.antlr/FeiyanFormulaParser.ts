// Generated from FeiyanFormulaParser.g4 by ANTLR 4.10.1
// jshint ignore: start
import antlr4 from 'antlr4';
import FeiyanFormulaParserListener from './FeiyanFormulaParserListener';
import FeiyanFormulaParserVisitor from './FeiyanFormulaParserVisitor';

const serializedATN = [4, 1, 145, 1426, 2, 0, 7, 0, 2, 1, 7, 1, 2, 2, 7, 2, 2, 3, 7, 3, 2, 4,
	7, 4, 2, 5, 7, 5, 2, 6, 7, 6, 2, 7, 7, 7, 2, 8, 7, 8, 2, 9, 7, 9, 2, 10, 7, 10, 2, 11, 7, 11, 2, 12, 7, 12,
	2, 13, 7, 13, 2, 14, 7, 14, 2, 15, 7, 15, 2, 16, 7, 16, 2, 17, 7, 17, 2, 18, 7, 18, 2, 19, 7, 19, 2,
	20, 7, 20, 2, 21, 7, 21, 2, 22, 7, 22, 2, 23, 7, 23, 2, 24, 7, 24, 2, 25, 7, 25, 2, 26, 7, 26, 2, 27,
	7, 27, 2, 28, 7, 28, 2, 29, 7, 29, 2, 30, 7, 30, 2, 31, 7, 31, 2, 32, 7, 32, 2, 33, 7, 33, 2, 34, 7,
	34, 2, 35, 7, 35, 2, 36, 7, 36, 2, 37, 7, 37, 2, 38, 7, 38, 2, 39, 7, 39, 2, 40, 7, 40, 2, 41, 7, 41,
	2, 42, 7, 42, 2, 43, 7, 43, 2, 44, 7, 44, 2, 45, 7, 45, 2, 46, 7, 46, 2, 47, 7, 47, 2, 48, 7, 48, 2,
	49, 7, 49, 2, 50, 7, 50, 2, 51, 7, 51, 2, 52, 7, 52, 2, 53, 7, 53, 2, 54, 7, 54, 2, 55, 7, 55, 2, 56,
	7, 56, 2, 57, 7, 57, 2, 58, 7, 58, 2, 59, 7, 59, 2, 60, 7, 60, 2, 61, 7, 61, 2, 62, 7, 62, 2, 63, 7,
	63, 2, 64, 7, 64, 2, 65, 7, 65, 2, 66, 7, 66, 2, 67, 7, 67, 2, 68, 7, 68, 2, 69, 7, 69, 2, 70, 7, 70,
	2, 71, 7, 71, 2, 72, 7, 72, 2, 73, 7, 73, 2, 74, 7, 74, 2, 75, 7, 75, 2, 76, 7, 76, 2, 77, 7, 77, 2,
	78, 7, 78, 2, 79, 7, 79, 2, 80, 7, 80, 2, 81, 7, 81, 2, 82, 7, 82, 2, 83, 7, 83, 2, 84, 7, 84, 2, 85,
	7, 85, 2, 86, 7, 86, 2, 87, 7, 87, 2, 88, 7, 88, 2, 89, 7, 89, 2, 90, 7, 90, 2, 91, 7, 91, 2, 92, 7,
	92, 2, 93, 7, 93, 2, 94, 7, 94, 2, 95, 7, 95, 2, 96, 7, 96, 2, 97, 7, 97, 2, 98, 7, 98, 2, 99, 7, 99,
	2, 100, 7, 100, 2, 101, 7, 101, 2, 102, 7, 102, 2, 103, 7, 103, 2, 104, 7, 104, 2, 105, 7, 105,
	2, 106, 7, 106, 2, 107, 7, 107, 2, 108, 7, 108, 2, 109, 7, 109, 2, 110, 7, 110, 2, 111, 7, 111,
	2, 112, 7, 112, 2, 113, 7, 113, 2, 114, 7, 114, 2, 115, 7, 115, 2, 116, 7, 116, 2, 117, 7, 117,
	2, 118, 7, 118, 2, 119, 7, 119, 2, 120, 7, 120, 2, 121, 7, 121, 2, 122, 7, 122, 2, 123, 7, 123,
	2, 124, 7, 124, 2, 125, 7, 125, 2, 126, 7, 126, 2, 127, 7, 127, 2, 128, 7, 128, 2, 129, 7, 129,
	2, 130, 7, 130, 2, 131, 7, 131, 1, 0, 3, 0, 266, 8, 0, 1, 1, 4, 1, 269, 8, 1, 11, 1, 12, 1, 270, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 1, 280, 8, 1, 1, 2, 1, 2, 3, 2, 284, 8, 2, 1, 3, 1, 3, 1, 3, 3,
	3, 289, 8, 3, 1, 4, 1, 4, 3, 4, 293, 8, 4, 1, 4, 1, 4, 1, 5, 1, 5, 1, 5, 1, 5, 3, 5, 301, 8, 5, 1, 5, 1,
	5, 1, 5, 1, 5, 1, 5, 3, 5, 308, 8, 5, 1, 5, 3, 5, 311, 8, 5, 1, 5, 5, 5, 314, 8, 5, 10, 5, 12, 5, 317,
	9, 5, 1, 6, 1, 6, 3, 6, 321, 8, 6, 1, 6, 1, 6, 1, 7, 1, 7, 3, 7, 327, 8, 7, 1, 7, 1, 7, 1, 8, 1, 8, 1, 8,
	1, 8, 3, 8, 335, 8, 8, 3, 8, 337, 8, 8, 1, 9, 1, 9, 1, 10, 1, 10, 1, 10, 5, 10, 344, 8, 10, 10, 10, 12,
	10, 347, 9, 10, 1, 10, 3, 10, 350, 8, 10, 1, 11, 1, 11, 3, 11, 354, 8, 11, 1, 12, 3, 12, 357, 8, 12,
	1, 12, 1, 12, 3, 12, 361, 8, 12, 1, 13, 3, 13, 364, 8, 13, 1, 13, 1, 13, 1, 13, 1, 14, 1, 14, 3, 14,
	371, 8, 14, 1, 14, 1, 14, 3, 14, 375, 8, 14, 1, 14, 3, 14, 378, 8, 14, 1, 14, 3, 14, 381, 8, 14, 1,
	14, 3, 14, 384, 8, 14, 1, 15, 1, 15, 1, 15, 1, 15, 1, 15, 3, 15, 391, 8, 15, 1, 15, 1, 15, 3, 15, 395,
	8, 15, 1, 15, 1, 15, 1, 15, 1, 15, 1, 15, 1, 15, 1, 15, 1, 15, 3, 15, 405, 8, 15, 1, 15, 1, 15, 1, 15,
	1, 15, 3, 15, 411, 8, 15, 1, 15, 1, 15, 1, 15, 1, 15, 1, 15, 3, 15, 418, 8, 15, 1, 15, 1, 15, 1, 15,
	1, 15, 3, 15, 424, 8, 15, 1, 15, 1, 15, 1, 15, 5, 15, 429, 8, 15, 10, 15, 12, 15, 432, 9, 15, 1, 16,
	1, 16, 1, 17, 1, 17, 1, 17, 1, 17, 3, 17, 440, 8, 17, 1, 17, 1, 17, 3, 17, 444, 8, 17, 1, 18, 1, 18,
	1, 19, 3, 19, 449, 8, 19, 1, 19, 1, 19, 3, 19, 453, 8, 19, 1, 19, 1, 19, 1, 19, 1, 19, 1, 19, 3, 19,
	460, 8, 19, 1, 19, 3, 19, 463, 8, 19, 1, 20, 1, 20, 1, 20, 1, 20, 1, 21, 1, 21, 3, 21, 471, 8, 21,
	1, 22, 1, 22, 3, 22, 475, 8, 22, 1, 22, 3, 22, 478, 8, 22, 1, 23, 1, 23, 1, 23, 1, 23, 1, 23, 3, 23,
	485, 8, 23, 1, 23, 1, 23, 1, 23, 1, 23, 1, 23, 3, 23, 492, 8, 23, 5, 23, 494, 8, 23, 10, 23, 12, 23,
	497, 9, 23, 1, 24, 1, 24, 3, 24, 501, 8, 24, 1, 24, 1, 24, 3, 24, 505, 8, 24, 1, 25, 1, 25, 1, 25,
	1, 25, 1, 25, 1, 25, 3, 25, 513, 8, 25, 1, 26, 1, 26, 1, 26, 5, 26, 518, 8, 26, 10, 26, 12, 26, 521,
	9, 26, 1, 27, 1, 27, 1, 27, 5, 27, 526, 8, 27, 10, 27, 12, 27, 529, 9, 27, 1, 28, 1, 28, 1, 28, 5,
	28, 534, 8, 28, 10, 28, 12, 28, 537, 9, 28, 1, 29, 1, 29, 1, 29, 1, 29, 5, 29, 543, 8, 29, 10, 29,
	12, 29, 546, 9, 29, 1, 30, 1, 30, 1, 30, 1, 30, 3, 30, 552, 8, 30, 1, 31, 1, 31, 1, 31, 5, 31, 557,
	8, 31, 10, 31, 12, 31, 560, 9, 31, 1, 32, 1, 32, 1, 32, 5, 32, 565, 8, 32, 10, 32, 12, 32, 568, 9,
	32, 1, 33, 1, 33, 1, 33, 5, 33, 573, 8, 33, 10, 33, 12, 33, 576, 9, 33, 1, 34, 1, 34, 1, 34, 5, 34,
	581, 8, 34, 10, 34, 12, 34, 584, 9, 34, 1, 35, 1, 35, 1, 35, 5, 35, 589, 8, 35, 10, 35, 12, 35, 592,
	9, 35, 1, 36, 1, 36, 1, 36, 5, 36, 597, 8, 36, 10, 36, 12, 36, 600, 9, 36, 1, 37, 1, 37, 1, 37, 5,
	37, 605, 8, 37, 10, 37, 12, 37, 608, 9, 37, 1, 38, 1, 38, 1, 38, 1, 38, 1, 38, 1, 38, 3, 38, 616,
	8, 38, 1, 39, 1, 39, 1, 39, 1, 39, 1, 39, 1, 39, 3, 39, 624, 8, 39, 1, 40, 1, 40, 1, 41, 1, 41, 1, 41,
	5, 41, 631, 8, 41, 10, 41, 12, 41, 634, 9, 41, 1, 42, 1, 42, 1, 43, 1, 43, 1, 43, 1, 43, 1, 43, 1,
	43, 1, 43, 3, 43, 645, 8, 43, 1, 44, 1, 44, 1, 44, 1, 44, 3, 44, 651, 8, 44, 1, 44, 1, 44, 1, 44, 1,
	45, 3, 45, 657, 8, 45, 1, 45, 1, 45, 1, 46, 1, 46, 3, 46, 663, 8, 46, 1, 46, 1, 46, 1, 47, 4, 47, 668,
	8, 47, 11, 47, 12, 47, 669, 1, 48, 1, 48, 1, 48, 1, 48, 1, 48, 1, 48, 1, 48, 3, 48, 679, 8, 48, 1,
	48, 1, 48, 1, 48, 1, 48, 1, 48, 1, 48, 3, 48, 687, 8, 48, 1, 49, 1, 49, 3, 49, 691, 8, 49, 1, 49, 1,
	49, 1, 49, 1, 49, 1, 49, 3, 49, 698, 8, 49, 3, 49, 700, 8, 49, 1, 50, 1, 50, 1, 50, 1, 50, 1, 50, 1,
	50, 1, 50, 1, 50, 1, 50, 1, 50, 1, 50, 1, 50, 1, 50, 1, 50, 1, 50, 1, 50, 1, 50, 1, 50, 3, 50, 720,
	8, 50, 1, 50, 1, 50, 3, 50, 724, 8, 50, 1, 50, 1, 50, 1, 50, 1, 50, 3, 50, 730, 8, 50, 1, 50, 1, 50,
	1, 50, 3, 50, 735, 8, 50, 1, 51, 1, 51, 3, 51, 739, 8, 51, 1, 52, 3, 52, 742, 8, 52, 1, 52, 1, 52,
	1, 52, 1, 53, 1, 53, 3, 53, 749, 8, 53, 1, 54, 1, 54, 1, 54, 1, 54, 1, 54, 3, 54, 756, 8, 54, 1, 54,
	1, 54, 3, 54, 760, 8, 54, 1, 54, 1, 54, 1, 55, 1, 55, 1, 56, 1, 56, 1, 57, 3, 57, 769, 8, 57, 1, 57,
	3, 57, 772, 8, 57, 1, 57, 1, 57, 1, 57, 3, 57, 777, 8, 57, 1, 57, 1, 57, 1, 57, 3, 57, 782, 8, 57,
	1, 58, 1, 58, 3, 58, 786, 8, 58, 1, 59, 4, 59, 789, 8, 59, 11, 59, 12, 59, 790, 1, 59, 3, 59, 794,
	8, 59, 1, 60, 1, 60, 1, 61, 1, 61, 1, 62, 1, 62, 3, 62, 802, 8, 62, 1, 63, 1, 63, 3, 63, 806, 8, 63,
	1, 64, 4, 64, 809, 8, 64, 11, 64, 12, 64, 810, 1, 64, 3, 64, 814, 8, 64, 1, 65, 4, 65, 817, 8, 65,
	11, 65, 12, 65, 818, 1, 65, 3, 65, 822, 8, 65, 1, 66, 1, 66, 1, 67, 1, 67, 1, 68, 3, 68, 829, 8, 68,
	1, 68, 1, 68, 1, 68, 3, 68, 834, 8, 68, 1, 68, 4, 68, 837, 8, 68, 11, 68, 12, 68, 838, 1, 68, 3, 68,
	842, 8, 68, 1, 68, 1, 68, 3, 68, 846, 8, 68, 1, 68, 1, 68, 3, 68, 850, 8, 68, 1, 68, 1, 68, 3, 68,
	854, 8, 68, 1, 68, 1, 68, 1, 68, 3, 68, 859, 8, 68, 1, 68, 5, 68, 862, 8, 68, 10, 68, 12, 68, 865,
	9, 68, 1, 68, 1, 68, 1, 68, 3, 68, 870, 8, 68, 1, 68, 1, 68, 1, 68, 3, 68, 875, 8, 68, 1, 69, 1, 69,
	1, 69, 1, 69, 3, 69, 881, 8, 69, 1, 70, 1, 70, 1, 70, 1, 70, 3, 70, 887, 8, 70, 1, 70, 1, 70, 1, 71,
	1, 71, 1, 72, 1, 72, 1, 72, 1, 72, 3, 72, 897, 8, 72, 3, 72, 899, 8, 72, 1, 72, 1, 72, 1, 73, 1, 73,
	3, 73, 905, 8, 73, 1, 73, 3, 73, 908, 8, 73, 1, 73, 3, 73, 911, 8, 73, 1, 74, 1, 74, 3, 74, 915, 8,
	74, 1, 74, 1, 74, 3, 74, 919, 8, 74, 1, 74, 1, 74, 1, 75, 1, 75, 3, 75, 925, 8, 75, 1, 76, 1, 76, 1,
	76, 1, 77, 1, 77, 1, 77, 5, 77, 933, 8, 77, 10, 77, 12, 77, 936, 9, 77, 1, 78, 1, 78, 1, 78, 3, 78,
	941, 8, 78, 1, 79, 1, 79, 1, 80, 1, 80, 3, 80, 947, 8, 80, 1, 81, 1, 81, 1, 82, 1, 82, 1, 83, 4, 83,
	954, 8, 83, 11, 83, 12, 83, 955, 1, 84, 1, 84, 1, 84, 3, 84, 961, 8, 84, 1, 84, 1, 84, 1, 84, 3, 84,
	966, 8, 84, 1, 85, 1, 85, 1, 85, 1, 85, 3, 85, 972, 8, 85, 1, 85, 3, 85, 975, 8, 85, 1, 85, 1, 85,
	1, 86, 1, 86, 1, 86, 5, 86, 982, 8, 86, 10, 86, 12, 86, 985, 9, 86, 1, 86, 3, 86, 988, 8, 86, 1, 87,
	1, 87, 1, 87, 3, 87, 993, 8, 87, 1, 87, 1, 87, 3, 87, 997, 8, 87, 1, 88, 1, 88, 1, 89, 1, 89, 3, 89,
	1003, 8, 89, 1, 89, 1, 89, 1, 90, 4, 90, 1008, 8, 90, 11, 90, 12, 90, 1009, 1, 91, 1, 91, 1, 91,
	1, 91, 1, 91, 1, 91, 1, 91, 1, 91, 1, 91, 1, 91, 1, 91, 1, 91, 1, 91, 4, 91, 1025, 8, 91, 11, 91, 12,
	91, 1026, 3, 91, 1029, 8, 91, 1, 92, 1, 92, 1, 92, 5, 92, 1034, 8, 92, 10, 92, 12, 92, 1037, 9,
	92, 1, 93, 1, 93, 3, 93, 1041, 8, 93, 1, 94, 1, 94, 1, 94, 1, 94, 1, 94, 3, 94, 1048, 8, 94, 1, 95,
	1, 95, 3, 95, 1052, 8, 95, 5, 95, 1054, 8, 95, 10, 95, 12, 95, 1057, 9, 95, 1, 95, 1, 95, 1, 96,
	1, 96, 1, 96, 3, 96, 1064, 8, 96, 1, 96, 1, 96, 1, 96, 1, 96, 3, 96, 1070, 8, 96, 1, 96, 1, 96, 1,
	96, 1, 96, 3, 96, 1076, 8, 96, 1, 96, 1, 96, 3, 96, 1080, 8, 96, 3, 96, 1082, 8, 96, 5, 96, 1084,
	8, 96, 10, 96, 12, 96, 1087, 9, 96, 1, 97, 1, 97, 3, 97, 1091, 8, 97, 1, 97, 1, 97, 3, 97, 1095,
	8, 97, 1, 97, 3, 97, 1098, 8, 97, 1, 97, 3, 97, 1101, 8, 97, 1, 97, 3, 97, 1104, 8, 97, 1, 98, 1,
	98, 1, 98, 3, 98, 1109, 8, 98, 1, 99, 1, 99, 3, 99, 1113, 8, 99, 1, 99, 1, 99, 3, 99, 1117, 8, 99,
	1, 99, 3, 99, 1120, 8, 99, 3, 99, 1122, 8, 99, 1, 100, 4, 100, 1125, 8, 100, 11, 100, 12, 100,
	1126, 1, 101, 1, 101, 1, 102, 1, 102, 1, 103, 3, 103, 1134, 8, 103, 1, 103, 1, 103, 1, 104, 1,
	104, 3, 104, 1140, 8, 104, 1, 105, 1, 105, 3, 105, 1144, 8, 105, 1, 105, 1, 105, 1, 105, 1, 105,
	3, 105, 1150, 8, 105, 1, 106, 1, 106, 4, 106, 1154, 8, 106, 11, 106, 12, 106, 1155, 1, 106, 3,
	106, 1159, 8, 106, 3, 106, 1161, 8, 106, 1, 107, 1, 107, 1, 107, 1, 107, 3, 107, 1167, 8, 107,
	1, 107, 1, 107, 3, 107, 1171, 8, 107, 1, 107, 1, 107, 1, 107, 1, 107, 3, 107, 1177, 8, 107, 1,
	107, 1, 107, 1, 107, 1, 107, 1, 107, 3, 107, 1184, 8, 107, 1, 107, 1, 107, 3, 107, 1188, 8, 107,
	3, 107, 1190, 8, 107, 5, 107, 1192, 8, 107, 10, 107, 12, 107, 1195, 9, 107, 1, 108, 5, 108, 1198,
	8, 108, 10, 108, 12, 108, 1201, 9, 108, 1, 108, 1, 108, 1, 109, 1, 109, 1, 109, 1, 109, 1, 109,
	1, 109, 1, 109, 3, 109, 1212, 8, 109, 1, 109, 1, 109, 3, 109, 1216, 8, 109, 3, 109, 1218, 8, 109,
	5, 109, 1220, 8, 109, 10, 109, 12, 109, 1223, 9, 109, 1, 110, 1, 110, 3, 110, 1227, 8, 110, 1,
	110, 3, 110, 1230, 8, 110, 1, 111, 1, 111, 1, 111, 5, 111, 1235, 8, 111, 10, 111, 12, 111, 1238,
	9, 111, 1, 112, 3, 112, 1241, 8, 112, 1, 112, 1, 112, 1, 112, 3, 112, 1246, 8, 112, 3, 112, 1248,
	8, 112, 1, 112, 1, 112, 3, 112, 1252, 8, 112, 1, 113, 1, 113, 1, 113, 1, 113, 1, 113, 3, 113, 1259,
	8, 113, 1, 114, 1, 114, 1, 114, 3, 114, 1264, 8, 114, 1, 115, 1, 115, 3, 115, 1268, 8, 115, 1,
	116, 1, 116, 3, 116, 1272, 8, 116, 1, 116, 1, 116, 1, 116, 3, 116, 1277, 8, 116, 5, 116, 1279,
	8, 116, 10, 116, 12, 116, 1282, 9, 116, 1, 117, 1, 117, 1, 117, 3, 117, 1287, 8, 117, 3, 117,
	1289, 8, 117, 1, 117, 1, 117, 1, 118, 1, 118, 3, 118, 1295, 8, 118, 1, 119, 1, 119, 1, 119, 1,
	120, 1, 120, 1, 120, 1, 120, 3, 120, 1304, 8, 120, 1, 121, 1, 121, 1, 121, 3, 121, 1309, 8, 121,
	1, 121, 1, 121, 1, 122, 1, 122, 1, 123, 1, 123, 3, 123, 1317, 8, 123, 1, 123, 1, 123, 1, 123, 3,
	123, 1322, 8, 123, 5, 123, 1324, 8, 123, 10, 123, 12, 123, 1327, 9, 123, 1, 124, 1, 124, 1, 124,
	3, 124, 1332, 8, 124, 1, 125, 1, 125, 3, 125, 1336, 8, 125, 1, 126, 1, 126, 3, 126, 1340, 8, 126,
	1, 127, 1, 127, 1, 127, 3, 127, 1345, 8, 127, 1, 127, 1, 127, 1, 128, 1, 128, 3, 128, 1351, 8,
	128, 1, 128, 1, 128, 1, 128, 3, 128, 1356, 8, 128, 5, 128, 1358, 8, 128, 10, 128, 12, 128, 1361,
	9, 128, 1, 129, 1, 129, 1, 129, 1, 129, 1, 129, 1, 129, 3, 129, 1369, 8, 129, 1, 130, 1, 130, 1,
	130, 3, 130, 1374, 8, 130, 1, 130, 1, 130, 1, 130, 3, 130, 1379, 8, 130, 1, 130, 1, 130, 1, 130,
	1, 130, 1, 130, 1, 130, 1, 130, 1, 130, 1, 130, 1, 130, 1, 130, 1, 130, 1, 130, 1, 130, 1, 130,
	1, 130, 1, 130, 1, 130, 1, 130, 1, 130, 1, 130, 1, 130, 1, 130, 1, 130, 1, 130, 1, 130, 1, 130,
	1, 130, 1, 130, 1, 130, 1, 130, 1, 130, 1, 130, 1, 130, 1, 130, 1, 130, 1, 130, 1, 130, 1, 130,
	1, 130, 1, 130, 3, 130, 1422, 8, 130, 1, 131, 1, 131, 1, 131, 1, 790, 6, 10, 30, 46, 192, 214,
	218, 132, 0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44,
	46, 48, 50, 52, 54, 56, 58, 60, 62, 64, 66, 68, 70, 72, 74, 76, 78, 80, 82, 84, 86, 88, 90, 92,
	94, 96, 98, 100, 102, 104, 106, 108, 110, 112, 114, 116, 118, 120, 122, 124, 126, 128, 130,
	132, 134, 136, 138, 140, 142, 144, 146, 148, 150, 152, 154, 156, 158, 160, 162, 164, 166,
	168, 170, 172, 174, 176, 178, 180, 182, 184, 186, 188, 190, 192, 194, 196, 198, 200, 202,
	204, 206, 208, 210, 212, 214, 216, 218, 220, 222, 224, 226, 228, 230, 232, 234, 236, 238,
	240, 242, 244, 246, 248, 250, 252, 254, 256, 258, 260, 262, 0, 19, 2, 0, 97, 97, 101, 101, 4,
	0, 24, 24, 31, 31, 58, 58, 65, 65, 2, 0, 124, 124, 129, 129, 1, 0, 120, 121, 2, 0, 91, 93, 97, 100,
	2, 0, 123, 123, 130, 130, 1, 0, 93, 95, 1, 0, 91, 92, 2, 0, 102, 103, 116, 117, 1, 0, 114, 115,
	2, 0, 101, 101, 104, 113, 3, 0, 34, 34, 44, 44, 80, 80, 2, 0, 46, 46, 60, 60, 2, 0, 61, 61, 78, 78,
	2, 0, 21, 21, 66, 66, 1, 0, 85, 90, 2, 0, 97, 97, 118, 118, 2, 0, 22, 22, 82, 82, 1, 0, 1, 7, 1575,
	0, 265, 1, 0, 0, 0, 2, 279, 1, 0, 0, 0, 4, 283, 1, 0, 0, 0, 6, 288, 1, 0, 0, 0, 8, 290, 1, 0, 0, 0, 10,
	296, 1, 0, 0, 0, 12, 318, 1, 0, 0, 0, 14, 324, 1, 0, 0, 0, 16, 336, 1, 0, 0, 0, 18, 338, 1, 0, 0, 0,
	20, 340, 1, 0, 0, 0, 22, 353, 1, 0, 0, 0, 24, 360, 1, 0, 0, 0, 26, 363, 1, 0, 0, 0, 28, 368, 1, 0, 0,
	0, 30, 404, 1, 0, 0, 0, 32, 433, 1, 0, 0, 0, 34, 443, 1, 0, 0, 0, 36, 445, 1, 0, 0, 0, 38, 448, 1, 0,
	0, 0, 40, 464, 1, 0, 0, 0, 42, 468, 1, 0, 0, 0, 44, 477, 1, 0, 0, 0, 46, 479, 1, 0, 0, 0, 48, 504, 1,
	0, 0, 0, 50, 512, 1, 0, 0, 0, 52, 514, 1, 0, 0, 0, 54, 522, 1, 0, 0, 0, 56, 530, 1, 0, 0, 0, 58, 538,
	1, 0, 0, 0, 60, 551, 1, 0, 0, 0, 62, 553, 1, 0, 0, 0, 64, 561, 1, 0, 0, 0, 66, 569, 1, 0, 0, 0, 68, 577,
	1, 0, 0, 0, 70, 585, 1, 0, 0, 0, 72, 593, 1, 0, 0, 0, 74, 601, 1, 0, 0, 0, 76, 609, 1, 0, 0, 0, 78, 623,
	1, 0, 0, 0, 80, 625, 1, 0, 0, 0, 82, 627, 1, 0, 0, 0, 84, 635, 1, 0, 0, 0, 86, 644, 1, 0, 0, 0, 88, 650,
	1, 0, 0, 0, 90, 656, 1, 0, 0, 0, 92, 660, 1, 0, 0, 0, 94, 667, 1, 0, 0, 0, 96, 686, 1, 0, 0, 0, 98, 699,
	1, 0, 0, 0, 100, 734, 1, 0, 0, 0, 102, 738, 1, 0, 0, 0, 104, 741, 1, 0, 0, 0, 106, 748, 1, 0, 0, 0,
	108, 759, 1, 0, 0, 0, 110, 763, 1, 0, 0, 0, 112, 765, 1, 0, 0, 0, 114, 781, 1, 0, 0, 0, 116, 785,
	1, 0, 0, 0, 118, 788, 1, 0, 0, 0, 120, 795, 1, 0, 0, 0, 122, 797, 1, 0, 0, 0, 124, 801, 1, 0, 0, 0,
	126, 805, 1, 0, 0, 0, 128, 808, 1, 0, 0, 0, 130, 816, 1, 0, 0, 0, 132, 823, 1, 0, 0, 0, 134, 825,
	1, 0, 0, 0, 136, 874, 1, 0, 0, 0, 138, 880, 1, 0, 0, 0, 140, 882, 1, 0, 0, 0, 142, 890, 1, 0, 0, 0,
	144, 892, 1, 0, 0, 0, 146, 902, 1, 0, 0, 0, 148, 912, 1, 0, 0, 0, 150, 922, 1, 0, 0, 0, 152, 926,
	1, 0, 0, 0, 154, 929, 1, 0, 0, 0, 156, 937, 1, 0, 0, 0, 158, 942, 1, 0, 0, 0, 160, 946, 1, 0, 0, 0,
	162, 948, 1, 0, 0, 0, 164, 950, 1, 0, 0, 0, 166, 953, 1, 0, 0, 0, 168, 965, 1, 0, 0, 0, 170, 967,
	1, 0, 0, 0, 172, 978, 1, 0, 0, 0, 174, 992, 1, 0, 0, 0, 176, 998, 1, 0, 0, 0, 178, 1000, 1, 0, 0, 0,
	180, 1007, 1, 0, 0, 0, 182, 1028, 1, 0, 0, 0, 184, 1030, 1, 0, 0, 0, 186, 1038, 1, 0, 0, 0, 188,
	1047, 1, 0, 0, 0, 190, 1055, 1, 0, 0, 0, 192, 1069, 1, 0, 0, 0, 194, 1088, 1, 0, 0, 0, 196, 1105,
	1, 0, 0, 0, 198, 1121, 1, 0, 0, 0, 200, 1124, 1, 0, 0, 0, 202, 1128, 1, 0, 0, 0, 204, 1130, 1, 0,
	0, 0, 206, 1133, 1, 0, 0, 0, 208, 1137, 1, 0, 0, 0, 210, 1149, 1, 0, 0, 0, 212, 1160, 1, 0, 0, 0,
	214, 1176, 1, 0, 0, 0, 216, 1199, 1, 0, 0, 0, 218, 1204, 1, 0, 0, 0, 220, 1224, 1, 0, 0, 0, 222,
	1231, 1, 0, 0, 0, 224, 1240, 1, 0, 0, 0, 226, 1258, 1, 0, 0, 0, 228, 1263, 1, 0, 0, 0, 230, 1267,
	1, 0, 0, 0, 232, 1269, 1, 0, 0, 0, 234, 1283, 1, 0, 0, 0, 236, 1294, 1, 0, 0, 0, 238, 1296, 1, 0,
	0, 0, 240, 1299, 1, 0, 0, 0, 242, 1305, 1, 0, 0, 0, 244, 1312, 1, 0, 0, 0, 246, 1314, 1, 0, 0, 0,
	248, 1331, 1, 0, 0, 0, 250, 1333, 1, 0, 0, 0, 252, 1339, 1, 0, 0, 0, 254, 1341, 1, 0, 0, 0, 256,
	1348, 1, 0, 0, 0, 258, 1368, 1, 0, 0, 0, 260, 1421, 1, 0, 0, 0, 262, 1423, 1, 0, 0, 0, 264, 266,
	3, 94, 47, 0, 265, 264, 1, 0, 0, 0, 265, 266, 1, 0, 0, 0, 266, 1, 1, 0, 0, 0, 267, 269, 3, 262, 131,
	0, 268, 267, 1, 0, 0, 0, 269, 270, 1, 0, 0, 0, 270, 268, 1, 0, 0, 0, 270, 271, 1, 0, 0, 0, 271, 280,
	1, 0, 0, 0, 272, 280, 5, 69, 0, 0, 273, 274, 5, 85, 0, 0, 274, 275, 3, 82, 41, 0, 275, 276, 5, 86,
	0, 0, 276, 280, 1, 0, 0, 0, 277, 280, 3, 4, 2, 0, 278, 280, 3, 12, 6, 0, 279, 268, 1, 0, 0, 0, 279,
	272, 1, 0, 0, 0, 279, 273, 1, 0, 0, 0, 279, 277, 1, 0, 0, 0, 279, 278, 1, 0, 0, 0, 280, 3, 1, 0, 0,
	0, 281, 284, 3, 6, 3, 0, 282, 284, 3, 8, 4, 0, 283, 281, 1, 0, 0, 0, 283, 282, 1, 0, 0, 0, 284, 5,
	1, 0, 0, 0, 285, 289, 5, 132, 0, 0, 286, 289, 3, 238, 119, 0, 287, 289, 3, 240, 120, 0, 288, 285,
	1, 0, 0, 0, 288, 286, 1, 0, 0, 0, 288, 287, 1, 0, 0, 0, 289, 7, 1, 0, 0, 0, 290, 292, 3, 10, 5, 0, 291,
	293, 5, 68, 0, 0, 292, 291, 1, 0, 0, 0, 292, 293, 1, 0, 0, 0, 293, 294, 1, 0, 0, 0, 294, 295, 3, 6,
	3, 0, 295, 9, 1, 0, 0, 0, 296, 300, 6, 5, -1, 0, 297, 301, 3, 138, 69, 0, 298, 301, 3, 160, 80, 0,
	299, 301, 3, 140, 70, 0, 300, 297, 1, 0, 0, 0, 300, 298, 1, 0, 0, 0, 300, 299, 1, 0, 0, 0, 300, 301,
	1, 0, 0, 0, 301, 302, 1, 0, 0, 0, 302, 303, 5, 127, 0, 0, 303, 315, 1, 0, 0, 0, 304, 310, 10, 1, 0,
	0, 305, 311, 5, 132, 0, 0, 306, 308, 5, 68, 0, 0, 307, 306, 1, 0, 0, 0, 307, 308, 1, 0, 0, 0, 308,
	309, 1, 0, 0, 0, 309, 311, 3, 242, 121, 0, 310, 305, 1, 0, 0, 0, 310, 307, 1, 0, 0, 0, 311, 312,
	1, 0, 0, 0, 312, 314, 5, 127, 0, 0, 313, 304, 1, 0, 0, 0, 314, 317, 1, 0, 0, 0, 315, 313, 1, 0, 0,
	0, 315, 316, 1, 0, 0, 0, 316, 11, 1, 0, 0, 0, 317, 315, 1, 0, 0, 0, 318, 320, 3, 14, 7, 0, 319, 321,
	3, 28, 14, 0, 320, 319, 1, 0, 0, 0, 320, 321, 1, 0, 0, 0, 321, 322, 1, 0, 0, 0, 322, 323, 3, 92, 46,
	0, 323, 13, 1, 0, 0, 0, 324, 326, 5, 87, 0, 0, 325, 327, 3, 16, 8, 0, 326, 325, 1, 0, 0, 0, 326, 327,
	1, 0, 0, 0, 327, 328, 1, 0, 0, 0, 328, 329, 5, 88, 0, 0, 329, 15, 1, 0, 0, 0, 330, 337, 3, 20, 10,
	0, 331, 334, 3, 18, 9, 0, 332, 333, 5, 122, 0, 0, 333, 335, 3, 20, 10, 0, 334, 332, 1, 0, 0, 0, 334,
	335, 1, 0, 0, 0, 335, 337, 1, 0, 0, 0, 336, 330, 1, 0, 0, 0, 336, 331, 1, 0, 0, 0, 337, 17, 1, 0, 0,
	0, 338, 339, 7, 0, 0, 0, 339, 19, 1, 0, 0, 0, 340, 345, 3, 22, 11, 0, 341, 342, 5, 122, 0, 0, 342,
	344, 3, 22, 11, 0, 343, 341, 1, 0, 0, 0, 344, 347, 1, 0, 0, 0, 345, 343, 1, 0, 0, 0, 345, 346, 1,
	0, 0, 0, 346, 349, 1, 0, 0, 0, 347, 345, 1, 0, 0, 0, 348, 350, 5, 131, 0, 0, 349, 348, 1, 0, 0, 0,
	349, 350, 1, 0, 0, 0, 350, 21, 1, 0, 0, 0, 351, 354, 3, 24, 12, 0, 352, 354, 3, 26, 13, 0, 353, 351,
	1, 0, 0, 0, 353, 352, 1, 0, 0, 0, 354, 23, 1, 0, 0, 0, 355, 357, 5, 97, 0, 0, 356, 355, 1, 0, 0, 0,
	356, 357, 1, 0, 0, 0, 357, 358, 1, 0, 0, 0, 358, 361, 5, 132, 0, 0, 359, 361, 5, 69, 0, 0, 360, 356,
	1, 0, 0, 0, 360, 359, 1, 0, 0, 0, 361, 25, 1, 0, 0, 0, 362, 364, 5, 97, 0, 0, 363, 362, 1, 0, 0, 0,
	363, 364, 1, 0, 0, 0, 364, 365, 1, 0, 0, 0, 365, 366, 5, 132, 0, 0, 366, 367, 3, 226, 113, 0, 367,
	27, 1, 0, 0, 0, 368, 370, 5, 85, 0, 0, 369, 371, 3, 220, 110, 0, 370, 369, 1, 0, 0, 0, 370, 371,
	1, 0, 0, 0, 371, 372, 1, 0, 0, 0, 372, 374, 5, 86, 0, 0, 373, 375, 5, 47, 0, 0, 374, 373, 1, 0, 0,
	0, 374, 375, 1, 0, 0, 0, 375, 377, 1, 0, 0, 0, 376, 378, 3, 252, 126, 0, 377, 376, 1, 0, 0, 0, 377,
	378, 1, 0, 0, 0, 378, 380, 1, 0, 0, 0, 379, 381, 3, 166, 83, 0, 380, 379, 1, 0, 0, 0, 380, 381, 1,
	0, 0, 0, 381, 383, 1, 0, 0, 0, 382, 384, 3, 196, 98, 0, 383, 382, 1, 0, 0, 0, 383, 384, 1, 0, 0, 0,
	384, 29, 1, 0, 0, 0, 385, 386, 6, 15, -1, 0, 386, 405, 3, 2, 1, 0, 387, 394, 3, 136, 68, 0, 388,
	390, 5, 85, 0, 0, 389, 391, 3, 32, 16, 0, 390, 389, 1, 0, 0, 0, 390, 391, 1, 0, 0, 0, 391, 392, 1,
	0, 0, 0, 392, 395, 5, 86, 0, 0, 393, 395, 3, 234, 117, 0, 394, 388, 1, 0, 0, 0, 394, 393, 1, 0, 0,
	0, 395, 405, 1, 0, 0, 0, 396, 397, 7, 1, 0, 0, 397, 398, 5, 102, 0, 0, 398, 399, 3, 208, 104, 0,
	399, 400, 5, 103, 0, 0, 400, 401, 5, 85, 0, 0, 401, 402, 3, 82, 41, 0, 402, 403, 5, 86, 0, 0, 403,
	405, 1, 0, 0, 0, 404, 385, 1, 0, 0, 0, 404, 387, 1, 0, 0, 0, 404, 396, 1, 0, 0, 0, 405, 430, 1, 0,
	0, 0, 406, 407, 10, 6, 0, 0, 407, 410, 5, 87, 0, 0, 408, 411, 3, 82, 41, 0, 409, 411, 3, 234, 117,
	0, 410, 408, 1, 0, 0, 0, 410, 409, 1, 0, 0, 0, 411, 412, 1, 0, 0, 0, 412, 413, 5, 88, 0, 0, 413, 429,
	1, 0, 0, 0, 414, 415, 10, 5, 0, 0, 415, 417, 5, 85, 0, 0, 416, 418, 3, 32, 16, 0, 417, 416, 1, 0,
	0, 0, 417, 418, 1, 0, 0, 0, 418, 419, 1, 0, 0, 0, 419, 429, 5, 86, 0, 0, 420, 421, 10, 3, 0, 0, 421,
	423, 7, 2, 0, 0, 422, 424, 5, 68, 0, 0, 423, 422, 1, 0, 0, 0, 423, 424, 1, 0, 0, 0, 424, 425, 1, 0,
	0, 0, 425, 429, 3, 4, 2, 0, 426, 427, 10, 2, 0, 0, 427, 429, 7, 3, 0, 0, 428, 406, 1, 0, 0, 0, 428,
	414, 1, 0, 0, 0, 428, 420, 1, 0, 0, 0, 428, 426, 1, 0, 0, 0, 429, 432, 1, 0, 0, 0, 430, 428, 1, 0,
	0, 0, 430, 431, 1, 0, 0, 0, 431, 31, 1, 0, 0, 0, 432, 430, 1, 0, 0, 0, 433, 434, 3, 232, 116, 0, 434,
	33, 1, 0, 0, 0, 435, 444, 3, 30, 15, 0, 436, 440, 5, 120, 0, 0, 437, 440, 5, 121, 0, 0, 438, 440,
	3, 36, 18, 0, 439, 436, 1, 0, 0, 0, 439, 437, 1, 0, 0, 0, 439, 438, 1, 0, 0, 0, 440, 441, 1, 0, 0,
	0, 441, 444, 3, 34, 17, 0, 442, 444, 3, 38, 19, 0, 443, 435, 1, 0, 0, 0, 443, 439, 1, 0, 0, 0, 443,
	442, 1, 0, 0, 0, 444, 35, 1, 0, 0, 0, 445, 446, 7, 4, 0, 0, 446, 37, 1, 0, 0, 0, 447, 449, 5, 127,
	0, 0, 448, 447, 1, 0, 0, 0, 448, 449, 1, 0, 0, 0, 449, 450, 1, 0, 0, 0, 450, 452, 5, 49, 0, 0, 451,
	453, 3, 40, 20, 0, 452, 451, 1, 0, 0, 0, 452, 453, 1, 0, 0, 0, 453, 459, 1, 0, 0, 0, 454, 460, 3,
	42, 21, 0, 455, 456, 5, 85, 0, 0, 456, 457, 3, 208, 104, 0, 457, 458, 5, 86, 0, 0, 458, 460, 1,
	0, 0, 0, 459, 454, 1, 0, 0, 0, 459, 455, 1, 0, 0, 0, 460, 462, 1, 0, 0, 0, 461, 463, 3, 48, 24, 0,
	462, 461, 1, 0, 0, 0, 462, 463, 1, 0, 0, 0, 463, 39, 1, 0, 0, 0, 464, 465, 5, 85, 0, 0, 465, 466,
	3, 32, 16, 0, 466, 467, 5, 86, 0, 0, 467, 41, 1, 0, 0, 0, 468, 470, 3, 128, 64, 0, 469, 471, 3, 44,
	22, 0, 470, 469, 1, 0, 0, 0, 470, 471, 1, 0, 0, 0, 471, 43, 1, 0, 0, 0, 472, 474, 3, 198, 99, 0, 473,
	475, 3, 44, 22, 0, 474, 473, 1, 0, 0, 0, 474, 475, 1, 0, 0, 0, 475, 478, 1, 0, 0, 0, 476, 478, 3,
	46, 23, 0, 477, 472, 1, 0, 0, 0, 477, 476, 1, 0, 0, 0, 478, 45, 1, 0, 0, 0, 479, 480, 6, 23, -1, 0,
	480, 481, 5, 87, 0, 0, 481, 482, 3, 82, 41, 0, 482, 484, 5, 88, 0, 0, 483, 485, 3, 166, 83, 0, 484,
	483, 1, 0, 0, 0, 484, 485, 1, 0, 0, 0, 485, 495, 1, 0, 0, 0, 486, 487, 10, 1, 0, 0, 487, 488, 5, 87,
	0, 0, 488, 489, 3, 84, 42, 0, 489, 491, 5, 88, 0, 0, 490, 492, 3, 166, 83, 0, 491, 490, 1, 0, 0,
	0, 491, 492, 1, 0, 0, 0, 492, 494, 1, 0, 0, 0, 493, 486, 1, 0, 0, 0, 494, 497, 1, 0, 0, 0, 495, 493,
	1, 0, 0, 0, 495, 496, 1, 0, 0, 0, 496, 47, 1, 0, 0, 0, 497, 495, 1, 0, 0, 0, 498, 500, 5, 85, 0, 0,
	499, 501, 3, 32, 16, 0, 500, 499, 1, 0, 0, 0, 500, 501, 1, 0, 0, 0, 501, 502, 1, 0, 0, 0, 502, 505,
	5, 86, 0, 0, 503, 505, 3, 234, 117, 0, 504, 498, 1, 0, 0, 0, 504, 503, 1, 0, 0, 0, 505, 49, 1, 0,
	0, 0, 506, 513, 3, 34, 17, 0, 507, 508, 5, 85, 0, 0, 508, 509, 3, 208, 104, 0, 509, 510, 5, 86,
	0, 0, 510, 511, 3, 50, 25, 0, 511, 513, 1, 0, 0, 0, 512, 506, 1, 0, 0, 0, 512, 507, 1, 0, 0, 0, 513,
	51, 1, 0, 0, 0, 514, 519, 3, 50, 25, 0, 515, 516, 7, 5, 0, 0, 516, 518, 3, 50, 25, 0, 517, 515, 1,
	0, 0, 0, 518, 521, 1, 0, 0, 0, 519, 517, 1, 0, 0, 0, 519, 520, 1, 0, 0, 0, 520, 53, 1, 0, 0, 0, 521,
	519, 1, 0, 0, 0, 522, 527, 3, 52, 26, 0, 523, 524, 7, 6, 0, 0, 524, 526, 3, 52, 26, 0, 525, 523,
	1, 0, 0, 0, 526, 529, 1, 0, 0, 0, 527, 525, 1, 0, 0, 0, 527, 528, 1, 0, 0, 0, 528, 55, 1, 0, 0, 0, 529,
	527, 1, 0, 0, 0, 530, 535, 3, 54, 27, 0, 531, 532, 7, 7, 0, 0, 532, 534, 3, 54, 27, 0, 533, 531,
	1, 0, 0, 0, 534, 537, 1, 0, 0, 0, 535, 533, 1, 0, 0, 0, 535, 536, 1, 0, 0, 0, 536, 57, 1, 0, 0, 0, 537,
	535, 1, 0, 0, 0, 538, 544, 3, 56, 28, 0, 539, 540, 3, 60, 30, 0, 540, 541, 3, 56, 28, 0, 541, 543,
	1, 0, 0, 0, 542, 539, 1, 0, 0, 0, 543, 546, 1, 0, 0, 0, 544, 542, 1, 0, 0, 0, 544, 545, 1, 0, 0, 0,
	545, 59, 1, 0, 0, 0, 546, 544, 1, 0, 0, 0, 547, 548, 5, 103, 0, 0, 548, 552, 5, 103, 0, 0, 549, 550,
	5, 102, 0, 0, 550, 552, 5, 102, 0, 0, 551, 547, 1, 0, 0, 0, 551, 549, 1, 0, 0, 0, 552, 61, 1, 0, 0,
	0, 553, 558, 3, 58, 29, 0, 554, 555, 7, 8, 0, 0, 555, 557, 3, 58, 29, 0, 556, 554, 1, 0, 0, 0, 557,
	560, 1, 0, 0, 0, 558, 556, 1, 0, 0, 0, 558, 559, 1, 0, 0, 0, 559, 63, 1, 0, 0, 0, 560, 558, 1, 0, 0,
	0, 561, 566, 3, 62, 31, 0, 562, 563, 7, 9, 0, 0, 563, 565, 3, 62, 31, 0, 564, 562, 1, 0, 0, 0, 565,
	568, 1, 0, 0, 0, 566, 564, 1, 0, 0, 0, 566, 567, 1, 0, 0, 0, 567, 65, 1, 0, 0, 0, 568, 566, 1, 0, 0,
	0, 569, 574, 3, 64, 32, 0, 570, 571, 5, 97, 0, 0, 571, 573, 3, 64, 32, 0, 572, 570, 1, 0, 0, 0, 573,
	576, 1, 0, 0, 0, 574, 572, 1, 0, 0, 0, 574, 575, 1, 0, 0, 0, 575, 67, 1, 0, 0, 0, 576, 574, 1, 0, 0,
	0, 577, 582, 3, 66, 33, 0, 578, 579, 5, 96, 0, 0, 579, 581, 3, 66, 33, 0, 580, 578, 1, 0, 0, 0, 581,
	584, 1, 0, 0, 0, 582, 580, 1, 0, 0, 0, 582, 583, 1, 0, 0, 0, 583, 69, 1, 0, 0, 0, 584, 582, 1, 0, 0,
	0, 585, 590, 3, 68, 34, 0, 586, 587, 5, 98, 0, 0, 587, 589, 3, 68, 34, 0, 588, 586, 1, 0, 0, 0, 589,
	592, 1, 0, 0, 0, 590, 588, 1, 0, 0, 0, 590, 591, 1, 0, 0, 0, 591, 71, 1, 0, 0, 0, 592, 590, 1, 0, 0,
	0, 593, 598, 3, 70, 35, 0, 594, 595, 5, 118, 0, 0, 595, 597, 3, 70, 35, 0, 596, 594, 1, 0, 0, 0,
	597, 600, 1, 0, 0, 0, 598, 596, 1, 0, 0, 0, 598, 599, 1, 0, 0, 0, 599, 73, 1, 0, 0, 0, 600, 598, 1,
	0, 0, 0, 601, 606, 3, 72, 36, 0, 602, 603, 5, 119, 0, 0, 603, 605, 3, 72, 36, 0, 604, 602, 1, 0,
	0, 0, 605, 608, 1, 0, 0, 0, 606, 604, 1, 0, 0, 0, 606, 607, 1, 0, 0, 0, 607, 75, 1, 0, 0, 0, 608, 606,
	1, 0, 0, 0, 609, 615, 3, 74, 37, 0, 610, 611, 5, 125, 0, 0, 611, 612, 3, 82, 41, 0, 612, 613, 5,
	126, 0, 0, 613, 614, 3, 78, 39, 0, 614, 616, 1, 0, 0, 0, 615, 610, 1, 0, 0, 0, 615, 616, 1, 0, 0,
	0, 616, 77, 1, 0, 0, 0, 617, 624, 3, 76, 38, 0, 618, 619, 3, 74, 37, 0, 619, 620, 3, 80, 40, 0, 620,
	621, 3, 230, 115, 0, 621, 624, 1, 0, 0, 0, 622, 624, 3, 250, 125, 0, 623, 617, 1, 0, 0, 0, 623,
	618, 1, 0, 0, 0, 623, 622, 1, 0, 0, 0, 624, 79, 1, 0, 0, 0, 625, 626, 7, 10, 0, 0, 626, 81, 1, 0, 0,
	0, 627, 632, 3, 78, 39, 0, 628, 629, 5, 122, 0, 0, 629, 631, 3, 78, 39, 0, 630, 628, 1, 0, 0, 0,
	631, 634, 1, 0, 0, 0, 632, 630, 1, 0, 0, 0, 632, 633, 1, 0, 0, 0, 633, 83, 1, 0, 0, 0, 634, 632, 1,
	0, 0, 0, 635, 636, 3, 76, 38, 0, 636, 85, 1, 0, 0, 0, 637, 645, 3, 88, 44, 0, 638, 645, 3, 110, 55,
	0, 639, 645, 3, 90, 45, 0, 640, 645, 3, 92, 46, 0, 641, 645, 3, 96, 48, 0, 642, 645, 3, 100, 50,
	0, 643, 645, 3, 108, 54, 0, 644, 637, 1, 0, 0, 0, 644, 638, 1, 0, 0, 0, 644, 639, 1, 0, 0, 0, 644,
	640, 1, 0, 0, 0, 644, 641, 1, 0, 0, 0, 644, 642, 1, 0, 0, 0, 644, 643, 1, 0, 0, 0, 645, 87, 1, 0, 0,
	0, 646, 651, 5, 132, 0, 0, 647, 648, 5, 16, 0, 0, 648, 651, 3, 84, 42, 0, 649, 651, 5, 27, 0, 0,
	650, 646, 1, 0, 0, 0, 650, 647, 1, 0, 0, 0, 650, 649, 1, 0, 0, 0, 651, 652, 1, 0, 0, 0, 652, 653,
	5, 126, 0, 0, 653, 654, 3, 86, 43, 0, 654, 89, 1, 0, 0, 0, 655, 657, 3, 82, 41, 0, 656, 655, 1, 0,
	0, 0, 656, 657, 1, 0, 0, 0, 657, 658, 1, 0, 0, 0, 658, 659, 5, 128, 0, 0, 659, 91, 1, 0, 0, 0, 660,
	662, 5, 89, 0, 0, 661, 663, 3, 94, 47, 0, 662, 661, 1, 0, 0, 0, 662, 663, 1, 0, 0, 0, 663, 664, 1,
	0, 0, 0, 664, 665, 5, 90, 0, 0, 665, 93, 1, 0, 0, 0, 666, 668, 3, 86, 43, 0, 667, 666, 1, 0, 0, 0,
	668, 669, 1, 0, 0, 0, 669, 667, 1, 0, 0, 0, 669, 670, 1, 0, 0, 0, 670, 95, 1, 0, 0, 0, 671, 672, 5,
	43, 0, 0, 672, 673, 5, 85, 0, 0, 673, 674, 3, 98, 49, 0, 674, 675, 5, 86, 0, 0, 675, 678, 3, 86,
	43, 0, 676, 677, 5, 32, 0, 0, 677, 679, 3, 86, 43, 0, 678, 676, 1, 0, 0, 0, 678, 679, 1, 0, 0, 0,
	679, 687, 1, 0, 0, 0, 680, 681, 5, 67, 0, 0, 681, 682, 5, 85, 0, 0, 682, 683, 3, 98, 49, 0, 683,
	684, 5, 86, 0, 0, 684, 685, 3, 86, 43, 0, 685, 687, 1, 0, 0, 0, 686, 671, 1, 0, 0, 0, 686, 680, 1,
	0, 0, 0, 687, 97, 1, 0, 0, 0, 688, 700, 3, 82, 41, 0, 689, 691, 3, 166, 83, 0, 690, 689, 1, 0, 0,
	0, 690, 691, 1, 0, 0, 0, 691, 692, 1, 0, 0, 0, 692, 693, 3, 118, 59, 0, 693, 697, 3, 188, 94, 0,
	694, 695, 5, 101, 0, 0, 695, 698, 3, 230, 115, 0, 696, 698, 3, 234, 117, 0, 697, 694, 1, 0, 0,
	0, 697, 696, 1, 0, 0, 0, 698, 700, 1, 0, 0, 0, 699, 688, 1, 0, 0, 0, 699, 690, 1, 0, 0, 0, 700, 99,
	1, 0, 0, 0, 701, 702, 5, 84, 0, 0, 702, 703, 5, 85, 0, 0, 703, 704, 3, 98, 49, 0, 704, 705, 5, 86,
	0, 0, 705, 706, 3, 86, 43, 0, 706, 735, 1, 0, 0, 0, 707, 708, 5, 29, 0, 0, 708, 709, 3, 86, 43, 0,
	709, 710, 5, 84, 0, 0, 710, 711, 5, 85, 0, 0, 711, 712, 3, 82, 41, 0, 712, 713, 5, 86, 0, 0, 713,
	714, 5, 128, 0, 0, 714, 735, 1, 0, 0, 0, 715, 716, 5, 40, 0, 0, 716, 729, 5, 85, 0, 0, 717, 719,
	3, 102, 51, 0, 718, 720, 3, 98, 49, 0, 719, 718, 1, 0, 0, 0, 719, 720, 1, 0, 0, 0, 720, 721, 1, 0,
	0, 0, 721, 723, 5, 128, 0, 0, 722, 724, 3, 82, 41, 0, 723, 722, 1, 0, 0, 0, 723, 724, 1, 0, 0, 0,
	724, 730, 1, 0, 0, 0, 725, 726, 3, 104, 52, 0, 726, 727, 5, 126, 0, 0, 727, 728, 3, 106, 53, 0,
	728, 730, 1, 0, 0, 0, 729, 717, 1, 0, 0, 0, 729, 725, 1, 0, 0, 0, 730, 731, 1, 0, 0, 0, 731, 732,
	5, 86, 0, 0, 732, 733, 3, 86, 43, 0, 733, 735, 1, 0, 0, 0, 734, 701, 1, 0, 0, 0, 734, 707, 1, 0, 0,
	0, 734, 715, 1, 0, 0, 0, 735, 101, 1, 0, 0, 0, 736, 739, 3, 90, 45, 0, 737, 739, 3, 114, 57, 0, 738,
	736, 1, 0, 0, 0, 738, 737, 1, 0, 0, 0, 739, 103, 1, 0, 0, 0, 740, 742, 3, 166, 83, 0, 741, 740, 1,
	0, 0, 0, 741, 742, 1, 0, 0, 0, 742, 743, 1, 0, 0, 0, 743, 744, 3, 118, 59, 0, 744, 745, 3, 188, 94,
	0, 745, 105, 1, 0, 0, 0, 746, 749, 3, 82, 41, 0, 747, 749, 3, 234, 117, 0, 748, 746, 1, 0, 0, 0,
	748, 747, 1, 0, 0, 0, 749, 107, 1, 0, 0, 0, 750, 760, 5, 15, 0, 0, 751, 760, 5, 25, 0, 0, 752, 755,
	5, 59, 0, 0, 753, 756, 3, 82, 41, 0, 754, 756, 3, 234, 117, 0, 755, 753, 1, 0, 0, 0, 755, 754, 1,
	0, 0, 0, 755, 756, 1, 0, 0, 0, 756, 760, 1, 0, 0, 0, 757, 758, 5, 42, 0, 0, 758, 760, 5, 132, 0, 0,
	759, 750, 1, 0, 0, 0, 759, 751, 1, 0, 0, 0, 759, 752, 1, 0, 0, 0, 759, 757, 1, 0, 0, 0, 760, 761,
	1, 0, 0, 0, 761, 762, 5, 128, 0, 0, 762, 109, 1, 0, 0, 0, 763, 764, 3, 112, 56, 0, 764, 111, 1, 0,
	0, 0, 765, 766, 3, 114, 57, 0, 766, 113, 1, 0, 0, 0, 767, 769, 3, 118, 59, 0, 768, 767, 1, 0, 0,
	0, 768, 769, 1, 0, 0, 0, 769, 771, 1, 0, 0, 0, 770, 772, 3, 184, 92, 0, 771, 770, 1, 0, 0, 0, 771,
	772, 1, 0, 0, 0, 772, 773, 1, 0, 0, 0, 773, 782, 5, 128, 0, 0, 774, 776, 3, 166, 83, 0, 775, 777,
	3, 118, 59, 0, 776, 775, 1, 0, 0, 0, 776, 777, 1, 0, 0, 0, 777, 778, 1, 0, 0, 0, 778, 779, 3, 184,
	92, 0, 779, 780, 5, 128, 0, 0, 780, 782, 1, 0, 0, 0, 781, 768, 1, 0, 0, 0, 781, 774, 1, 0, 0, 0, 782,
	115, 1, 0, 0, 0, 783, 786, 3, 124, 62, 0, 784, 786, 3, 120, 60, 0, 785, 783, 1, 0, 0, 0, 785, 784,
	1, 0, 0, 0, 786, 117, 1, 0, 0, 0, 787, 789, 3, 116, 58, 0, 788, 787, 1, 0, 0, 0, 789, 790, 1, 0, 0,
	0, 790, 791, 1, 0, 0, 0, 790, 788, 1, 0, 0, 0, 791, 793, 1, 0, 0, 0, 792, 794, 3, 166, 83, 0, 793,
	792, 1, 0, 0, 0, 793, 794, 1, 0, 0, 0, 794, 119, 1, 0, 0, 0, 795, 796, 7, 11, 0, 0, 796, 121, 1, 0,
	0, 0, 797, 798, 5, 132, 0, 0, 798, 123, 1, 0, 0, 0, 799, 802, 3, 126, 63, 0, 800, 802, 3, 144, 72,
	0, 801, 799, 1, 0, 0, 0, 801, 800, 1, 0, 0, 0, 802, 125, 1, 0, 0, 0, 803, 806, 3, 136, 68, 0, 804,
	806, 3, 202, 101, 0, 805, 803, 1, 0, 0, 0, 805, 804, 1, 0, 0, 0, 806, 127, 1, 0, 0, 0, 807, 809,
	3, 124, 62, 0, 808, 807, 1, 0, 0, 0, 809, 810, 1, 0, 0, 0, 810, 808, 1, 0, 0, 0, 810, 811, 1, 0, 0,
	0, 811, 813, 1, 0, 0, 0, 812, 814, 3, 166, 83, 0, 813, 812, 1, 0, 0, 0, 813, 814, 1, 0, 0, 0, 814,
	129, 1, 0, 0, 0, 815, 817, 3, 126, 63, 0, 816, 815, 1, 0, 0, 0, 817, 818, 1, 0, 0, 0, 818, 816, 1,
	0, 0, 0, 818, 819, 1, 0, 0, 0, 819, 821, 1, 0, 0, 0, 820, 822, 3, 166, 83, 0, 821, 820, 1, 0, 0, 0,
	821, 822, 1, 0, 0, 0, 822, 131, 1, 0, 0, 0, 823, 824, 7, 12, 0, 0, 824, 133, 1, 0, 0, 0, 825, 826,
	7, 13, 0, 0, 826, 135, 1, 0, 0, 0, 827, 829, 3, 10, 5, 0, 828, 827, 1, 0, 0, 0, 828, 829, 1, 0, 0,
	0, 829, 830, 1, 0, 0, 0, 830, 875, 3, 138, 69, 0, 831, 875, 3, 134, 67, 0, 832, 834, 3, 134, 67,
	0, 833, 832, 1, 0, 0, 0, 833, 834, 1, 0, 0, 0, 834, 836, 1, 0, 0, 0, 835, 837, 3, 132, 66, 0, 836,
	835, 1, 0, 0, 0, 837, 838, 1, 0, 0, 0, 838, 836, 1, 0, 0, 0, 838, 839, 1, 0, 0, 0, 839, 875, 1, 0,
	0, 0, 840, 842, 3, 134, 67, 0, 841, 840, 1, 0, 0, 0, 841, 842, 1, 0, 0, 0, 842, 843, 1, 0, 0, 0, 843,
	875, 5, 18, 0, 0, 844, 846, 3, 134, 67, 0, 845, 844, 1, 0, 0, 0, 845, 846, 1, 0, 0, 0, 846, 847,
	1, 0, 0, 0, 847, 875, 5, 19, 0, 0, 848, 850, 3, 134, 67, 0, 849, 848, 1, 0, 0, 0, 849, 850, 1, 0,
	0, 0, 850, 851, 1, 0, 0, 0, 851, 875, 5, 20, 0, 0, 852, 854, 3, 134, 67, 0, 853, 852, 1, 0, 0, 0,
	853, 854, 1, 0, 0, 0, 854, 855, 1, 0, 0, 0, 855, 875, 5, 83, 0, 0, 856, 875, 5, 14, 0, 0, 857, 859,
	3, 134, 67, 0, 858, 857, 1, 0, 0, 0, 858, 859, 1, 0, 0, 0, 859, 863, 1, 0, 0, 0, 860, 862, 3, 132,
	66, 0, 861, 860, 1, 0, 0, 0, 862, 865, 1, 0, 0, 0, 863, 861, 1, 0, 0, 0, 863, 864, 1, 0, 0, 0, 864,
	866, 1, 0, 0, 0, 865, 863, 1, 0, 0, 0, 866, 875, 5, 45, 0, 0, 867, 875, 5, 39, 0, 0, 868, 870, 3,
	132, 66, 0, 869, 868, 1, 0, 0, 0, 869, 870, 1, 0, 0, 0, 870, 871, 1, 0, 0, 0, 871, 875, 5, 30, 0,
	0, 872, 875, 5, 81, 0, 0, 873, 875, 5, 13, 0, 0, 874, 828, 1, 0, 0, 0, 874, 831, 1, 0, 0, 0, 874,
	833, 1, 0, 0, 0, 874, 841, 1, 0, 0, 0, 874, 845, 1, 0, 0, 0, 874, 849, 1, 0, 0, 0, 874, 853, 1, 0,
	0, 0, 874, 856, 1, 0, 0, 0, 874, 858, 1, 0, 0, 0, 874, 867, 1, 0, 0, 0, 874, 869, 1, 0, 0, 0, 874,
	872, 1, 0, 0, 0, 874, 873, 1, 0, 0, 0, 875, 137, 1, 0, 0, 0, 876, 881, 3, 236, 118, 0, 877, 881,
	3, 142, 71, 0, 878, 881, 3, 122, 61, 0, 879, 881, 3, 242, 121, 0, 880, 876, 1, 0, 0, 0, 880, 877,
	1, 0, 0, 0, 880, 878, 1, 0, 0, 0, 880, 879, 1, 0, 0, 0, 881, 139, 1, 0, 0, 0, 882, 883, 5, 26, 0, 0,
	883, 886, 5, 85, 0, 0, 884, 887, 3, 82, 41, 0, 885, 887, 5, 13, 0, 0, 886, 884, 1, 0, 0, 0, 886,
	885, 1, 0, 0, 0, 887, 888, 1, 0, 0, 0, 888, 889, 5, 86, 0, 0, 889, 141, 1, 0, 0, 0, 890, 891, 5, 132,
	0, 0, 891, 143, 1, 0, 0, 0, 892, 893, 3, 146, 73, 0, 893, 898, 5, 89, 0, 0, 894, 896, 3, 154, 77,
	0, 895, 897, 5, 122, 0, 0, 896, 895, 1, 0, 0, 0, 896, 897, 1, 0, 0, 0, 897, 899, 1, 0, 0, 0, 898,
	894, 1, 0, 0, 0, 898, 899, 1, 0, 0, 0, 899, 900, 1, 0, 0, 0, 900, 901, 5, 90, 0, 0, 901, 145, 1, 0,
	0, 0, 902, 904, 3, 150, 75, 0, 903, 905, 3, 166, 83, 0, 904, 903, 1, 0, 0, 0, 904, 905, 1, 0, 0,
	0, 905, 907, 1, 0, 0, 0, 906, 908, 5, 132, 0, 0, 907, 906, 1, 0, 0, 0, 907, 908, 1, 0, 0, 0, 908,
	910, 1, 0, 0, 0, 909, 911, 3, 152, 76, 0, 910, 909, 1, 0, 0, 0, 910, 911, 1, 0, 0, 0, 911, 147, 1,
	0, 0, 0, 912, 914, 3, 150, 75, 0, 913, 915, 3, 166, 83, 0, 914, 913, 1, 0, 0, 0, 914, 915, 1, 0,
	0, 0, 915, 916, 1, 0, 0, 0, 916, 918, 5, 132, 0, 0, 917, 919, 3, 152, 76, 0, 918, 917, 1, 0, 0, 0,
	918, 919, 1, 0, 0, 0, 919, 920, 1, 0, 0, 0, 920, 921, 5, 128, 0, 0, 921, 149, 1, 0, 0, 0, 922, 924,
	5, 33, 0, 0, 923, 925, 7, 14, 0, 0, 924, 923, 1, 0, 0, 0, 924, 925, 1, 0, 0, 0, 925, 151, 1, 0, 0,
	0, 926, 927, 5, 126, 0, 0, 927, 928, 3, 128, 64, 0, 928, 153, 1, 0, 0, 0, 929, 934, 3, 156, 78,
	0, 930, 931, 5, 122, 0, 0, 931, 933, 3, 156, 78, 0, 932, 930, 1, 0, 0, 0, 933, 936, 1, 0, 0, 0, 934,
	932, 1, 0, 0, 0, 934, 935, 1, 0, 0, 0, 935, 155, 1, 0, 0, 0, 936, 934, 1, 0, 0, 0, 937, 940, 3, 158,
	79, 0, 938, 939, 5, 101, 0, 0, 939, 941, 3, 84, 42, 0, 940, 938, 1, 0, 0, 0, 940, 941, 1, 0, 0, 0,
	941, 157, 1, 0, 0, 0, 942, 943, 5, 132, 0, 0, 943, 159, 1, 0, 0, 0, 944, 947, 3, 162, 81, 0, 945,
	947, 3, 164, 82, 0, 946, 944, 1, 0, 0, 0, 946, 945, 1, 0, 0, 0, 947, 161, 1, 0, 0, 0, 948, 949, 5,
	132, 0, 0, 949, 163, 1, 0, 0, 0, 950, 951, 5, 132, 0, 0, 951, 165, 1, 0, 0, 0, 952, 954, 3, 168,
	84, 0, 953, 952, 1, 0, 0, 0, 954, 955, 1, 0, 0, 0, 955, 953, 1, 0, 0, 0, 955, 956, 1, 0, 0, 0, 956,
	167, 1, 0, 0, 0, 957, 958, 5, 87, 0, 0, 958, 960, 5, 87, 0, 0, 959, 961, 3, 172, 86, 0, 960, 959,
	1, 0, 0, 0, 960, 961, 1, 0, 0, 0, 961, 962, 1, 0, 0, 0, 962, 963, 5, 88, 0, 0, 963, 966, 5, 88, 0,
	0, 964, 966, 3, 170, 85, 0, 965, 957, 1, 0, 0, 0, 965, 964, 1, 0, 0, 0, 966, 169, 1, 0, 0, 0, 967,
	968, 5, 10, 0, 0, 968, 971, 5, 85, 0, 0, 969, 972, 3, 208, 104, 0, 970, 972, 3, 84, 42, 0, 971,
	969, 1, 0, 0, 0, 971, 970, 1, 0, 0, 0, 972, 974, 1, 0, 0, 0, 973, 975, 5, 131, 0, 0, 974, 973, 1,
	0, 0, 0, 974, 975, 1, 0, 0, 0, 975, 976, 1, 0, 0, 0, 976, 977, 5, 86, 0, 0, 977, 171, 1, 0, 0, 0, 978,
	983, 3, 174, 87, 0, 979, 980, 5, 122, 0, 0, 980, 982, 3, 174, 87, 0, 981, 979, 1, 0, 0, 0, 982,
	985, 1, 0, 0, 0, 983, 981, 1, 0, 0, 0, 983, 984, 1, 0, 0, 0, 984, 987, 1, 0, 0, 0, 985, 983, 1, 0,
	0, 0, 986, 988, 5, 131, 0, 0, 987, 986, 1, 0, 0, 0, 987, 988, 1, 0, 0, 0, 988, 173, 1, 0, 0, 0, 989,
	990, 3, 176, 88, 0, 990, 991, 5, 127, 0, 0, 991, 993, 1, 0, 0, 0, 992, 989, 1, 0, 0, 0, 992, 993,
	1, 0, 0, 0, 993, 994, 1, 0, 0, 0, 994, 996, 5, 132, 0, 0, 995, 997, 3, 178, 89, 0, 996, 995, 1, 0,
	0, 0, 996, 997, 1, 0, 0, 0, 997, 175, 1, 0, 0, 0, 998, 999, 5, 132, 0, 0, 999, 177, 1, 0, 0, 0, 1000,
	1002, 5, 85, 0, 0, 1001, 1003, 3, 180, 90, 0, 1002, 1001, 1, 0, 0, 0, 1002, 1003, 1, 0, 0, 0, 1003,
	1004, 1, 0, 0, 0, 1004, 1005, 5, 86, 0, 0, 1005, 179, 1, 0, 0, 0, 1006, 1008, 3, 182, 91, 0, 1007,
	1006, 1, 0, 0, 0, 1008, 1009, 1, 0, 0, 0, 1009, 1007, 1, 0, 0, 0, 1009, 1010, 1, 0, 0, 0, 1010,
	181, 1, 0, 0, 0, 1011, 1012, 5, 85, 0, 0, 1012, 1013, 3, 180, 90, 0, 1013, 1014, 5, 86, 0, 0, 1014,
	1029, 1, 0, 0, 0, 1015, 1016, 5, 87, 0, 0, 1016, 1017, 3, 180, 90, 0, 1017, 1018, 5, 88, 0, 0,
	1018, 1029, 1, 0, 0, 0, 1019, 1020, 5, 89, 0, 0, 1020, 1021, 3, 180, 90, 0, 1021, 1022, 5, 90,
	0, 0, 1022, 1029, 1, 0, 0, 0, 1023, 1025, 8, 15, 0, 0, 1024, 1023, 1, 0, 0, 0, 1025, 1026, 1, 0,
	0, 0, 1026, 1024, 1, 0, 0, 0, 1026, 1027, 1, 0, 0, 0, 1027, 1029, 1, 0, 0, 0, 1028, 1011, 1, 0,
	0, 0, 1028, 1015, 1, 0, 0, 0, 1028, 1019, 1, 0, 0, 0, 1028, 1024, 1, 0, 0, 0, 1029, 183, 1, 0, 0,
	0, 1030, 1035, 3, 186, 93, 0, 1031, 1032, 5, 122, 0, 0, 1032, 1034, 3, 186, 93, 0, 1033, 1031,
	1, 0, 0, 0, 1034, 1037, 1, 0, 0, 0, 1035, 1033, 1, 0, 0, 0, 1035, 1036, 1, 0, 0, 0, 1036, 185, 1,
	0, 0, 0, 1037, 1035, 1, 0, 0, 0, 1038, 1040, 3, 188, 94, 0, 1039, 1041, 3, 226, 113, 0, 1040,
	1039, 1, 0, 0, 0, 1040, 1041, 1, 0, 0, 0, 1041, 187, 1, 0, 0, 0, 1042, 1048, 3, 190, 95, 0, 1043,
	1044, 3, 192, 96, 0, 1044, 1045, 3, 194, 97, 0, 1045, 1046, 3, 196, 98, 0, 1046, 1048, 1, 0,
	0, 0, 1047, 1042, 1, 0, 0, 0, 1047, 1043, 1, 0, 0, 0, 1048, 189, 1, 0, 0, 0, 1049, 1051, 3, 198,
	99, 0, 1050, 1052, 5, 22, 0, 0, 1051, 1050, 1, 0, 0, 0, 1051, 1052, 1, 0, 0, 0, 1052, 1054, 1,
	0, 0, 0, 1053, 1049, 1, 0, 0, 0, 1054, 1057, 1, 0, 0, 0, 1055, 1053, 1, 0, 0, 0, 1055, 1056, 1,
	0, 0, 0, 1056, 1058, 1, 0, 0, 0, 1057, 1055, 1, 0, 0, 0, 1058, 1059, 3, 192, 96, 0, 1059, 191,
	1, 0, 0, 0, 1060, 1061, 6, 96, -1, 0, 1061, 1063, 3, 206, 103, 0, 1062, 1064, 3, 166, 83, 0, 1063,
	1062, 1, 0, 0, 0, 1063, 1064, 1, 0, 0, 0, 1064, 1070, 1, 0, 0, 0, 1065, 1066, 5, 85, 0, 0, 1066,
	1067, 3, 190, 95, 0, 1067, 1068, 5, 86, 0, 0, 1068, 1070, 1, 0, 0, 0, 1069, 1060, 1, 0, 0, 0, 1069,
	1065, 1, 0, 0, 0, 1070, 1085, 1, 0, 0, 0, 1071, 1081, 10, 2, 0, 0, 1072, 1082, 3, 194, 97, 0, 1073,
	1075, 5, 87, 0, 0, 1074, 1076, 3, 84, 42, 0, 1075, 1074, 1, 0, 0, 0, 1075, 1076, 1, 0, 0, 0, 1076,
	1077, 1, 0, 0, 0, 1077, 1079, 5, 88, 0, 0, 1078, 1080, 3, 166, 83, 0, 1079, 1078, 1, 0, 0, 0, 1079,
	1080, 1, 0, 0, 0, 1080, 1082, 1, 0, 0, 0, 1081, 1072, 1, 0, 0, 0, 1081, 1073, 1, 0, 0, 0, 1082,
	1084, 1, 0, 0, 0, 1083, 1071, 1, 0, 0, 0, 1084, 1087, 1, 0, 0, 0, 1085, 1083, 1, 0, 0, 0, 1085,
	1086, 1, 0, 0, 0, 1086, 193, 1, 0, 0, 0, 1087, 1085, 1, 0, 0, 0, 1088, 1090, 5, 85, 0, 0, 1089,
	1091, 3, 220, 110, 0, 1090, 1089, 1, 0, 0, 0, 1090, 1091, 1, 0, 0, 0, 1091, 1092, 1, 0, 0, 0, 1092,
	1094, 5, 86, 0, 0, 1093, 1095, 3, 200, 100, 0, 1094, 1093, 1, 0, 0, 0, 1094, 1095, 1, 0, 0, 0,
	1095, 1097, 1, 0, 0, 0, 1096, 1098, 3, 204, 102, 0, 1097, 1096, 1, 0, 0, 0, 1097, 1098, 1, 0,
	0, 0, 1098, 1100, 1, 0, 0, 0, 1099, 1101, 3, 252, 126, 0, 1100, 1099, 1, 0, 0, 0, 1100, 1101,
	1, 0, 0, 0, 1101, 1103, 1, 0, 0, 0, 1102, 1104, 3, 166, 83, 0, 1103, 1102, 1, 0, 0, 0, 1103, 1104,
	1, 0, 0, 0, 1104, 195, 1, 0, 0, 0, 1105, 1106, 5, 124, 0, 0, 1106, 1108, 3, 130, 65, 0, 1107, 1109,
	3, 210, 105, 0, 1108, 1107, 1, 0, 0, 0, 1108, 1109, 1, 0, 0, 0, 1109, 197, 1, 0, 0, 0, 1110, 1112,
	7, 16, 0, 0, 1111, 1113, 3, 166, 83, 0, 1112, 1111, 1, 0, 0, 0, 1112, 1113, 1, 0, 0, 0, 1113, 1122,
	1, 0, 0, 0, 1114, 1116, 5, 93, 0, 0, 1115, 1117, 3, 166, 83, 0, 1116, 1115, 1, 0, 0, 0, 1116, 1117,
	1, 0, 0, 0, 1117, 1119, 1, 0, 0, 0, 1118, 1120, 3, 200, 100, 0, 1119, 1118, 1, 0, 0, 0, 1119, 1120,
	1, 0, 0, 0, 1120, 1122, 1, 0, 0, 0, 1121, 1110, 1, 0, 0, 0, 1121, 1114, 1, 0, 0, 0, 1122, 199, 1,
	0, 0, 0, 1123, 1125, 3, 202, 101, 0, 1124, 1123, 1, 0, 0, 0, 1125, 1126, 1, 0, 0, 0, 1126, 1124,
	1, 0, 0, 0, 1126, 1127, 1, 0, 0, 0, 1127, 201, 1, 0, 0, 0, 1128, 1129, 7, 17, 0, 0, 1129, 203, 1,
	0, 0, 0, 1130, 1131, 7, 16, 0, 0, 1131, 205, 1, 0, 0, 0, 1132, 1134, 5, 131, 0, 0, 1133, 1132,
	1, 0, 0, 0, 1133, 1134, 1, 0, 0, 0, 1134, 1135, 1, 0, 0, 0, 1135, 1136, 3, 4, 2, 0, 1136, 207, 1,
	0, 0, 0, 1137, 1139, 3, 128, 64, 0, 1138, 1140, 3, 210, 105, 0, 1139, 1138, 1, 0, 0, 0, 1139,
	1140, 1, 0, 0, 0, 1140, 209, 1, 0, 0, 0, 1141, 1150, 3, 212, 106, 0, 1142, 1144, 3, 214, 107,
	0, 1143, 1142, 1, 0, 0, 0, 1143, 1144, 1, 0, 0, 0, 1144, 1145, 1, 0, 0, 0, 1145, 1146, 3, 194,
	97, 0, 1146, 1147, 3, 196, 98, 0, 1147, 1150, 1, 0, 0, 0, 1148, 1150, 3, 216, 108, 0, 1149, 1141,
	1, 0, 0, 0, 1149, 1143, 1, 0, 0, 0, 1149, 1148, 1, 0, 0, 0, 1150, 211, 1, 0, 0, 0, 1151, 1161, 3,
	214, 107, 0, 1152, 1154, 3, 198, 99, 0, 1153, 1152, 1, 0, 0, 0, 1154, 1155, 1, 0, 0, 0, 1155,
	1153, 1, 0, 0, 0, 1155, 1156, 1, 0, 0, 0, 1156, 1158, 1, 0, 0, 0, 1157, 1159, 3, 214, 107, 0, 1158,
	1157, 1, 0, 0, 0, 1158, 1159, 1, 0, 0, 0, 1159, 1161, 1, 0, 0, 0, 1160, 1151, 1, 0, 0, 0, 1160,
	1153, 1, 0, 0, 0, 1161, 213, 1, 0, 0, 0, 1162, 1163, 6, 107, -1, 0, 1163, 1177, 3, 194, 97, 0,
	1164, 1166, 5, 87, 0, 0, 1165, 1167, 3, 84, 42, 0, 1166, 1165, 1, 0, 0, 0, 1166, 1167, 1, 0, 0,
	0, 1167, 1168, 1, 0, 0, 0, 1168, 1170, 5, 88, 0, 0, 1169, 1171, 3, 166, 83, 0, 1170, 1169, 1,
	0, 0, 0, 1170, 1171, 1, 0, 0, 0, 1171, 1177, 1, 0, 0, 0, 1172, 1173, 5, 85, 0, 0, 1173, 1174, 3,
	212, 106, 0, 1174, 1175, 5, 86, 0, 0, 1175, 1177, 1, 0, 0, 0, 1176, 1162, 1, 0, 0, 0, 1176, 1164,
	1, 0, 0, 0, 1176, 1172, 1, 0, 0, 0, 1177, 1193, 1, 0, 0, 0, 1178, 1189, 10, 4, 0, 0, 1179, 1190,
	3, 194, 97, 0, 1180, 1181, 3, 214, 107, 0, 1181, 1183, 5, 87, 0, 0, 1182, 1184, 3, 84, 42, 0,
	1183, 1182, 1, 0, 0, 0, 1183, 1184, 1, 0, 0, 0, 1184, 1185, 1, 0, 0, 0, 1185, 1187, 5, 88, 0, 0,
	1186, 1188, 3, 166, 83, 0, 1187, 1186, 1, 0, 0, 0, 1187, 1188, 1, 0, 0, 0, 1188, 1190, 1, 0, 0,
	0, 1189, 1179, 1, 0, 0, 0, 1189, 1180, 1, 0, 0, 0, 1190, 1192, 1, 0, 0, 0, 1191, 1178, 1, 0, 0,
	0, 1192, 1195, 1, 0, 0, 0, 1193, 1191, 1, 0, 0, 0, 1193, 1194, 1, 0, 0, 0, 1194, 215, 1, 0, 0, 0,
	1195, 1193, 1, 0, 0, 0, 1196, 1198, 3, 198, 99, 0, 1197, 1196, 1, 0, 0, 0, 1198, 1201, 1, 0, 0,
	0, 1199, 1197, 1, 0, 0, 0, 1199, 1200, 1, 0, 0, 0, 1200, 1202, 1, 0, 0, 0, 1201, 1199, 1, 0, 0,
	0, 1202, 1203, 3, 218, 109, 0, 1203, 217, 1, 0, 0, 0, 1204, 1205, 6, 109, -1, 0, 1205, 1206,
	5, 131, 0, 0, 1206, 1221, 1, 0, 0, 0, 1207, 1217, 10, 2, 0, 0, 1208, 1218, 3, 194, 97, 0, 1209,
	1211, 5, 87, 0, 0, 1210, 1212, 3, 84, 42, 0, 1211, 1210, 1, 0, 0, 0, 1211, 1212, 1, 0, 0, 0, 1212,
	1213, 1, 0, 0, 0, 1213, 1215, 5, 88, 0, 0, 1214, 1216, 3, 166, 83, 0, 1215, 1214, 1, 0, 0, 0, 1215,
	1216, 1, 0, 0, 0, 1216, 1218, 1, 0, 0, 0, 1217, 1208, 1, 0, 0, 0, 1217, 1209, 1, 0, 0, 0, 1218,
	1220, 1, 0, 0, 0, 1219, 1207, 1, 0, 0, 0, 1220, 1223, 1, 0, 0, 0, 1221, 1219, 1, 0, 0, 0, 1221,
	1222, 1, 0, 0, 0, 1222, 219, 1, 0, 0, 0, 1223, 1221, 1, 0, 0, 0, 1224, 1229, 3, 222, 111, 0, 1225,
	1227, 5, 122, 0, 0, 1226, 1225, 1, 0, 0, 0, 1226, 1227, 1, 0, 0, 0, 1227, 1228, 1, 0, 0, 0, 1228,
	1230, 5, 131, 0, 0, 1229, 1226, 1, 0, 0, 0, 1229, 1230, 1, 0, 0, 0, 1230, 221, 1, 0, 0, 0, 1231,
	1236, 3, 224, 112, 0, 1232, 1233, 5, 122, 0, 0, 1233, 1235, 3, 224, 112, 0, 1234, 1232, 1, 0,
	0, 0, 1235, 1238, 1, 0, 0, 0, 1236, 1234, 1, 0, 0, 0, 1236, 1237, 1, 0, 0, 0, 1237, 223, 1, 0, 0,
	0, 1238, 1236, 1, 0, 0, 0, 1239, 1241, 3, 166, 83, 0, 1240, 1239, 1, 0, 0, 0, 1240, 1241, 1, 0,
	0, 0, 1241, 1242, 1, 0, 0, 0, 1242, 1247, 3, 118, 59, 0, 1243, 1248, 3, 188, 94, 0, 1244, 1246,
	3, 210, 105, 0, 1245, 1244, 1, 0, 0, 0, 1245, 1246, 1, 0, 0, 0, 1246, 1248, 1, 0, 0, 0, 1247, 1243,
	1, 0, 0, 0, 1247, 1245, 1, 0, 0, 0, 1248, 1251, 1, 0, 0, 0, 1249, 1250, 5, 101, 0, 0, 1250, 1252,
	3, 230, 115, 0, 1251, 1249, 1, 0, 0, 0, 1251, 1252, 1, 0, 0, 0, 1252, 225, 1, 0, 0, 0, 1253, 1259,
	3, 228, 114, 0, 1254, 1255, 5, 85, 0, 0, 1255, 1256, 3, 32, 16, 0, 1256, 1257, 5, 86, 0, 0, 1257,
	1259, 1, 0, 0, 0, 1258, 1253, 1, 0, 0, 0, 1258, 1254, 1, 0, 0, 0, 1259, 227, 1, 0, 0, 0, 1260, 1261,
	5, 101, 0, 0, 1261, 1264, 3, 230, 115, 0, 1262, 1264, 3, 234, 117, 0, 1263, 1260, 1, 0, 0, 0,
	1263, 1262, 1, 0, 0, 0, 1264, 229, 1, 0, 0, 0, 1265, 1268, 3, 78, 39, 0, 1266, 1268, 3, 234, 117,
	0, 1267, 1265, 1, 0, 0, 0, 1267, 1266, 1, 0, 0, 0, 1268, 231, 1, 0, 0, 0, 1269, 1271, 3, 230, 115,
	0, 1270, 1272, 5, 131, 0, 0, 1271, 1270, 1, 0, 0, 0, 1271, 1272, 1, 0, 0, 0, 1272, 1280, 1, 0,
	0, 0, 1273, 1274, 5, 122, 0, 0, 1274, 1276, 3, 230, 115, 0, 1275, 1277, 5, 131, 0, 0, 1276, 1275,
	1, 0, 0, 0, 1276, 1277, 1, 0, 0, 0, 1277, 1279, 1, 0, 0, 0, 1278, 1273, 1, 0, 0, 0, 1279, 1282,
	1, 0, 0, 0, 1280, 1278, 1, 0, 0, 0, 1280, 1281, 1, 0, 0, 0, 1281, 233, 1, 0, 0, 0, 1282, 1280, 1,
	0, 0, 0, 1283, 1288, 5, 89, 0, 0, 1284, 1286, 3, 232, 116, 0, 1285, 1287, 5, 122, 0, 0, 1286,
	1285, 1, 0, 0, 0, 1286, 1287, 1, 0, 0, 0, 1287, 1289, 1, 0, 0, 0, 1288, 1284, 1, 0, 0, 0, 1288,
	1289, 1, 0, 0, 0, 1289, 1290, 1, 0, 0, 0, 1290, 1291, 5, 90, 0, 0, 1291, 235, 1, 0, 0, 0, 1292,
	1295, 5, 132, 0, 0, 1293, 1295, 3, 242, 121, 0, 1294, 1292, 1, 0, 0, 0, 1294, 1293, 1, 0, 0, 0,
	1295, 237, 1, 0, 0, 0, 1296, 1297, 5, 52, 0, 0, 1297, 1298, 3, 260, 130, 0, 1298, 239, 1, 0, 0,
	0, 1299, 1303, 5, 52, 0, 0, 1300, 1301, 5, 4, 0, 0, 1301, 1304, 5, 132, 0, 0, 1302, 1304, 5, 140,
	0, 0, 1303, 1300, 1, 0, 0, 0, 1303, 1302, 1, 0, 0, 0, 1304, 241, 1, 0, 0, 0, 1305, 1306, 3, 244,
	122, 0, 1306, 1308, 5, 102, 0, 0, 1307, 1309, 3, 246, 123, 0, 1308, 1307, 1, 0, 0, 0, 1308, 1309,
	1, 0, 0, 0, 1309, 1310, 1, 0, 0, 0, 1310, 1311, 5, 103, 0, 0, 1311, 243, 1, 0, 0, 0, 1312, 1313,
	5, 132, 0, 0, 1313, 245, 1, 0, 0, 0, 1314, 1316, 3, 248, 124, 0, 1315, 1317, 5, 131, 0, 0, 1316,
	1315, 1, 0, 0, 0, 1316, 1317, 1, 0, 0, 0, 1317, 1325, 1, 0, 0, 0, 1318, 1319, 5, 122, 0, 0, 1319,
	1321, 3, 248, 124, 0, 1320, 1322, 5, 131, 0, 0, 1321, 1320, 1, 0, 0, 0, 1321, 1322, 1, 0, 0, 0,
	1322, 1324, 1, 0, 0, 0, 1323, 1318, 1, 0, 0, 0, 1324, 1327, 1, 0, 0, 0, 1325, 1323, 1, 0, 0, 0,
	1325, 1326, 1, 0, 0, 0, 1326, 247, 1, 0, 0, 0, 1327, 1325, 1, 0, 0, 0, 1328, 1332, 3, 208, 104,
	0, 1329, 1332, 3, 84, 42, 0, 1330, 1332, 3, 4, 2, 0, 1331, 1328, 1, 0, 0, 0, 1331, 1329, 1, 0,
	0, 0, 1331, 1330, 1, 0, 0, 0, 1332, 249, 1, 0, 0, 0, 1333, 1335, 5, 71, 0, 0, 1334, 1336, 3, 78,
	39, 0, 1335, 1334, 1, 0, 0, 0, 1335, 1336, 1, 0, 0, 0, 1336, 251, 1, 0, 0, 0, 1337, 1340, 3, 254,
	127, 0, 1338, 1340, 3, 258, 129, 0, 1339, 1337, 1, 0, 0, 0, 1339, 1338, 1, 0, 0, 0, 1340, 253,
	1, 0, 0, 0, 1341, 1342, 5, 71, 0, 0, 1342, 1344, 5, 85, 0, 0, 1343, 1345, 3, 256, 128, 0, 1344,
	1343, 1, 0, 0, 0, 1344, 1345, 1, 0, 0, 0, 1345, 1346, 1, 0, 0, 0, 1346, 1347, 5, 86, 0, 0, 1347,
	255, 1, 0, 0, 0, 1348, 1350, 3, 208, 104, 0, 1349, 1351, 5, 131, 0, 0, 1350, 1349, 1, 0, 0, 0,
	1350, 1351, 1, 0, 0, 0, 1351, 1359, 1, 0, 0, 0, 1352, 1353, 5, 122, 0, 0, 1353, 1355, 3, 208,
	104, 0, 1354, 1356, 5, 131, 0, 0, 1355, 1354, 1, 0, 0, 0, 1355, 1356, 1, 0, 0, 0, 1356, 1358,
	1, 0, 0, 0, 1357, 1352, 1, 0, 0, 0, 1358, 1361, 1, 0, 0, 0, 1359, 1357, 1, 0, 0, 0, 1359, 1360,
	1, 0, 0, 0, 1360, 257, 1, 0, 0, 0, 1361, 1359, 1, 0, 0, 0, 1362, 1363, 5, 50, 0, 0, 1363, 1364,
	5, 85, 0, 0, 1364, 1365, 3, 84, 42, 0, 1365, 1366, 5, 86, 0, 0, 1366, 1369, 1, 0, 0, 0, 1367, 1369,
	5, 50, 0, 0, 1368, 1362, 1, 0, 0, 0, 1368, 1367, 1, 0, 0, 0, 1369, 259, 1, 0, 0, 0, 1370, 1373,
	5, 49, 0, 0, 1371, 1372, 5, 87, 0, 0, 1372, 1374, 5, 88, 0, 0, 1373, 1371, 1, 0, 0, 0, 1373, 1374,
	1, 0, 0, 0, 1374, 1422, 1, 0, 0, 0, 1375, 1378, 5, 28, 0, 0, 1376, 1377, 5, 87, 0, 0, 1377, 1379,
	5, 88, 0, 0, 1378, 1376, 1, 0, 0, 0, 1378, 1379, 1, 0, 0, 0, 1379, 1422, 1, 0, 0, 0, 1380, 1422,
	5, 91, 0, 0, 1381, 1422, 5, 92, 0, 0, 1382, 1422, 5, 93, 0, 0, 1383, 1422, 5, 94, 0, 0, 1384, 1422,
	5, 95, 0, 0, 1385, 1422, 5, 96, 0, 0, 1386, 1422, 5, 97, 0, 0, 1387, 1422, 5, 98, 0, 0, 1388, 1422,
	5, 99, 0, 0, 1389, 1422, 5, 100, 0, 0, 1390, 1422, 5, 101, 0, 0, 1391, 1422, 5, 103, 0, 0, 1392,
	1422, 5, 102, 0, 0, 1393, 1422, 5, 117, 0, 0, 1394, 1422, 5, 104, 0, 0, 1395, 1422, 5, 105, 0,
	0, 1396, 1422, 5, 106, 0, 0, 1397, 1422, 5, 108, 0, 0, 1398, 1422, 5, 109, 0, 0, 1399, 1422,
	5, 110, 0, 0, 1400, 1422, 5, 111, 0, 0, 1401, 1402, 5, 102, 0, 0, 1402, 1422, 5, 102, 0, 0, 1403,
	1404, 5, 103, 0, 0, 1404, 1422, 5, 103, 0, 0, 1405, 1422, 5, 113, 0, 0, 1406, 1422, 5, 112, 0,
	0, 1407, 1422, 5, 114, 0, 0, 1408, 1422, 5, 115, 0, 0, 1409, 1422, 5, 116, 0, 0, 1410, 1422,
	5, 118, 0, 0, 1411, 1422, 5, 119, 0, 0, 1412, 1422, 5, 120, 0, 0, 1413, 1422, 5, 121, 0, 0, 1414,
	1422, 5, 122, 0, 0, 1415, 1422, 5, 123, 0, 0, 1416, 1422, 5, 124, 0, 0, 1417, 1418, 5, 85, 0,
	0, 1418, 1422, 5, 86, 0, 0, 1419, 1420, 5, 87, 0, 0, 1420, 1422, 5, 88, 0, 0, 1421, 1370, 1, 0,
	0, 0, 1421, 1375, 1, 0, 0, 0, 1421, 1380, 1, 0, 0, 0, 1421, 1381, 1, 0, 0, 0, 1421, 1382, 1, 0,
	0, 0, 1421, 1383, 1, 0, 0, 0, 1421, 1384, 1, 0, 0, 0, 1421, 1385, 1, 0, 0, 0, 1421, 1386, 1, 0,
	0, 0, 1421, 1387, 1, 0, 0, 0, 1421, 1388, 1, 0, 0, 0, 1421, 1389, 1, 0, 0, 0, 1421, 1390, 1, 0,
	0, 0, 1421, 1391, 1, 0, 0, 0, 1421, 1392, 1, 0, 0, 0, 1421, 1393, 1, 0, 0, 0, 1421, 1394, 1, 0,
	0, 0, 1421, 1395, 1, 0, 0, 0, 1421, 1396, 1, 0, 0, 0, 1421, 1397, 1, 0, 0, 0, 1421, 1398, 1, 0,
	0, 0, 1421, 1399, 1, 0, 0, 0, 1421, 1400, 1, 0, 0, 0, 1421, 1401, 1, 0, 0, 0, 1421, 1403, 1, 0,
	0, 0, 1421, 1405, 1, 0, 0, 0, 1421, 1406, 1, 0, 0, 0, 1421, 1407, 1, 0, 0, 0, 1421, 1408, 1, 0,
	0, 0, 1421, 1409, 1, 0, 0, 0, 1421, 1410, 1, 0, 0, 0, 1421, 1411, 1, 0, 0, 0, 1421, 1412, 1, 0,
	0, 0, 1421, 1413, 1, 0, 0, 0, 1421, 1414, 1, 0, 0, 0, 1421, 1415, 1, 0, 0, 0, 1421, 1416, 1, 0,
	0, 0, 1421, 1417, 1, 0, 0, 0, 1421, 1419, 1, 0, 0, 0, 1422, 261, 1, 0, 0, 0, 1423, 1424, 7, 18,
	0, 0, 1424, 263, 1, 0, 0, 0, 205, 265, 270, 279, 283, 288, 292, 300, 307, 310, 315, 320, 326,
	334, 336, 345, 349, 353, 356, 360, 363, 370, 374, 377, 380, 383, 390, 394, 404, 410, 417,
	423, 428, 430, 439, 443, 448, 452, 459, 462, 470, 474, 477, 484, 491, 495, 500, 504, 512,
	519, 527, 535, 544, 551, 558, 566, 574, 582, 590, 598, 606, 615, 623, 632, 644, 650, 656,
	662, 669, 678, 686, 690, 697, 699, 719, 723, 729, 734, 738, 741, 748, 755, 759, 768, 771,
	776, 781, 785, 790, 793, 801, 805, 810, 813, 818, 821, 828, 833, 838, 841, 845, 849, 853,
	858, 863, 869, 874, 880, 886, 896, 898, 904, 907, 910, 914, 918, 924, 934, 940, 946, 955,
	960, 965, 971, 974, 983, 987, 992, 996, 1002, 1009, 1026, 1028, 1035, 1040, 1047, 1051,
	1055, 1063, 1069, 1075, 1079, 1081, 1085, 1090, 1094, 1097, 1100, 1103, 1108, 1112, 1116,
	1119, 1121, 1126, 1133, 1139, 1143, 1149, 1155, 1158, 1160, 1166, 1170, 1176, 1183, 1187,
	1189, 1193, 1199, 1211, 1215, 1217, 1221, 1226, 1229, 1236, 1240, 1245, 1247, 1251, 1258,
	1263, 1267, 1271, 1276, 1280, 1286, 1288, 1294, 1303, 1308, 1316, 1321, 1325, 1331, 1335,
	1339, 1344, 1350, 1355, 1359, 1368, 1373, 1378, 1421];


const atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

const decisionsToDFA = atn.decisionToState.map((ds, index) => new antlr4.dfa.DFA(ds, index));

const sharedContextCache = new antlr4.PredictionContextCache();

export default class FeiyanFormulaParser extends antlr4.Parser {

	static grammarFileName = "FeiyanFormulaParser.g4";
	static literalNames = [null, null, null, null, null, null, null, null,
		null, null, "'alignas'", "'alignof'", "'asm'",
		"'auto'", "'bool'", "'break'", "'case'", "'catch'",
		"'char'", "'char16_t'", "'char32_t'", "'class'",
		"'const'", "'constexpr'", "'const_cast'", "'continue'",
		"'decltype'", "'default'", "'delete'", "'do'",
		"'double'", "'dynamic_cast'", "'else'", "'enum'",
		"'explicit'", "'export'", "'extern'", "'false'",
		"'final'", "'float'", "'for'", "'friend'", "'goto'",
		"'if'", "'inline'", "'int'", "'long'", "'mutable'",
		"'namespace'", "'new'", "'noexcept'", "'nullptr'",
		"'operator'", "'override'", "'private'", "'protected'",
		"'public'", "'register'", "'reinterpret_cast'",
		"'return'", "'short'", "'signed'", "'sizeof'",
		"'static'", "'static_assert'", "'static_cast'",
		"'struct'", "'switch'", "'template'", "'this'",
		"'thread_local'", "'throw'", "'true'", "'try'",
		"'typedef'", "'typeid'", "'typename'", "'union'",
		"'unsigned'", "'using'", "'virtual'", "'void'",
		"'volatile'", "'wchar_t'", "'while'", "'('",
		"')'", "'['", "']'", "'{'", "'}'", "'+'", "'-'",
		"'*'", "'/'", "'%'", "'^'", "'&'", "'|'", "'~'",
		null, "'='", "'<'", "'>'", "'+='", "'-='", "'*='",
		"'/='", "'%='", "'^='", "'&='", "'|='", "'<<='",
		"'>>='", "'=='", "'!='", "'<='", "'>='", null,
		null, "'++'", "'--'", "','", "'->*'", "'->'",
		"'?'", "':'", "'::'", "';'", "'.'", "'.*'",
		"'...'"];
	static symbolicNames = [null, "IntegerLiteral", "CharacterLiteral",
		"FloatingLiteral", "StringLiteral", "BooleanLiteral",
		"PointerLiteral", "UserDefinedLiteral", "MultiLineMacro",
		"Directive", "Alignas", "Alignof", "Asm", "Auto",
		"Bool", "Break", "Case", "Catch", "Char", "Char16",
		"Char32", "Class", "Const", "Constexpr", "Const_cast",
		"Continue", "Decltype", "Default", "Delete",
		"Do", "Double", "Dynamic_cast", "Else", "Enum",
		"Explicit", "Export", "Extern", "False_", "Final",
		"Float", "For", "Friend", "Goto", "If", "Inline",
		"Int", "Long", "Mutable", "Namespace", "New",
		"Noexcept", "Nullptr", "Operator", "Override",
		"Private", "Protected", "Public", "Register",
		"Reinterpret_cast", "Return", "Short", "Signed",
		"Sizeof", "Static", "Static_assert", "Static_cast",
		"Struct", "Switch", "Template", "This", "Thread_local",
		"Throw", "True_", "Try", "Typedef", "Typeid_",
		"Typename_", "Union", "Unsigned", "Using",
		"Virtual", "Void", "Volatile", "Wchar", "While",
		"LeftParen", "RightParen", "LeftBracket", "RightBracket",
		"LeftBrace", "RightBrace", "Plus", "Minus",
		"Star", "Div", "Mod", "Caret", "And", "Or",
		"Tilde", "Not", "Assign", "Less", "Greater",
		"PlusAssign", "MinusAssign", "StarAssign",
		"DivAssign", "ModAssign", "XorAssign", "AndAssign",
		"OrAssign", "LeftShiftAssign", "RightShiftAssign",
		"Equal", "NotEqual", "LessEqual", "GreaterEqual",
		"AndAnd", "OrOr", "PlusPlus", "MinusMinus",
		"Comma", "ArrowStar", "Arrow", "Question",
		"Colon", "Doublecolon", "Semi", "Dot", "DotStar",
		"Ellipsis", "Identifier", "DecimalLiteral",
		"OctalLiteral", "HexadecimalLiteral", "BinaryLiteral",
		"Integersuffix", "UserDefinedIntegerLiteral",
		"UserDefinedFloatingLiteral", "UserDefinedStringLiteral",
		"UserDefinedCharacterLiteral", "Whitespace",
		"Newline", "BlockComment", "LineComment"];
	static ruleNames = ["formulaDefinition", "primaryExpression", "idExpression",
		"unqualifiedId", "qualifiedId", "nestedNameSpecifier",
		"lambdaExpression", "lambdaIntroducer", "lambdaCapture",
		"captureDefault", "captureList", "capture", "simpleCapture",
		"initcapture", "lambdaDeclarator", "postfixExpression",
		"expressionList", "unaryExpression", "unaryOperator",
		"newExpression", "newPlacement", "newTypeId", "newDeclarator",
		"noPointerNewDeclarator", "newInitializer", "castExpression",
		"pointerMemberExpression", "multiplicativeExpression",
		"additiveExpression", "shiftExpression", "shiftOperator",
		"relationalExpression", "equalityExpression", "andExpression",
		"exclusiveOrExpression", "inclusiveOrExpression",
		"logicalAndExpression", "logicalOrExpression",
		"conditionalExpression", "assignmentExpression",
		"assignmentOperator", "expression", "constantExpression",
		"statement", "labeledStatement", "expressionStatement",
		"compoundStatement", "statementSeq", "selectionStatement",
		"condition", "iterationStatement", "forInitStatement",
		"forRangeDeclaration", "forRangeInitializer", "jumpStatement",
		"declarationStatement", "blockDeclaration", "simpleDeclaration",
		"declSpecifier", "declSpecifierSeq", "functionSpecifier",
		"typedefName", "typeSpecifier", "trailingTypeSpecifier",
		"typeSpecifierSeq", "trailingTypeSpecifierSeq",
		"simpleTypeLengthModifier", "simpleTypeSignednessModifier",
		"simpleTypeSpecifier", "theTypeName", "decltypeSpecifier",
		"enumName", "enumSpecifier", "enumHead", "opaqueEnumDeclaration",
		"enumkey", "enumbase", "enumeratorList", "enumeratorDefinition",
		"enumerator", "namespaceName", "originalNamespaceName",
		"namespaceAlias", "attributeSpecifierSeq", "attributeSpecifier",
		"alignmentspecifier", "attributeList", "attribute",
		"attributeNamespace", "attributeArgumentClause",
		"balancedTokenSeq", "balancedtoken", "initDeclaratorList",
		"initDeclarator", "declarator", "pointerDeclarator",
		"noPointerDeclarator", "parametersAndQualifiers",
		"trailingReturnType", "pointerOperator", "cvqualifierseq",
		"cvQualifier", "refqualifier", "declaratorid",
		"theTypeId", "abstractDeclarator", "pointerAbstractDeclarator",
		"noPointerAbstractDeclarator", "abstractPackDeclarator",
		"noPointerAbstractPackDeclarator", "parameterDeclarationClause",
		"parameterDeclarationList", "parameterDeclaration",
		"initializer", "braceOrEqualInitializer", "initializerClause",
		"initializerList", "bracedInitList", "className",
		"operatorFunctionId", "literalOperatorId", "simpleTemplateId",
		"templateName", "templateArgumentList", "templateArgument",
		"throwExpression", "exceptionSpecification", "dynamicExceptionSpecification",
		"typeIdList", "noeExceptSpecification", "theOperator",
		"literal"];

	constructor(input) {
		super(input);
		this._interp = new antlr4.atn.ParserATNSimulator(this, atn, decisionsToDFA, sharedContextCache);
		this.ruleNames = FeiyanFormulaParser.ruleNames;
		this.literalNames = FeiyanFormulaParser.literalNames;
		this.symbolicNames = FeiyanFormulaParser.symbolicNames;
	}

	get atn() {
		return atn;
	}

	sempred(localctx, ruleIndex, predIndex) {
		switch (ruleIndex) {
			case 5:
				return this.nestedNameSpecifier_sempred(localctx, predIndex);
			case 15:
				return this.postfixExpression_sempred(localctx, predIndex);
			case 23:
				return this.noPointerNewDeclarator_sempred(localctx, predIndex);
			case 96:
				return this.noPointerDeclarator_sempred(localctx, predIndex);
			case 107:
				return this.noPointerAbstractDeclarator_sempred(localctx, predIndex);
			case 109:
				return this.noPointerAbstractPackDeclarator_sempred(localctx, predIndex);
			default:
				throw "No predicate with index:" + ruleIndex;
		}
	}

	nestedNameSpecifier_sempred(localctx, predIndex) {
		switch (predIndex) {
			case 0:
				return this.precpred(this._ctx, 1);
			default:
				throw "No predicate with index:" + predIndex;
		}
	};

	postfixExpression_sempred(localctx, predIndex) {
		switch (predIndex) {
			case 1:
				return this.precpred(this._ctx, 6);
			case 2:
				return this.precpred(this._ctx, 5);
			case 3:
				return this.precpred(this._ctx, 3);
			case 4:
				return this.precpred(this._ctx, 2);
			default:
				throw "No predicate with index:" + predIndex;
		}
	};

	noPointerNewDeclarator_sempred(localctx, predIndex) {
		switch (predIndex) {
			case 5:
				return this.precpred(this._ctx, 1);
			default:
				throw "No predicate with index:" + predIndex;
		}
	};

	noPointerDeclarator_sempred(localctx, predIndex) {
		switch (predIndex) {
			case 6:
				return this.precpred(this._ctx, 2);
			default:
				throw "No predicate with index:" + predIndex;
		}
	};

	noPointerAbstractDeclarator_sempred(localctx, predIndex) {
		switch (predIndex) {
			case 7:
				return this.precpred(this._ctx, 4);
			default:
				throw "No predicate with index:" + predIndex;
		}
	};

	noPointerAbstractPackDeclarator_sempred(localctx, predIndex) {
		switch (predIndex) {
			case 8:
				return this.precpred(this._ctx, 2);
			default:
				throw "No predicate with index:" + predIndex;
		}
	};




	formulaDefinition() {
		let localctx = new FormulaDefinitionContext(this, this._ctx, this.state);
		this.enterRule(localctx, 0, FeiyanFormulaParser.RULE_formulaDefinition);
		var _la = 0; // Token type
		try {
			this.enterOuterAlt(localctx, 1);
			this.state = 265;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if ((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << FeiyanFormulaParser.IntegerLiteral) | (1 << FeiyanFormulaParser.CharacterLiteral) | (1 << FeiyanFormulaParser.FloatingLiteral) | (1 << FeiyanFormulaParser.StringLiteral) | (1 << FeiyanFormulaParser.BooleanLiteral) | (1 << FeiyanFormulaParser.PointerLiteral) | (1 << FeiyanFormulaParser.UserDefinedLiteral) | (1 << FeiyanFormulaParser.Alignas) | (1 << FeiyanFormulaParser.Auto) | (1 << FeiyanFormulaParser.Bool) | (1 << FeiyanFormulaParser.Break) | (1 << FeiyanFormulaParser.Case) | (1 << FeiyanFormulaParser.Char) | (1 << FeiyanFormulaParser.Char16) | (1 << FeiyanFormulaParser.Char32) | (1 << FeiyanFormulaParser.Const) | (1 << FeiyanFormulaParser.Const_cast) | (1 << FeiyanFormulaParser.Continue) | (1 << FeiyanFormulaParser.Decltype) | (1 << FeiyanFormulaParser.Default) | (1 << FeiyanFormulaParser.Do) | (1 << FeiyanFormulaParser.Double) | (1 << FeiyanFormulaParser.Dynamic_cast))) !== 0) || ((((_la - 33)) & ~0x1f) == 0 && ((1 << (_la - 33)) & ((1 << (FeiyanFormulaParser.Enum - 33)) | (1 << (FeiyanFormulaParser.Explicit - 33)) | (1 << (FeiyanFormulaParser.Float - 33)) | (1 << (FeiyanFormulaParser.For - 33)) | (1 << (FeiyanFormulaParser.Goto - 33)) | (1 << (FeiyanFormulaParser.If - 33)) | (1 << (FeiyanFormulaParser.Inline - 33)) | (1 << (FeiyanFormulaParser.Int - 33)) | (1 << (FeiyanFormulaParser.Long - 33)) | (1 << (FeiyanFormulaParser.New - 33)) | (1 << (FeiyanFormulaParser.Operator - 33)) | (1 << (FeiyanFormulaParser.Reinterpret_cast - 33)) | (1 << (FeiyanFormulaParser.Return - 33)) | (1 << (FeiyanFormulaParser.Short - 33)) | (1 << (FeiyanFormulaParser.Signed - 33)))) !== 0) || ((((_la - 65)) & ~0x1f) == 0 && ((1 << (_la - 65)) & ((1 << (FeiyanFormulaParser.Static_cast - 65)) | (1 << (FeiyanFormulaParser.Switch - 65)) | (1 << (FeiyanFormulaParser.This - 65)) | (1 << (FeiyanFormulaParser.Throw - 65)) | (1 << (FeiyanFormulaParser.Unsigned - 65)) | (1 << (FeiyanFormulaParser.Virtual - 65)) | (1 << (FeiyanFormulaParser.Void - 65)) | (1 << (FeiyanFormulaParser.Volatile - 65)) | (1 << (FeiyanFormulaParser.Wchar - 65)) | (1 << (FeiyanFormulaParser.While - 65)) | (1 << (FeiyanFormulaParser.LeftParen - 65)) | (1 << (FeiyanFormulaParser.LeftBracket - 65)) | (1 << (FeiyanFormulaParser.LeftBrace - 65)) | (1 << (FeiyanFormulaParser.Plus - 65)) | (1 << (FeiyanFormulaParser.Minus - 65)) | (1 << (FeiyanFormulaParser.Star - 65)))) !== 0) || ((((_la - 97)) & ~0x1f) == 0 && ((1 << (_la - 97)) & ((1 << (FeiyanFormulaParser.And - 97)) | (1 << (FeiyanFormulaParser.Or - 97)) | (1 << (FeiyanFormulaParser.Tilde - 97)) | (1 << (FeiyanFormulaParser.Not - 97)) | (1 << (FeiyanFormulaParser.AndAnd - 97)) | (1 << (FeiyanFormulaParser.PlusPlus - 97)) | (1 << (FeiyanFormulaParser.MinusMinus - 97)) | (1 << (FeiyanFormulaParser.Doublecolon - 97)) | (1 << (FeiyanFormulaParser.Semi - 97)))) !== 0) || _la === FeiyanFormulaParser.Ellipsis || _la === FeiyanFormulaParser.Identifier) {
				this.state = 264;
				this.statementSeq();
			}

		} catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		} finally {
			this.exitRule();
		}
		return localctx;
	}



	primaryExpression() {
		let localctx = new PrimaryExpressionContext(this, this._ctx, this.state);
		this.enterRule(localctx, 2, FeiyanFormulaParser.RULE_primaryExpression);
		try {
			this.state = 279;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
				case FeiyanFormulaParser.IntegerLiteral:
				case FeiyanFormulaParser.CharacterLiteral:
				case FeiyanFormulaParser.FloatingLiteral:
				case FeiyanFormulaParser.StringLiteral:
				case FeiyanFormulaParser.BooleanLiteral:
				case FeiyanFormulaParser.PointerLiteral:
				case FeiyanFormulaParser.UserDefinedLiteral:
					this.enterOuterAlt(localctx, 1);
					this.state = 268;
					this._errHandler.sync(this);
					var _alt = 1;
					do {
						switch (_alt) {
							case 1:
								this.state = 267;
								this.literal();
								break;
							default:
								throw new antlr4.error.NoViableAltException(this);
						}
						this.state = 270;
						this._errHandler.sync(this);
						_alt = this._interp.adaptivePredict(this._input, 1, this._ctx);
					} while (_alt != 2 && _alt != antlr4.atn.ATN.INVALID_ALT_NUMBER);
					break;
				case FeiyanFormulaParser.This:
					this.enterOuterAlt(localctx, 2);
					this.state = 272;
					this.match(FeiyanFormulaParser.This);
					break;
				case FeiyanFormulaParser.LeftParen:
					this.enterOuterAlt(localctx, 3);
					this.state = 273;
					this.match(FeiyanFormulaParser.LeftParen);
					this.state = 274;
					this.expression();
					this.state = 275;
					this.match(FeiyanFormulaParser.RightParen);
					break;
				case FeiyanFormulaParser.Decltype:
				case FeiyanFormulaParser.Operator:
				case FeiyanFormulaParser.Doublecolon:
				case FeiyanFormulaParser.Identifier:
					this.enterOuterAlt(localctx, 4);
					this.state = 277;
					this.idExpression();
					break;
				case FeiyanFormulaParser.LeftBracket:
					this.enterOuterAlt(localctx, 5);
					this.state = 278;
					this.lambdaExpression();
					break;
				default:
					throw new antlr4.error.NoViableAltException(this);
			}
		} catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		} finally {
			this.exitRule();
		}
		return localctx;
	}



	idExpression() {
		let localctx = new IdExpressionContext(this, this._ctx, this.state);
		this.enterRule(localctx, 4, FeiyanFormulaParser.RULE_idExpression);
		try {
			this.state = 283;
			this._errHandler.sync(this);
			var la_ = this._interp.adaptivePredict(this._input, 3, this._ctx);
			switch (la_) {
				case 1:
					this.enterOuterAlt(localctx, 1);
					this.state = 281;
					this.unqualifiedId();
					break;

				case 2:
					this.enterOuterAlt(localctx, 2);
					this.state = 282;
					this.qualifiedId();
					break;

			}
		} catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		} finally {
			this.exitRule();
		}
		return localctx;
	}



	unqualifiedId() {
		let localctx = new UnqualifiedIdContext(this, this._ctx, this.state);
		this.enterRule(localctx, 6, FeiyanFormulaParser.RULE_unqualifiedId);
		try {
			this.state = 288;
			this._errHandler.sync(this);
			var la_ = this._interp.adaptivePredict(this._input, 4, this._ctx);
			switch (la_) {
				case 1:
					this.enterOuterAlt(localctx, 1);
					this.state = 285;
					this.match(FeiyanFormulaParser.Identifier);
					break;

				case 2:
					this.enterOuterAlt(localctx, 2);
					this.state = 286;
					this.operatorFunctionId();
					break;

				case 3:
					this.enterOuterAlt(localctx, 3);
					this.state = 287;
					this.literalOperatorId();
					break;

			}
		} catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		} finally {
			this.exitRule();
		}
		return localctx;
	}



	qualifiedId() {
		let localctx = new QualifiedIdContext(this, this._ctx, this.state);
		this.enterRule(localctx, 8, FeiyanFormulaParser.RULE_qualifiedId);
		var _la = 0; // Token type
		try {
			this.enterOuterAlt(localctx, 1);
			this.state = 290;
			this.nestedNameSpecifier(0);
			this.state = 292;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === FeiyanFormulaParser.Template) {
				this.state = 291;
				this.match(FeiyanFormulaParser.Template);
			}

			this.state = 294;
			this.unqualifiedId();
		} catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		} finally {
			this.exitRule();
		}
		return localctx;
	}


	nestedNameSpecifier(_p) {
		if (_p === undefined) {
			_p = 0;
		}
		const _parentctx = this._ctx;
		const _parentState = this.state;
		let localctx = new NestedNameSpecifierContext(this, this._ctx, _parentState);
		let _prevctx = localctx;
		const _startState = 10;
		this.enterRecursionRule(localctx, 10, FeiyanFormulaParser.RULE_nestedNameSpecifier, _p);
		var _la = 0; // Token type
		try {
			this.enterOuterAlt(localctx, 1);
			this.state = 300;
			this._errHandler.sync(this);
			var la_ = this._interp.adaptivePredict(this._input, 6, this._ctx);
			if (la_ === 1) {
				this.state = 297;
				this.theTypeName();

			} else if (la_ === 2) {
				this.state = 298;
				this.namespaceName();

			} else if (la_ === 3) {
				this.state = 299;
				this.decltypeSpecifier();

			}
			this.state = 302;
			this.match(FeiyanFormulaParser.Doublecolon);
			this._ctx.stop = this._input.LT(-1);
			this.state = 315;
			this._errHandler.sync(this);
			var _alt = this._interp.adaptivePredict(this._input, 9, this._ctx)
			while (_alt != 2 && _alt != antlr4.atn.ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					if (this._parseListeners !== null) {
						this.triggerExitRuleEvent();
					}
					_prevctx = localctx;
					localctx = new NestedNameSpecifierContext(this, _parentctx, _parentState);
					this.pushNewRecursionContext(localctx, _startState, FeiyanFormulaParser.RULE_nestedNameSpecifier);
					this.state = 304;
					if (!(this.precpred(this._ctx, 1))) {
						throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
					}
					this.state = 310;
					this._errHandler.sync(this);
					var la_ = this._interp.adaptivePredict(this._input, 8, this._ctx);
					switch (la_) {
						case 1:
							this.state = 305;
							this.match(FeiyanFormulaParser.Identifier);
							break;

						case 2:
							this.state = 307;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
							if (_la === FeiyanFormulaParser.Template) {
								this.state = 306;
								this.match(FeiyanFormulaParser.Template);
							}

							this.state = 309;
							this.simpleTemplateId();
							break;

					}
					this.state = 312;
					this.match(FeiyanFormulaParser.Doublecolon);
				}
				this.state = 317;
				this._errHandler.sync(this);
				_alt = this._interp.adaptivePredict(this._input, 9, this._ctx);
			}

		} catch (error) {
			if (error instanceof antlr4.error.RecognitionException) {
				localctx.exception = error;
				this._errHandler.reportError(this, error);
				this._errHandler.recover(this, error);
			} else {
				throw error;
			}
		} finally {
			this.unrollRecursionContexts(_parentctx)
		}
		return localctx;
	}



	lambdaExpression() {
		let localctx = new LambdaExpressionContext(this, this._ctx, this.state);
		this.enterRule(localctx, 12, FeiyanFormulaParser.RULE_lambdaExpression);
		var _la = 0; // Token type
		try {
			this.enterOuterAlt(localctx, 1);
			this.state = 318;
			this.lambdaIntroducer();
			this.state = 320;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === FeiyanFormulaParser.LeftParen) {
				this.state = 319;
				this.lambdaDeclarator();
			}

			this.state = 322;
			this.compoundStatement();
		} catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		} finally {
			this.exitRule();
		}
		return localctx;
	}



	lambdaIntroducer() {
		let localctx = new LambdaIntroducerContext(this, this._ctx, this.state);
		this.enterRule(localctx, 14, FeiyanFormulaParser.RULE_lambdaIntroducer);
		var _la = 0; // Token type
		try {
			this.enterOuterAlt(localctx, 1);
			this.state = 324;
			this.match(FeiyanFormulaParser.LeftBracket);
			this.state = 326;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === FeiyanFormulaParser.This || _la === FeiyanFormulaParser.And || _la === FeiyanFormulaParser.Assign || _la === FeiyanFormulaParser.Identifier) {
				this.state = 325;
				this.lambdaCapture();
			}

			this.state = 328;
			this.match(FeiyanFormulaParser.RightBracket);
		} catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		} finally {
			this.exitRule();
		}
		return localctx;
	}



	lambdaCapture() {
		let localctx = new LambdaCaptureContext(this, this._ctx, this.state);
		this.enterRule(localctx, 16, FeiyanFormulaParser.RULE_lambdaCapture);
		var _la = 0; // Token type
		try {
			this.state = 336;
			this._errHandler.sync(this);
			var la_ = this._interp.adaptivePredict(this._input, 13, this._ctx);
			switch (la_) {
				case 1:
					this.enterOuterAlt(localctx, 1);
					this.state = 330;
					this.captureList();
					break;

				case 2:
					this.enterOuterAlt(localctx, 2);
					this.state = 331;
					this.captureDefault();
					this.state = 334;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === FeiyanFormulaParser.Comma) {
						this.state = 332;
						this.match(FeiyanFormulaParser.Comma);
						this.state = 333;
						this.captureList();
					}

					break;

			}
		} catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		} finally {
			this.exitRule();
		}
		return localctx;
	}



	captureDefault() {
		let localctx = new CaptureDefaultContext(this, this._ctx, this.state);
		this.enterRule(localctx, 18, FeiyanFormulaParser.RULE_captureDefault);
		var _la = 0; // Token type
		try {
			this.enterOuterAlt(localctx, 1);
			this.state = 338;
			_la = this._input.LA(1);
			if (!(_la === FeiyanFormulaParser.And || _la === FeiyanFormulaParser.Assign)) {
				this._errHandler.recoverInline(this);
			}
			else {
				this._errHandler.reportMatch(this);
				this.consume();
			}
		} catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		} finally {
			this.exitRule();
		}
		return localctx;
	}



	captureList() {
		let localctx = new CaptureListContext(this, this._ctx, this.state);
		this.enterRule(localctx, 20, FeiyanFormulaParser.RULE_captureList);
		var _la = 0; // Token type
		try {
			this.enterOuterAlt(localctx, 1);
			this.state = 340;
			this.capture();
			this.state = 345;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === FeiyanFormulaParser.Comma) {
				this.state = 341;
				this.match(FeiyanFormulaParser.Comma);
				this.state = 342;
				this.capture();
				this.state = 347;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 349;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === FeiyanFormulaParser.Ellipsis) {
				this.state = 348;
				this.match(FeiyanFormulaParser.Ellipsis);
			}

		} catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		} finally {
			this.exitRule();
		}
		return localctx;
	}



	capture() {
		let localctx = new CaptureContext(this, this._ctx, this.state);
		this.enterRule(localctx, 22, FeiyanFormulaParser.RULE_capture);
		try {
			this.state = 353;
			this._errHandler.sync(this);
			var la_ = this._interp.adaptivePredict(this._input, 16, this._ctx);
			switch (la_) {
				case 1:
					this.enterOuterAlt(localctx, 1);
					this.state = 351;
					this.simpleCapture();
					break;

				case 2:
					this.enterOuterAlt(localctx, 2);
					this.state = 352;
					this.initcapture();
					break;

			}
		} catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		} finally {
			this.exitRule();
		}
		return localctx;
	}



	simpleCapture() {
		let localctx = new SimpleCaptureContext(this, this._ctx, this.state);
		this.enterRule(localctx, 24, FeiyanFormulaParser.RULE_simpleCapture);
		var _la = 0; // Token type
		try {
			this.state = 360;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
				case FeiyanFormulaParser.And:
				case FeiyanFormulaParser.Identifier:
					this.enterOuterAlt(localctx, 1);
					this.state = 356;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === FeiyanFormulaParser.And) {
						this.state = 355;
						this.match(FeiyanFormulaParser.And);
					}

					this.state = 358;
					this.match(FeiyanFormulaParser.Identifier);
					break;
				case FeiyanFormulaParser.This:
					this.enterOuterAlt(localctx, 2);
					this.state = 359;
					this.match(FeiyanFormulaParser.This);
					break;
				default:
					throw new antlr4.error.NoViableAltException(this);
			}
		} catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		} finally {
			this.exitRule();
		}
		return localctx;
	}



	initcapture() {
		let localctx = new InitcaptureContext(this, this._ctx, this.state);
		this.enterRule(localctx, 26, FeiyanFormulaParser.RULE_initcapture);
		var _la = 0; // Token type
		try {
			this.enterOuterAlt(localctx, 1);
			this.state = 363;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === FeiyanFormulaParser.And) {
				this.state = 362;
				this.match(FeiyanFormulaParser.And);
			}

			this.state = 365;
			this.match(FeiyanFormulaParser.Identifier);
			this.state = 366;
			this.initializer();
		} catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		} finally {
			this.exitRule();
		}
		return localctx;
	}



	lambdaDeclarator() {
		let localctx = new LambdaDeclaratorContext(this, this._ctx, this.state);
		this.enterRule(localctx, 28, FeiyanFormulaParser.RULE_lambdaDeclarator);
		var _la = 0; // Token type
		try {
			this.enterOuterAlt(localctx, 1);
			this.state = 368;
			this.match(FeiyanFormulaParser.LeftParen);
			this.state = 370;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if ((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << FeiyanFormulaParser.Alignas) | (1 << FeiyanFormulaParser.Auto) | (1 << FeiyanFormulaParser.Bool) | (1 << FeiyanFormulaParser.Char) | (1 << FeiyanFormulaParser.Char16) | (1 << FeiyanFormulaParser.Char32) | (1 << FeiyanFormulaParser.Const) | (1 << FeiyanFormulaParser.Decltype) | (1 << FeiyanFormulaParser.Double))) !== 0) || ((((_la - 33)) & ~0x1f) == 0 && ((1 << (_la - 33)) & ((1 << (FeiyanFormulaParser.Enum - 33)) | (1 << (FeiyanFormulaParser.Explicit - 33)) | (1 << (FeiyanFormulaParser.Float - 33)) | (1 << (FeiyanFormulaParser.Inline - 33)) | (1 << (FeiyanFormulaParser.Int - 33)) | (1 << (FeiyanFormulaParser.Long - 33)) | (1 << (FeiyanFormulaParser.Short - 33)) | (1 << (FeiyanFormulaParser.Signed - 33)))) !== 0) || ((((_la - 78)) & ~0x1f) == 0 && ((1 << (_la - 78)) & ((1 << (FeiyanFormulaParser.Unsigned - 78)) | (1 << (FeiyanFormulaParser.Virtual - 78)) | (1 << (FeiyanFormulaParser.Void - 78)) | (1 << (FeiyanFormulaParser.Volatile - 78)) | (1 << (FeiyanFormulaParser.Wchar - 78)) | (1 << (FeiyanFormulaParser.LeftBracket - 78)))) !== 0) || _la === FeiyanFormulaParser.Doublecolon || _la === FeiyanFormulaParser.Identifier) {
				this.state = 369;
				this.parameterDeclarationClause();
			}

			this.state = 372;
			this.match(FeiyanFormulaParser.RightParen);
			this.state = 374;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === FeiyanFormulaParser.Mutable) {
				this.state = 373;
				this.match(FeiyanFormulaParser.Mutable);
			}

			this.state = 377;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === FeiyanFormulaParser.Noexcept || _la === FeiyanFormulaParser.Throw) {
				this.state = 376;
				this.exceptionSpecification();
			}

			this.state = 380;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === FeiyanFormulaParser.Alignas || _la === FeiyanFormulaParser.LeftBracket) {
				this.state = 379;
				this.attributeSpecifierSeq();
			}

			this.state = 383;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === FeiyanFormulaParser.Arrow) {
				this.state = 382;
				this.trailingReturnType();
			}

		} catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		} finally {
			this.exitRule();
		}
		return localctx;
	}


	postfixExpression(_p) {
		if (_p === undefined) {
			_p = 0;
		}
		const _parentctx = this._ctx;
		const _parentState = this.state;
		let localctx = new PostfixExpressionContext(this, this._ctx, _parentState);
		let _prevctx = localctx;
		const _startState = 30;
		this.enterRecursionRule(localctx, 30, FeiyanFormulaParser.RULE_postfixExpression, _p);
		var _la = 0; // Token type
		try {
			this.enterOuterAlt(localctx, 1);
			this.state = 404;
			this._errHandler.sync(this);
			var la_ = this._interp.adaptivePredict(this._input, 27, this._ctx);
			switch (la_) {
				case 1:
					this.state = 386;
					this.primaryExpression();
					break;

				case 2:
					this.state = 387;
					this.simpleTypeSpecifier();
					this.state = 394;
					this._errHandler.sync(this);
					switch (this._input.LA(1)) {
						case FeiyanFormulaParser.LeftParen:
							this.state = 388;
							this.match(FeiyanFormulaParser.LeftParen);
							this.state = 390;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
							if ((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << FeiyanFormulaParser.IntegerLiteral) | (1 << FeiyanFormulaParser.CharacterLiteral) | (1 << FeiyanFormulaParser.FloatingLiteral) | (1 << FeiyanFormulaParser.StringLiteral) | (1 << FeiyanFormulaParser.BooleanLiteral) | (1 << FeiyanFormulaParser.PointerLiteral) | (1 << FeiyanFormulaParser.UserDefinedLiteral) | (1 << FeiyanFormulaParser.Auto) | (1 << FeiyanFormulaParser.Bool) | (1 << FeiyanFormulaParser.Char) | (1 << FeiyanFormulaParser.Char16) | (1 << FeiyanFormulaParser.Char32) | (1 << FeiyanFormulaParser.Const_cast) | (1 << FeiyanFormulaParser.Decltype) | (1 << FeiyanFormulaParser.Double) | (1 << FeiyanFormulaParser.Dynamic_cast))) !== 0) || ((((_la - 39)) & ~0x1f) == 0 && ((1 << (_la - 39)) & ((1 << (FeiyanFormulaParser.Float - 39)) | (1 << (FeiyanFormulaParser.Int - 39)) | (1 << (FeiyanFormulaParser.Long - 39)) | (1 << (FeiyanFormulaParser.New - 39)) | (1 << (FeiyanFormulaParser.Operator - 39)) | (1 << (FeiyanFormulaParser.Reinterpret_cast - 39)) | (1 << (FeiyanFormulaParser.Short - 39)) | (1 << (FeiyanFormulaParser.Signed - 39)) | (1 << (FeiyanFormulaParser.Static_cast - 39)) | (1 << (FeiyanFormulaParser.This - 39)))) !== 0) || ((((_la - 71)) & ~0x1f) == 0 && ((1 << (_la - 71)) & ((1 << (FeiyanFormulaParser.Throw - 71)) | (1 << (FeiyanFormulaParser.Unsigned - 71)) | (1 << (FeiyanFormulaParser.Void - 71)) | (1 << (FeiyanFormulaParser.Wchar - 71)) | (1 << (FeiyanFormulaParser.LeftParen - 71)) | (1 << (FeiyanFormulaParser.LeftBracket - 71)) | (1 << (FeiyanFormulaParser.LeftBrace - 71)) | (1 << (FeiyanFormulaParser.Plus - 71)) | (1 << (FeiyanFormulaParser.Minus - 71)) | (1 << (FeiyanFormulaParser.Star - 71)) | (1 << (FeiyanFormulaParser.And - 71)) | (1 << (FeiyanFormulaParser.Or - 71)) | (1 << (FeiyanFormulaParser.Tilde - 71)) | (1 << (FeiyanFormulaParser.Not - 71)))) !== 0) || ((((_la - 120)) & ~0x1f) == 0 && ((1 << (_la - 120)) & ((1 << (FeiyanFormulaParser.PlusPlus - 120)) | (1 << (FeiyanFormulaParser.MinusMinus - 120)) | (1 << (FeiyanFormulaParser.Doublecolon - 120)) | (1 << (FeiyanFormulaParser.Identifier - 120)))) !== 0)) {
								this.state = 389;
								this.expressionList();
							}

							this.state = 392;
							this.match(FeiyanFormulaParser.RightParen);
							break;
						case FeiyanFormulaParser.LeftBrace:
							this.state = 393;
							this.bracedInitList();
							break;
						default:
							throw new antlr4.error.NoViableAltException(this);
					}
					break;

				case 3:
					this.state = 396;
					_la = this._input.LA(1);
					if (!(_la === FeiyanFormulaParser.Const_cast || _la === FeiyanFormulaParser.Dynamic_cast || _la === FeiyanFormulaParser.Reinterpret_cast || _la === FeiyanFormulaParser.Static_cast)) {
						this._errHandler.recoverInline(this);
					}
					else {
						this._errHandler.reportMatch(this);
						this.consume();
					}
					this.state = 397;
					this.match(FeiyanFormulaParser.Less);
					this.state = 398;
					this.theTypeId();
					this.state = 399;
					this.match(FeiyanFormulaParser.Greater);
					this.state = 400;
					this.match(FeiyanFormulaParser.LeftParen);
					this.state = 401;
					this.expression();
					this.state = 402;
					this.match(FeiyanFormulaParser.RightParen);
					break;

			}
			this._ctx.stop = this._input.LT(-1);
			this.state = 430;
			this._errHandler.sync(this);
			var _alt = this._interp.adaptivePredict(this._input, 32, this._ctx)
			while (_alt != 2 && _alt != antlr4.atn.ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					if (this._parseListeners !== null) {
						this.triggerExitRuleEvent();
					}
					_prevctx = localctx;
					this.state = 428;
					this._errHandler.sync(this);
					var la_ = this._interp.adaptivePredict(this._input, 31, this._ctx);
					switch (la_) {
						case 1:
							localctx = new PostfixExpressionContext(this, _parentctx, _parentState);
							this.pushNewRecursionContext(localctx, _startState, FeiyanFormulaParser.RULE_postfixExpression);
							this.state = 406;
							if (!(this.precpred(this._ctx, 6))) {
								throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 6)");
							}
							this.state = 407;
							this.match(FeiyanFormulaParser.LeftBracket);
							this.state = 410;
							this._errHandler.sync(this);
							switch (this._input.LA(1)) {
								case FeiyanFormulaParser.IntegerLiteral:
								case FeiyanFormulaParser.CharacterLiteral:
								case FeiyanFormulaParser.FloatingLiteral:
								case FeiyanFormulaParser.StringLiteral:
								case FeiyanFormulaParser.BooleanLiteral:
								case FeiyanFormulaParser.PointerLiteral:
								case FeiyanFormulaParser.UserDefinedLiteral:
								case FeiyanFormulaParser.Auto:
								case FeiyanFormulaParser.Bool:
								case FeiyanFormulaParser.Char:
								case FeiyanFormulaParser.Char16:
								case FeiyanFormulaParser.Char32:
								case FeiyanFormulaParser.Const_cast:
								case FeiyanFormulaParser.Decltype:
								case FeiyanFormulaParser.Double:
								case FeiyanFormulaParser.Dynamic_cast:
								case FeiyanFormulaParser.Float:
								case FeiyanFormulaParser.Int:
								case FeiyanFormulaParser.Long:
								case FeiyanFormulaParser.New:
								case FeiyanFormulaParser.Operator:
								case FeiyanFormulaParser.Reinterpret_cast:
								case FeiyanFormulaParser.Short:
								case FeiyanFormulaParser.Signed:
								case FeiyanFormulaParser.Static_cast:
								case FeiyanFormulaParser.This:
								case FeiyanFormulaParser.Throw:
								case FeiyanFormulaParser.Unsigned:
								case FeiyanFormulaParser.Void:
								case FeiyanFormulaParser.Wchar:
								case FeiyanFormulaParser.LeftParen:
								case FeiyanFormulaParser.LeftBracket:
								case FeiyanFormulaParser.Plus:
								case FeiyanFormulaParser.Minus:
								case FeiyanFormulaParser.Star:
								case FeiyanFormulaParser.And:
								case FeiyanFormulaParser.Or:
								case FeiyanFormulaParser.Tilde:
								case FeiyanFormulaParser.Not:
								case FeiyanFormulaParser.PlusPlus:
								case FeiyanFormulaParser.MinusMinus:
								case FeiyanFormulaParser.Doublecolon:
								case FeiyanFormulaParser.Identifier:
									this.state = 408;
									this.expression();
									break;
								case FeiyanFormulaParser.LeftBrace:
									this.state = 409;
									this.bracedInitList();
									break;
								default:
									throw new antlr4.error.NoViableAltException(this);
							}
							this.state = 412;
							this.match(FeiyanFormulaParser.RightBracket);
							break;

						case 2:
							localctx = new PostfixExpressionContext(this, _parentctx, _parentState);
							this.pushNewRecursionContext(localctx, _startState, FeiyanFormulaParser.RULE_postfixExpression);
							this.state = 414;
							if (!(this.precpred(this._ctx, 5))) {
								throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 5)");
							}
							this.state = 415;
							this.match(FeiyanFormulaParser.LeftParen);
							this.state = 417;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
							if ((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << FeiyanFormulaParser.IntegerLiteral) | (1 << FeiyanFormulaParser.CharacterLiteral) | (1 << FeiyanFormulaParser.FloatingLiteral) | (1 << FeiyanFormulaParser.StringLiteral) | (1 << FeiyanFormulaParser.BooleanLiteral) | (1 << FeiyanFormulaParser.PointerLiteral) | (1 << FeiyanFormulaParser.UserDefinedLiteral) | (1 << FeiyanFormulaParser.Auto) | (1 << FeiyanFormulaParser.Bool) | (1 << FeiyanFormulaParser.Char) | (1 << FeiyanFormulaParser.Char16) | (1 << FeiyanFormulaParser.Char32) | (1 << FeiyanFormulaParser.Const_cast) | (1 << FeiyanFormulaParser.Decltype) | (1 << FeiyanFormulaParser.Double) | (1 << FeiyanFormulaParser.Dynamic_cast))) !== 0) || ((((_la - 39)) & ~0x1f) == 0 && ((1 << (_la - 39)) & ((1 << (FeiyanFormulaParser.Float - 39)) | (1 << (FeiyanFormulaParser.Int - 39)) | (1 << (FeiyanFormulaParser.Long - 39)) | (1 << (FeiyanFormulaParser.New - 39)) | (1 << (FeiyanFormulaParser.Operator - 39)) | (1 << (FeiyanFormulaParser.Reinterpret_cast - 39)) | (1 << (FeiyanFormulaParser.Short - 39)) | (1 << (FeiyanFormulaParser.Signed - 39)) | (1 << (FeiyanFormulaParser.Static_cast - 39)) | (1 << (FeiyanFormulaParser.This - 39)))) !== 0) || ((((_la - 71)) & ~0x1f) == 0 && ((1 << (_la - 71)) & ((1 << (FeiyanFormulaParser.Throw - 71)) | (1 << (FeiyanFormulaParser.Unsigned - 71)) | (1 << (FeiyanFormulaParser.Void - 71)) | (1 << (FeiyanFormulaParser.Wchar - 71)) | (1 << (FeiyanFormulaParser.LeftParen - 71)) | (1 << (FeiyanFormulaParser.LeftBracket - 71)) | (1 << (FeiyanFormulaParser.LeftBrace - 71)) | (1 << (FeiyanFormulaParser.Plus - 71)) | (1 << (FeiyanFormulaParser.Minus - 71)) | (1 << (FeiyanFormulaParser.Star - 71)) | (1 << (FeiyanFormulaParser.And - 71)) | (1 << (FeiyanFormulaParser.Or - 71)) | (1 << (FeiyanFormulaParser.Tilde - 71)) | (1 << (FeiyanFormulaParser.Not - 71)))) !== 0) || ((((_la - 120)) & ~0x1f) == 0 && ((1 << (_la - 120)) & ((1 << (FeiyanFormulaParser.PlusPlus - 120)) | (1 << (FeiyanFormulaParser.MinusMinus - 120)) | (1 << (FeiyanFormulaParser.Doublecolon - 120)) | (1 << (FeiyanFormulaParser.Identifier - 120)))) !== 0)) {
								this.state = 416;
								this.expressionList();
							}

							this.state = 419;
							this.match(FeiyanFormulaParser.RightParen);
							break;

						case 3:
							localctx = new PostfixExpressionContext(this, _parentctx, _parentState);
							this.pushNewRecursionContext(localctx, _startState, FeiyanFormulaParser.RULE_postfixExpression);
							this.state = 420;
							if (!(this.precpred(this._ctx, 3))) {
								throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 3)");
							}
							this.state = 421;
							_la = this._input.LA(1);
							if (!(_la === FeiyanFormulaParser.Arrow || _la === FeiyanFormulaParser.Dot)) {
								this._errHandler.recoverInline(this);
							}
							else {
								this._errHandler.reportMatch(this);
								this.consume();
							}
							this.state = 423;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
							if (_la === FeiyanFormulaParser.Template) {
								this.state = 422;
								this.match(FeiyanFormulaParser.Template);
							}

							this.state = 425;
							this.idExpression();
							break;

						case 4:
							localctx = new PostfixExpressionContext(this, _parentctx, _parentState);
							this.pushNewRecursionContext(localctx, _startState, FeiyanFormulaParser.RULE_postfixExpression);
							this.state = 426;
							if (!(this.precpred(this._ctx, 2))) {
								throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 2)");
							}
							this.state = 427;
							_la = this._input.LA(1);
							if (!(_la === FeiyanFormulaParser.PlusPlus || _la === FeiyanFormulaParser.MinusMinus)) {
								this._errHandler.recoverInline(this);
							}
							else {
								this._errHandler.reportMatch(this);
								this.consume();
							}
							break;

					}
				}
				this.state = 432;
				this._errHandler.sync(this);
				_alt = this._interp.adaptivePredict(this._input, 32, this._ctx);
			}

		} catch (error) {
			if (error instanceof antlr4.error.RecognitionException) {
				localctx.exception = error;
				this._errHandler.reportError(this, error);
				this._errHandler.recover(this, error);
			} else {
				throw error;
			}
		} finally {
			this.unrollRecursionContexts(_parentctx)
		}
		return localctx;
	}



	expressionList() {
		let localctx = new ExpressionListContext(this, this._ctx, this.state);
		this.enterRule(localctx, 32, FeiyanFormulaParser.RULE_expressionList);
		try {
			this.enterOuterAlt(localctx, 1);
			this.state = 433;
			this.initializerList();
		} catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		} finally {
			this.exitRule();
		}
		return localctx;
	}



	unaryExpression() {
		let localctx = new UnaryExpressionContext(this, this._ctx, this.state);
		this.enterRule(localctx, 34, FeiyanFormulaParser.RULE_unaryExpression);
		try {
			this.state = 443;
			this._errHandler.sync(this);
			var la_ = this._interp.adaptivePredict(this._input, 34, this._ctx);
			switch (la_) {
				case 1:
					this.enterOuterAlt(localctx, 1);
					this.state = 435;
					this.postfixExpression(0);
					break;

				case 2:
					this.enterOuterAlt(localctx, 2);
					this.state = 439;
					this._errHandler.sync(this);
					switch (this._input.LA(1)) {
						case FeiyanFormulaParser.PlusPlus:
							this.state = 436;
							this.match(FeiyanFormulaParser.PlusPlus);
							break;
						case FeiyanFormulaParser.MinusMinus:
							this.state = 437;
							this.match(FeiyanFormulaParser.MinusMinus);
							break;
						case FeiyanFormulaParser.Plus:
						case FeiyanFormulaParser.Minus:
						case FeiyanFormulaParser.Star:
						case FeiyanFormulaParser.And:
						case FeiyanFormulaParser.Or:
						case FeiyanFormulaParser.Tilde:
						case FeiyanFormulaParser.Not:
							this.state = 438;
							this.unaryOperator();
							break;
						default:
							throw new antlr4.error.NoViableAltException(this);
					}
					this.state = 441;
					this.unaryExpression();
					break;

				case 3:
					this.enterOuterAlt(localctx, 3);
					this.state = 442;
					this.newExpression();
					break;

			}
		} catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		} finally {
			this.exitRule();
		}
		return localctx;
	}



	unaryOperator() {
		let localctx = new UnaryOperatorContext(this, this._ctx, this.state);
		this.enterRule(localctx, 36, FeiyanFormulaParser.RULE_unaryOperator);
		var _la = 0; // Token type
		try {
			this.enterOuterAlt(localctx, 1);
			this.state = 445;
			_la = this._input.LA(1);
			if (!(((((_la - 91)) & ~0x1f) == 0 && ((1 << (_la - 91)) & ((1 << (FeiyanFormulaParser.Plus - 91)) | (1 << (FeiyanFormulaParser.Minus - 91)) | (1 << (FeiyanFormulaParser.Star - 91)) | (1 << (FeiyanFormulaParser.And - 91)) | (1 << (FeiyanFormulaParser.Or - 91)) | (1 << (FeiyanFormulaParser.Tilde - 91)) | (1 << (FeiyanFormulaParser.Not - 91)))) !== 0))) {
				this._errHandler.recoverInline(this);
			}
			else {
				this._errHandler.reportMatch(this);
				this.consume();
			}
		} catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		} finally {
			this.exitRule();
		}
		return localctx;
	}



	newExpression() {
		let localctx = new NewExpressionContext(this, this._ctx, this.state);
		this.enterRule(localctx, 38, FeiyanFormulaParser.RULE_newExpression);
		var _la = 0; // Token type
		try {
			this.enterOuterAlt(localctx, 1);
			this.state = 448;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === FeiyanFormulaParser.Doublecolon) {
				this.state = 447;
				this.match(FeiyanFormulaParser.Doublecolon);
			}

			this.state = 450;
			this.match(FeiyanFormulaParser.New);
			this.state = 452;
			this._errHandler.sync(this);
			var la_ = this._interp.adaptivePredict(this._input, 36, this._ctx);
			if (la_ === 1) {
				this.state = 451;
				this.newPlacement();

			}
			this.state = 459;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
				case FeiyanFormulaParser.Auto:
				case FeiyanFormulaParser.Bool:
				case FeiyanFormulaParser.Char:
				case FeiyanFormulaParser.Char16:
				case FeiyanFormulaParser.Char32:
				case FeiyanFormulaParser.Const:
				case FeiyanFormulaParser.Decltype:
				case FeiyanFormulaParser.Double:
				case FeiyanFormulaParser.Enum:
				case FeiyanFormulaParser.Float:
				case FeiyanFormulaParser.Int:
				case FeiyanFormulaParser.Long:
				case FeiyanFormulaParser.Short:
				case FeiyanFormulaParser.Signed:
				case FeiyanFormulaParser.Unsigned:
				case FeiyanFormulaParser.Void:
				case FeiyanFormulaParser.Volatile:
				case FeiyanFormulaParser.Wchar:
				case FeiyanFormulaParser.Doublecolon:
				case FeiyanFormulaParser.Identifier:
					this.state = 454;
					this.newTypeId();
					break;
				case FeiyanFormulaParser.LeftParen:
					this.state = 455;
					this.match(FeiyanFormulaParser.LeftParen);
					this.state = 456;
					this.theTypeId();
					this.state = 457;
					this.match(FeiyanFormulaParser.RightParen);
					break;
				default:
					throw new antlr4.error.NoViableAltException(this);
			}
			this.state = 462;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === FeiyanFormulaParser.LeftParen || _la === FeiyanFormulaParser.LeftBrace) {
				this.state = 461;
				this.newInitializer();
			}

		} catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		} finally {
			this.exitRule();
		}
		return localctx;
	}



	newPlacement() {
		let localctx = new NewPlacementContext(this, this._ctx, this.state);
		this.enterRule(localctx, 40, FeiyanFormulaParser.RULE_newPlacement);
		try {
			this.enterOuterAlt(localctx, 1);
			this.state = 464;
			this.match(FeiyanFormulaParser.LeftParen);
			this.state = 465;
			this.expressionList();
			this.state = 466;
			this.match(FeiyanFormulaParser.RightParen);
		} catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		} finally {
			this.exitRule();
		}
		return localctx;
	}



	newTypeId() {
		let localctx = new NewTypeIdContext(this, this._ctx, this.state);
		this.enterRule(localctx, 42, FeiyanFormulaParser.RULE_newTypeId);
		try {
			this.enterOuterAlt(localctx, 1);
			this.state = 468;
			this.typeSpecifierSeq();
			this.state = 470;
			this._errHandler.sync(this);
			var la_ = this._interp.adaptivePredict(this._input, 39, this._ctx);
			if (la_ === 1) {
				this.state = 469;
				this.newDeclarator();

			}
		} catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		} finally {
			this.exitRule();
		}
		return localctx;
	}



	newDeclarator() {
		let localctx = new NewDeclaratorContext(this, this._ctx, this.state);
		this.enterRule(localctx, 44, FeiyanFormulaParser.RULE_newDeclarator);
		try {
			this.state = 477;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
				case FeiyanFormulaParser.Star:
				case FeiyanFormulaParser.And:
				case FeiyanFormulaParser.AndAnd:
					this.enterOuterAlt(localctx, 1);
					this.state = 472;
					this.pointerOperator();
					this.state = 474;
					this._errHandler.sync(this);
					var la_ = this._interp.adaptivePredict(this._input, 40, this._ctx);
					if (la_ === 1) {
						this.state = 473;
						this.newDeclarator();

					}
					break;
				case FeiyanFormulaParser.LeftBracket:
					this.enterOuterAlt(localctx, 2);
					this.state = 476;
					this.noPointerNewDeclarator(0);
					break;
				default:
					throw new antlr4.error.NoViableAltException(this);
			}
		} catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		} finally {
			this.exitRule();
		}
		return localctx;
	}


	noPointerNewDeclarator(_p) {
		if (_p === undefined) {
			_p = 0;
		}
		const _parentctx = this._ctx;
		const _parentState = this.state;
		let localctx = new NoPointerNewDeclaratorContext(this, this._ctx, _parentState);
		let _prevctx = localctx;
		const _startState = 46;
		this.enterRecursionRule(localctx, 46, FeiyanFormulaParser.RULE_noPointerNewDeclarator, _p);
		try {
			this.enterOuterAlt(localctx, 1);
			this.state = 480;
			this.match(FeiyanFormulaParser.LeftBracket);
			this.state = 481;
			this.expression();
			this.state = 482;
			this.match(FeiyanFormulaParser.RightBracket);
			this.state = 484;
			this._errHandler.sync(this);
			var la_ = this._interp.adaptivePredict(this._input, 42, this._ctx);
			if (la_ === 1) {
				this.state = 483;
				this.attributeSpecifierSeq();

			}
			this._ctx.stop = this._input.LT(-1);
			this.state = 495;
			this._errHandler.sync(this);
			var _alt = this._interp.adaptivePredict(this._input, 44, this._ctx)
			while (_alt != 2 && _alt != antlr4.atn.ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					if (this._parseListeners !== null) {
						this.triggerExitRuleEvent();
					}
					_prevctx = localctx;
					localctx = new NoPointerNewDeclaratorContext(this, _parentctx, _parentState);
					this.pushNewRecursionContext(localctx, _startState, FeiyanFormulaParser.RULE_noPointerNewDeclarator);
					this.state = 486;
					if (!(this.precpred(this._ctx, 1))) {
						throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
					}
					this.state = 487;
					this.match(FeiyanFormulaParser.LeftBracket);
					this.state = 488;
					this.constantExpression();
					this.state = 489;
					this.match(FeiyanFormulaParser.RightBracket);
					this.state = 491;
					this._errHandler.sync(this);
					var la_ = this._interp.adaptivePredict(this._input, 43, this._ctx);
					if (la_ === 1) {
						this.state = 490;
						this.attributeSpecifierSeq();

					}
				}
				this.state = 497;
				this._errHandler.sync(this);
				_alt = this._interp.adaptivePredict(this._input, 44, this._ctx);
			}

		} catch (error) {
			if (error instanceof antlr4.error.RecognitionException) {
				localctx.exception = error;
				this._errHandler.reportError(this, error);
				this._errHandler.recover(this, error);
			} else {
				throw error;
			}
		} finally {
			this.unrollRecursionContexts(_parentctx)
		}
		return localctx;
	}



	newInitializer() {
		let localctx = new NewInitializerContext(this, this._ctx, this.state);
		this.enterRule(localctx, 48, FeiyanFormulaParser.RULE_newInitializer);
		var _la = 0; // Token type
		try {
			this.state = 504;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
				case FeiyanFormulaParser.LeftParen:
					this.enterOuterAlt(localctx, 1);
					this.state = 498;
					this.match(FeiyanFormulaParser.LeftParen);
					this.state = 500;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if ((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << FeiyanFormulaParser.IntegerLiteral) | (1 << FeiyanFormulaParser.CharacterLiteral) | (1 << FeiyanFormulaParser.FloatingLiteral) | (1 << FeiyanFormulaParser.StringLiteral) | (1 << FeiyanFormulaParser.BooleanLiteral) | (1 << FeiyanFormulaParser.PointerLiteral) | (1 << FeiyanFormulaParser.UserDefinedLiteral) | (1 << FeiyanFormulaParser.Auto) | (1 << FeiyanFormulaParser.Bool) | (1 << FeiyanFormulaParser.Char) | (1 << FeiyanFormulaParser.Char16) | (1 << FeiyanFormulaParser.Char32) | (1 << FeiyanFormulaParser.Const_cast) | (1 << FeiyanFormulaParser.Decltype) | (1 << FeiyanFormulaParser.Double) | (1 << FeiyanFormulaParser.Dynamic_cast))) !== 0) || ((((_la - 39)) & ~0x1f) == 0 && ((1 << (_la - 39)) & ((1 << (FeiyanFormulaParser.Float - 39)) | (1 << (FeiyanFormulaParser.Int - 39)) | (1 << (FeiyanFormulaParser.Long - 39)) | (1 << (FeiyanFormulaParser.New - 39)) | (1 << (FeiyanFormulaParser.Operator - 39)) | (1 << (FeiyanFormulaParser.Reinterpret_cast - 39)) | (1 << (FeiyanFormulaParser.Short - 39)) | (1 << (FeiyanFormulaParser.Signed - 39)) | (1 << (FeiyanFormulaParser.Static_cast - 39)) | (1 << (FeiyanFormulaParser.This - 39)))) !== 0) || ((((_la - 71)) & ~0x1f) == 0 && ((1 << (_la - 71)) & ((1 << (FeiyanFormulaParser.Throw - 71)) | (1 << (FeiyanFormulaParser.Unsigned - 71)) | (1 << (FeiyanFormulaParser.Void - 71)) | (1 << (FeiyanFormulaParser.Wchar - 71)) | (1 << (FeiyanFormulaParser.LeftParen - 71)) | (1 << (FeiyanFormulaParser.LeftBracket - 71)) | (1 << (FeiyanFormulaParser.LeftBrace - 71)) | (1 << (FeiyanFormulaParser.Plus - 71)) | (1 << (FeiyanFormulaParser.Minus - 71)) | (1 << (FeiyanFormulaParser.Star - 71)) | (1 << (FeiyanFormulaParser.And - 71)) | (1 << (FeiyanFormulaParser.Or - 71)) | (1 << (FeiyanFormulaParser.Tilde - 71)) | (1 << (FeiyanFormulaParser.Not - 71)))) !== 0) || ((((_la - 120)) & ~0x1f) == 0 && ((1 << (_la - 120)) & ((1 << (FeiyanFormulaParser.PlusPlus - 120)) | (1 << (FeiyanFormulaParser.MinusMinus - 120)) | (1 << (FeiyanFormulaParser.Doublecolon - 120)) | (1 << (FeiyanFormulaParser.Identifier - 120)))) !== 0)) {
						this.state = 499;
						this.expressionList();
					}

					this.state = 502;
					this.match(FeiyanFormulaParser.RightParen);
					break;
				case FeiyanFormulaParser.LeftBrace:
					this.enterOuterAlt(localctx, 2);
					this.state = 503;
					this.bracedInitList();
					break;
				default:
					throw new antlr4.error.NoViableAltException(this);
			}
		} catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		} finally {
			this.exitRule();
		}
		return localctx;
	}



	castExpression() {
		let localctx = new CastExpressionContext(this, this._ctx, this.state);
		this.enterRule(localctx, 50, FeiyanFormulaParser.RULE_castExpression);
		try {
			this.state = 512;
			this._errHandler.sync(this);
			var la_ = this._interp.adaptivePredict(this._input, 47, this._ctx);
			switch (la_) {
				case 1:
					this.enterOuterAlt(localctx, 1);
					this.state = 506;
					this.unaryExpression();
					break;

				case 2:
					this.enterOuterAlt(localctx, 2);
					this.state = 507;
					this.match(FeiyanFormulaParser.LeftParen);
					this.state = 508;
					this.theTypeId();
					this.state = 509;
					this.match(FeiyanFormulaParser.RightParen);
					this.state = 510;
					this.castExpression();
					break;

			}
		} catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		} finally {
			this.exitRule();
		}
		return localctx;
	}



	pointerMemberExpression() {
		let localctx = new PointerMemberExpressionContext(this, this._ctx, this.state);
		this.enterRule(localctx, 52, FeiyanFormulaParser.RULE_pointerMemberExpression);
		var _la = 0; // Token type
		try {
			this.enterOuterAlt(localctx, 1);
			this.state = 514;
			this.castExpression();
			this.state = 519;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === FeiyanFormulaParser.ArrowStar || _la === FeiyanFormulaParser.DotStar) {
				this.state = 515;
				_la = this._input.LA(1);
				if (!(_la === FeiyanFormulaParser.ArrowStar || _la === FeiyanFormulaParser.DotStar)) {
					this._errHandler.recoverInline(this);
				}
				else {
					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 516;
				this.castExpression();
				this.state = 521;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
		} catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		} finally {
			this.exitRule();
		}
		return localctx;
	}



	multiplicativeExpression() {
		let localctx = new MultiplicativeExpressionContext(this, this._ctx, this.state);
		this.enterRule(localctx, 54, FeiyanFormulaParser.RULE_multiplicativeExpression);
		var _la = 0; // Token type
		try {
			this.enterOuterAlt(localctx, 1);
			this.state = 522;
			this.pointerMemberExpression();
			this.state = 527;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (((((_la - 93)) & ~0x1f) == 0 && ((1 << (_la - 93)) & ((1 << (FeiyanFormulaParser.Star - 93)) | (1 << (FeiyanFormulaParser.Div - 93)) | (1 << (FeiyanFormulaParser.Mod - 93)))) !== 0)) {
				this.state = 523;
				_la = this._input.LA(1);
				if (!(((((_la - 93)) & ~0x1f) == 0 && ((1 << (_la - 93)) & ((1 << (FeiyanFormulaParser.Star - 93)) | (1 << (FeiyanFormulaParser.Div - 93)) | (1 << (FeiyanFormulaParser.Mod - 93)))) !== 0))) {
					this._errHandler.recoverInline(this);
				}
				else {
					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 524;
				this.pointerMemberExpression();
				this.state = 529;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
		} catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		} finally {
			this.exitRule();
		}
		return localctx;
	}



	additiveExpression() {
		let localctx = new AdditiveExpressionContext(this, this._ctx, this.state);
		this.enterRule(localctx, 56, FeiyanFormulaParser.RULE_additiveExpression);
		var _la = 0; // Token type
		try {
			this.enterOuterAlt(localctx, 1);
			this.state = 530;
			this.multiplicativeExpression();
			this.state = 535;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === FeiyanFormulaParser.Plus || _la === FeiyanFormulaParser.Minus) {
				this.state = 531;
				_la = this._input.LA(1);
				if (!(_la === FeiyanFormulaParser.Plus || _la === FeiyanFormulaParser.Minus)) {
					this._errHandler.recoverInline(this);
				}
				else {
					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 532;
				this.multiplicativeExpression();
				this.state = 537;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
		} catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		} finally {
			this.exitRule();
		}
		return localctx;
	}



	shiftExpression() {
		let localctx = new ShiftExpressionContext(this, this._ctx, this.state);
		this.enterRule(localctx, 58, FeiyanFormulaParser.RULE_shiftExpression);
		try {
			this.enterOuterAlt(localctx, 1);
			this.state = 538;
			this.additiveExpression();
			this.state = 544;
			this._errHandler.sync(this);
			var _alt = this._interp.adaptivePredict(this._input, 51, this._ctx)
			while (_alt != 2 && _alt != antlr4.atn.ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					this.state = 539;
					this.shiftOperator();
					this.state = 540;
					this.additiveExpression();
				}
				this.state = 546;
				this._errHandler.sync(this);
				_alt = this._interp.adaptivePredict(this._input, 51, this._ctx);
			}

		} catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		} finally {
			this.exitRule();
		}
		return localctx;
	}



	shiftOperator() {
		let localctx = new ShiftOperatorContext(this, this._ctx, this.state);
		this.enterRule(localctx, 60, FeiyanFormulaParser.RULE_shiftOperator);
		try {
			this.state = 551;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
				case FeiyanFormulaParser.Greater:
					this.enterOuterAlt(localctx, 1);
					this.state = 547;
					this.match(FeiyanFormulaParser.Greater);
					this.state = 548;
					this.match(FeiyanFormulaParser.Greater);
					break;
				case FeiyanFormulaParser.Less:
					this.enterOuterAlt(localctx, 2);
					this.state = 549;
					this.match(FeiyanFormulaParser.Less);
					this.state = 550;
					this.match(FeiyanFormulaParser.Less);
					break;
				default:
					throw new antlr4.error.NoViableAltException(this);
			}
		} catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		} finally {
			this.exitRule();
		}
		return localctx;
	}



	relationalExpression() {
		let localctx = new RelationalExpressionContext(this, this._ctx, this.state);
		this.enterRule(localctx, 62, FeiyanFormulaParser.RULE_relationalExpression);
		var _la = 0; // Token type
		try {
			this.enterOuterAlt(localctx, 1);
			this.state = 553;
			this.shiftExpression();
			this.state = 558;
			this._errHandler.sync(this);
			var _alt = this._interp.adaptivePredict(this._input, 53, this._ctx)
			while (_alt != 2 && _alt != antlr4.atn.ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					this.state = 554;
					_la = this._input.LA(1);
					if (!(((((_la - 102)) & ~0x1f) == 0 && ((1 << (_la - 102)) & ((1 << (FeiyanFormulaParser.Less - 102)) | (1 << (FeiyanFormulaParser.Greater - 102)) | (1 << (FeiyanFormulaParser.LessEqual - 102)) | (1 << (FeiyanFormulaParser.GreaterEqual - 102)))) !== 0))) {
						this._errHandler.recoverInline(this);
					}
					else {
						this._errHandler.reportMatch(this);
						this.consume();
					}
					this.state = 555;
					this.shiftExpression();
				}
				this.state = 560;
				this._errHandler.sync(this);
				_alt = this._interp.adaptivePredict(this._input, 53, this._ctx);
			}

		} catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		} finally {
			this.exitRule();
		}
		return localctx;
	}



	equalityExpression() {
		let localctx = new EqualityExpressionContext(this, this._ctx, this.state);
		this.enterRule(localctx, 64, FeiyanFormulaParser.RULE_equalityExpression);
		var _la = 0; // Token type
		try {
			this.enterOuterAlt(localctx, 1);
			this.state = 561;
			this.relationalExpression();
			this.state = 566;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === FeiyanFormulaParser.Equal || _la === FeiyanFormulaParser.NotEqual) {
				this.state = 562;
				_la = this._input.LA(1);
				if (!(_la === FeiyanFormulaParser.Equal || _la === FeiyanFormulaParser.NotEqual)) {
					this._errHandler.recoverInline(this);
				}
				else {
					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 563;
				this.relationalExpression();
				this.state = 568;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
		} catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		} finally {
			this.exitRule();
		}
		return localctx;
	}



	andExpression() {
		let localctx = new AndExpressionContext(this, this._ctx, this.state);
		this.enterRule(localctx, 66, FeiyanFormulaParser.RULE_andExpression);
		var _la = 0; // Token type
		try {
			this.enterOuterAlt(localctx, 1);
			this.state = 569;
			this.equalityExpression();
			this.state = 574;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === FeiyanFormulaParser.And) {
				this.state = 570;
				this.match(FeiyanFormulaParser.And);
				this.state = 571;
				this.equalityExpression();
				this.state = 576;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
		} catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		} finally {
			this.exitRule();
		}
		return localctx;
	}



	exclusiveOrExpression() {
		let localctx = new ExclusiveOrExpressionContext(this, this._ctx, this.state);
		this.enterRule(localctx, 68, FeiyanFormulaParser.RULE_exclusiveOrExpression);
		var _la = 0; // Token type
		try {
			this.enterOuterAlt(localctx, 1);
			this.state = 577;
			this.andExpression();
			this.state = 582;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === FeiyanFormulaParser.Caret) {
				this.state = 578;
				this.match(FeiyanFormulaParser.Caret);
				this.state = 579;
				this.andExpression();
				this.state = 584;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
		} catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		} finally {
			this.exitRule();
		}
		return localctx;
	}



	inclusiveOrExpression() {
		let localctx = new InclusiveOrExpressionContext(this, this._ctx, this.state);
		this.enterRule(localctx, 70, FeiyanFormulaParser.RULE_inclusiveOrExpression);
		var _la = 0; // Token type
		try {
			this.enterOuterAlt(localctx, 1);
			this.state = 585;
			this.exclusiveOrExpression();
			this.state = 590;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === FeiyanFormulaParser.Or) {
				this.state = 586;
				this.match(FeiyanFormulaParser.Or);
				this.state = 587;
				this.exclusiveOrExpression();
				this.state = 592;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
		} catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		} finally {
			this.exitRule();
		}
		return localctx;
	}



	logicalAndExpression() {
		let localctx = new LogicalAndExpressionContext(this, this._ctx, this.state);
		this.enterRule(localctx, 72, FeiyanFormulaParser.RULE_logicalAndExpression);
		var _la = 0; // Token type
		try {
			this.enterOuterAlt(localctx, 1);
			this.state = 593;
			this.inclusiveOrExpression();
			this.state = 598;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === FeiyanFormulaParser.AndAnd) {
				this.state = 594;
				this.match(FeiyanFormulaParser.AndAnd);
				this.state = 595;
				this.inclusiveOrExpression();
				this.state = 600;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
		} catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		} finally {
			this.exitRule();
		}
		return localctx;
	}



	logicalOrExpression() {
		let localctx = new LogicalOrExpressionContext(this, this._ctx, this.state);
		this.enterRule(localctx, 74, FeiyanFormulaParser.RULE_logicalOrExpression);
		var _la = 0; // Token type
		try {
			this.enterOuterAlt(localctx, 1);
			this.state = 601;
			this.logicalAndExpression();
			this.state = 606;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === FeiyanFormulaParser.OrOr) {
				this.state = 602;
				this.match(FeiyanFormulaParser.OrOr);
				this.state = 603;
				this.logicalAndExpression();
				this.state = 608;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
		} catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		} finally {
			this.exitRule();
		}
		return localctx;
	}



	conditionalExpression() {
		let localctx = new ConditionalExpressionContext(this, this._ctx, this.state);
		this.enterRule(localctx, 76, FeiyanFormulaParser.RULE_conditionalExpression);
		var _la = 0; // Token type
		try {
			this.enterOuterAlt(localctx, 1);
			this.state = 609;
			this.logicalOrExpression();
			this.state = 615;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === FeiyanFormulaParser.Question) {
				this.state = 610;
				this.match(FeiyanFormulaParser.Question);
				this.state = 611;
				this.expression();
				this.state = 612;
				this.match(FeiyanFormulaParser.Colon);
				this.state = 613;
				this.assignmentExpression();
			}

		} catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		} finally {
			this.exitRule();
		}
		return localctx;
	}



	assignmentExpression() {
		let localctx = new AssignmentExpressionContext(this, this._ctx, this.state);
		this.enterRule(localctx, 78, FeiyanFormulaParser.RULE_assignmentExpression);
		try {
			this.state = 623;
			this._errHandler.sync(this);
			var la_ = this._interp.adaptivePredict(this._input, 61, this._ctx);
			switch (la_) {
				case 1:
					this.enterOuterAlt(localctx, 1);
					this.state = 617;
					this.conditionalExpression();
					break;

				case 2:
					this.enterOuterAlt(localctx, 2);
					this.state = 618;
					this.logicalOrExpression();
					this.state = 619;
					this.assignmentOperator();
					this.state = 620;
					this.initializerClause();
					break;

				case 3:
					this.enterOuterAlt(localctx, 3);
					this.state = 622;
					this.throwExpression();
					break;

			}
		} catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		} finally {
			this.exitRule();
		}
		return localctx;
	}



	assignmentOperator() {
		let localctx = new AssignmentOperatorContext(this, this._ctx, this.state);
		this.enterRule(localctx, 80, FeiyanFormulaParser.RULE_assignmentOperator);
		var _la = 0; // Token type
		try {
			this.enterOuterAlt(localctx, 1);
			this.state = 625;
			_la = this._input.LA(1);
			if (!(((((_la - 101)) & ~0x1f) == 0 && ((1 << (_la - 101)) & ((1 << (FeiyanFormulaParser.Assign - 101)) | (1 << (FeiyanFormulaParser.PlusAssign - 101)) | (1 << (FeiyanFormulaParser.MinusAssign - 101)) | (1 << (FeiyanFormulaParser.StarAssign - 101)) | (1 << (FeiyanFormulaParser.DivAssign - 101)) | (1 << (FeiyanFormulaParser.ModAssign - 101)) | (1 << (FeiyanFormulaParser.XorAssign - 101)) | (1 << (FeiyanFormulaParser.AndAssign - 101)) | (1 << (FeiyanFormulaParser.OrAssign - 101)) | (1 << (FeiyanFormulaParser.LeftShiftAssign - 101)) | (1 << (FeiyanFormulaParser.RightShiftAssign - 101)))) !== 0))) {
				this._errHandler.recoverInline(this);
			}
			else {
				this._errHandler.reportMatch(this);
				this.consume();
			}
		} catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		} finally {
			this.exitRule();
		}
		return localctx;
	}



	expression() {
		let localctx = new ExpressionContext(this, this._ctx, this.state);
		this.enterRule(localctx, 82, FeiyanFormulaParser.RULE_expression);
		var _la = 0; // Token type
		try {
			this.enterOuterAlt(localctx, 1);
			this.state = 627;
			this.assignmentExpression();
			this.state = 632;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === FeiyanFormulaParser.Comma) {
				this.state = 628;
				this.match(FeiyanFormulaParser.Comma);
				this.state = 629;
				this.assignmentExpression();
				this.state = 634;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
		} catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		} finally {
			this.exitRule();
		}
		return localctx;
	}



	constantExpression() {
		let localctx = new ConstantExpressionContext(this, this._ctx, this.state);
		this.enterRule(localctx, 84, FeiyanFormulaParser.RULE_constantExpression);
		try {
			this.enterOuterAlt(localctx, 1);
			this.state = 635;
			this.conditionalExpression();
		} catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		} finally {
			this.exitRule();
		}
		return localctx;
	}



	statement() {
		let localctx = new StatementContext(this, this._ctx, this.state);
		this.enterRule(localctx, 86, FeiyanFormulaParser.RULE_statement);
		try {
			this.state = 644;
			this._errHandler.sync(this);
			var la_ = this._interp.adaptivePredict(this._input, 63, this._ctx);
			switch (la_) {
				case 1:
					this.enterOuterAlt(localctx, 1);
					this.state = 637;
					this.labeledStatement();
					break;

				case 2:
					this.enterOuterAlt(localctx, 2);
					this.state = 638;
					this.declarationStatement();
					break;

				case 3:
					this.enterOuterAlt(localctx, 3);
					this.state = 639;
					this.expressionStatement();
					break;

				case 4:
					this.enterOuterAlt(localctx, 4);
					this.state = 640;
					this.compoundStatement();
					break;

				case 5:
					this.enterOuterAlt(localctx, 5);
					this.state = 641;
					this.selectionStatement();
					break;

				case 6:
					this.enterOuterAlt(localctx, 6);
					this.state = 642;
					this.iterationStatement();
					break;

				case 7:
					this.enterOuterAlt(localctx, 7);
					this.state = 643;
					this.jumpStatement();
					break;

			}
		} catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		} finally {
			this.exitRule();
		}
		return localctx;
	}



	labeledStatement() {
		let localctx = new LabeledStatementContext(this, this._ctx, this.state);
		this.enterRule(localctx, 88, FeiyanFormulaParser.RULE_labeledStatement);
		try {
			this.enterOuterAlt(localctx, 1);
			this.state = 650;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
				case FeiyanFormulaParser.Identifier:
					this.state = 646;
					this.match(FeiyanFormulaParser.Identifier);
					break;
				case FeiyanFormulaParser.Case:
					this.state = 647;
					this.match(FeiyanFormulaParser.Case);
					this.state = 648;
					this.constantExpression();
					break;
				case FeiyanFormulaParser.Default:
					this.state = 649;
					this.match(FeiyanFormulaParser.Default);
					break;
				default:
					throw new antlr4.error.NoViableAltException(this);
			}
			this.state = 652;
			this.match(FeiyanFormulaParser.Colon);
			this.state = 653;
			this.statement();
		} catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		} finally {
			this.exitRule();
		}
		return localctx;
	}



	expressionStatement() {
		let localctx = new ExpressionStatementContext(this, this._ctx, this.state);
		this.enterRule(localctx, 90, FeiyanFormulaParser.RULE_expressionStatement);
		var _la = 0; // Token type
		try {
			this.enterOuterAlt(localctx, 1);
			this.state = 656;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if ((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << FeiyanFormulaParser.IntegerLiteral) | (1 << FeiyanFormulaParser.CharacterLiteral) | (1 << FeiyanFormulaParser.FloatingLiteral) | (1 << FeiyanFormulaParser.StringLiteral) | (1 << FeiyanFormulaParser.BooleanLiteral) | (1 << FeiyanFormulaParser.PointerLiteral) | (1 << FeiyanFormulaParser.UserDefinedLiteral) | (1 << FeiyanFormulaParser.Auto) | (1 << FeiyanFormulaParser.Bool) | (1 << FeiyanFormulaParser.Char) | (1 << FeiyanFormulaParser.Char16) | (1 << FeiyanFormulaParser.Char32) | (1 << FeiyanFormulaParser.Const_cast) | (1 << FeiyanFormulaParser.Decltype) | (1 << FeiyanFormulaParser.Double) | (1 << FeiyanFormulaParser.Dynamic_cast))) !== 0) || ((((_la - 39)) & ~0x1f) == 0 && ((1 << (_la - 39)) & ((1 << (FeiyanFormulaParser.Float - 39)) | (1 << (FeiyanFormulaParser.Int - 39)) | (1 << (FeiyanFormulaParser.Long - 39)) | (1 << (FeiyanFormulaParser.New - 39)) | (1 << (FeiyanFormulaParser.Operator - 39)) | (1 << (FeiyanFormulaParser.Reinterpret_cast - 39)) | (1 << (FeiyanFormulaParser.Short - 39)) | (1 << (FeiyanFormulaParser.Signed - 39)) | (1 << (FeiyanFormulaParser.Static_cast - 39)) | (1 << (FeiyanFormulaParser.This - 39)))) !== 0) || ((((_la - 71)) & ~0x1f) == 0 && ((1 << (_la - 71)) & ((1 << (FeiyanFormulaParser.Throw - 71)) | (1 << (FeiyanFormulaParser.Unsigned - 71)) | (1 << (FeiyanFormulaParser.Void - 71)) | (1 << (FeiyanFormulaParser.Wchar - 71)) | (1 << (FeiyanFormulaParser.LeftParen - 71)) | (1 << (FeiyanFormulaParser.LeftBracket - 71)) | (1 << (FeiyanFormulaParser.Plus - 71)) | (1 << (FeiyanFormulaParser.Minus - 71)) | (1 << (FeiyanFormulaParser.Star - 71)) | (1 << (FeiyanFormulaParser.And - 71)) | (1 << (FeiyanFormulaParser.Or - 71)) | (1 << (FeiyanFormulaParser.Tilde - 71)) | (1 << (FeiyanFormulaParser.Not - 71)))) !== 0) || ((((_la - 120)) & ~0x1f) == 0 && ((1 << (_la - 120)) & ((1 << (FeiyanFormulaParser.PlusPlus - 120)) | (1 << (FeiyanFormulaParser.MinusMinus - 120)) | (1 << (FeiyanFormulaParser.Doublecolon - 120)) | (1 << (FeiyanFormulaParser.Identifier - 120)))) !== 0)) {
				this.state = 655;
				this.expression();
			}

			this.state = 658;
			this.match(FeiyanFormulaParser.Semi);
		} catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		} finally {
			this.exitRule();
		}
		return localctx;
	}



	compoundStatement() {
		let localctx = new CompoundStatementContext(this, this._ctx, this.state);
		this.enterRule(localctx, 92, FeiyanFormulaParser.RULE_compoundStatement);
		var _la = 0; // Token type
		try {
			this.enterOuterAlt(localctx, 1);
			this.state = 660;
			this.match(FeiyanFormulaParser.LeftBrace);
			this.state = 662;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if ((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << FeiyanFormulaParser.IntegerLiteral) | (1 << FeiyanFormulaParser.CharacterLiteral) | (1 << FeiyanFormulaParser.FloatingLiteral) | (1 << FeiyanFormulaParser.StringLiteral) | (1 << FeiyanFormulaParser.BooleanLiteral) | (1 << FeiyanFormulaParser.PointerLiteral) | (1 << FeiyanFormulaParser.UserDefinedLiteral) | (1 << FeiyanFormulaParser.Alignas) | (1 << FeiyanFormulaParser.Auto) | (1 << FeiyanFormulaParser.Bool) | (1 << FeiyanFormulaParser.Break) | (1 << FeiyanFormulaParser.Case) | (1 << FeiyanFormulaParser.Char) | (1 << FeiyanFormulaParser.Char16) | (1 << FeiyanFormulaParser.Char32) | (1 << FeiyanFormulaParser.Const) | (1 << FeiyanFormulaParser.Const_cast) | (1 << FeiyanFormulaParser.Continue) | (1 << FeiyanFormulaParser.Decltype) | (1 << FeiyanFormulaParser.Default) | (1 << FeiyanFormulaParser.Do) | (1 << FeiyanFormulaParser.Double) | (1 << FeiyanFormulaParser.Dynamic_cast))) !== 0) || ((((_la - 33)) & ~0x1f) == 0 && ((1 << (_la - 33)) & ((1 << (FeiyanFormulaParser.Enum - 33)) | (1 << (FeiyanFormulaParser.Explicit - 33)) | (1 << (FeiyanFormulaParser.Float - 33)) | (1 << (FeiyanFormulaParser.For - 33)) | (1 << (FeiyanFormulaParser.Goto - 33)) | (1 << (FeiyanFormulaParser.If - 33)) | (1 << (FeiyanFormulaParser.Inline - 33)) | (1 << (FeiyanFormulaParser.Int - 33)) | (1 << (FeiyanFormulaParser.Long - 33)) | (1 << (FeiyanFormulaParser.New - 33)) | (1 << (FeiyanFormulaParser.Operator - 33)) | (1 << (FeiyanFormulaParser.Reinterpret_cast - 33)) | (1 << (FeiyanFormulaParser.Return - 33)) | (1 << (FeiyanFormulaParser.Short - 33)) | (1 << (FeiyanFormulaParser.Signed - 33)))) !== 0) || ((((_la - 65)) & ~0x1f) == 0 && ((1 << (_la - 65)) & ((1 << (FeiyanFormulaParser.Static_cast - 65)) | (1 << (FeiyanFormulaParser.Switch - 65)) | (1 << (FeiyanFormulaParser.This - 65)) | (1 << (FeiyanFormulaParser.Throw - 65)) | (1 << (FeiyanFormulaParser.Unsigned - 65)) | (1 << (FeiyanFormulaParser.Virtual - 65)) | (1 << (FeiyanFormulaParser.Void - 65)) | (1 << (FeiyanFormulaParser.Volatile - 65)) | (1 << (FeiyanFormulaParser.Wchar - 65)) | (1 << (FeiyanFormulaParser.While - 65)) | (1 << (FeiyanFormulaParser.LeftParen - 65)) | (1 << (FeiyanFormulaParser.LeftBracket - 65)) | (1 << (FeiyanFormulaParser.LeftBrace - 65)) | (1 << (FeiyanFormulaParser.Plus - 65)) | (1 << (FeiyanFormulaParser.Minus - 65)) | (1 << (FeiyanFormulaParser.Star - 65)))) !== 0) || ((((_la - 97)) & ~0x1f) == 0 && ((1 << (_la - 97)) & ((1 << (FeiyanFormulaParser.And - 97)) | (1 << (FeiyanFormulaParser.Or - 97)) | (1 << (FeiyanFormulaParser.Tilde - 97)) | (1 << (FeiyanFormulaParser.Not - 97)) | (1 << (FeiyanFormulaParser.AndAnd - 97)) | (1 << (FeiyanFormulaParser.PlusPlus - 97)) | (1 << (FeiyanFormulaParser.MinusMinus - 97)) | (1 << (FeiyanFormulaParser.Doublecolon - 97)) | (1 << (FeiyanFormulaParser.Semi - 97)))) !== 0) || _la === FeiyanFormulaParser.Ellipsis || _la === FeiyanFormulaParser.Identifier) {
				this.state = 661;
				this.statementSeq();
			}

			this.state = 664;
			this.match(FeiyanFormulaParser.RightBrace);
		} catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		} finally {
			this.exitRule();
		}
		return localctx;
	}



	statementSeq() {
		let localctx = new StatementSeqContext(this, this._ctx, this.state);
		this.enterRule(localctx, 94, FeiyanFormulaParser.RULE_statementSeq);
		var _la = 0; // Token type
		try {
			this.enterOuterAlt(localctx, 1);
			this.state = 667;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				this.state = 666;
				this.statement();
				this.state = 669;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while ((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << FeiyanFormulaParser.IntegerLiteral) | (1 << FeiyanFormulaParser.CharacterLiteral) | (1 << FeiyanFormulaParser.FloatingLiteral) | (1 << FeiyanFormulaParser.StringLiteral) | (1 << FeiyanFormulaParser.BooleanLiteral) | (1 << FeiyanFormulaParser.PointerLiteral) | (1 << FeiyanFormulaParser.UserDefinedLiteral) | (1 << FeiyanFormulaParser.Alignas) | (1 << FeiyanFormulaParser.Auto) | (1 << FeiyanFormulaParser.Bool) | (1 << FeiyanFormulaParser.Break) | (1 << FeiyanFormulaParser.Case) | (1 << FeiyanFormulaParser.Char) | (1 << FeiyanFormulaParser.Char16) | (1 << FeiyanFormulaParser.Char32) | (1 << FeiyanFormulaParser.Const) | (1 << FeiyanFormulaParser.Const_cast) | (1 << FeiyanFormulaParser.Continue) | (1 << FeiyanFormulaParser.Decltype) | (1 << FeiyanFormulaParser.Default) | (1 << FeiyanFormulaParser.Do) | (1 << FeiyanFormulaParser.Double) | (1 << FeiyanFormulaParser.Dynamic_cast))) !== 0) || ((((_la - 33)) & ~0x1f) == 0 && ((1 << (_la - 33)) & ((1 << (FeiyanFormulaParser.Enum - 33)) | (1 << (FeiyanFormulaParser.Explicit - 33)) | (1 << (FeiyanFormulaParser.Float - 33)) | (1 << (FeiyanFormulaParser.For - 33)) | (1 << (FeiyanFormulaParser.Goto - 33)) | (1 << (FeiyanFormulaParser.If - 33)) | (1 << (FeiyanFormulaParser.Inline - 33)) | (1 << (FeiyanFormulaParser.Int - 33)) | (1 << (FeiyanFormulaParser.Long - 33)) | (1 << (FeiyanFormulaParser.New - 33)) | (1 << (FeiyanFormulaParser.Operator - 33)) | (1 << (FeiyanFormulaParser.Reinterpret_cast - 33)) | (1 << (FeiyanFormulaParser.Return - 33)) | (1 << (FeiyanFormulaParser.Short - 33)) | (1 << (FeiyanFormulaParser.Signed - 33)))) !== 0) || ((((_la - 65)) & ~0x1f) == 0 && ((1 << (_la - 65)) & ((1 << (FeiyanFormulaParser.Static_cast - 65)) | (1 << (FeiyanFormulaParser.Switch - 65)) | (1 << (FeiyanFormulaParser.This - 65)) | (1 << (FeiyanFormulaParser.Throw - 65)) | (1 << (FeiyanFormulaParser.Unsigned - 65)) | (1 << (FeiyanFormulaParser.Virtual - 65)) | (1 << (FeiyanFormulaParser.Void - 65)) | (1 << (FeiyanFormulaParser.Volatile - 65)) | (1 << (FeiyanFormulaParser.Wchar - 65)) | (1 << (FeiyanFormulaParser.While - 65)) | (1 << (FeiyanFormulaParser.LeftParen - 65)) | (1 << (FeiyanFormulaParser.LeftBracket - 65)) | (1 << (FeiyanFormulaParser.LeftBrace - 65)) | (1 << (FeiyanFormulaParser.Plus - 65)) | (1 << (FeiyanFormulaParser.Minus - 65)) | (1 << (FeiyanFormulaParser.Star - 65)))) !== 0) || ((((_la - 97)) & ~0x1f) == 0 && ((1 << (_la - 97)) & ((1 << (FeiyanFormulaParser.And - 97)) | (1 << (FeiyanFormulaParser.Or - 97)) | (1 << (FeiyanFormulaParser.Tilde - 97)) | (1 << (FeiyanFormulaParser.Not - 97)) | (1 << (FeiyanFormulaParser.AndAnd - 97)) | (1 << (FeiyanFormulaParser.PlusPlus - 97)) | (1 << (FeiyanFormulaParser.MinusMinus - 97)) | (1 << (FeiyanFormulaParser.Doublecolon - 97)) | (1 << (FeiyanFormulaParser.Semi - 97)))) !== 0) || _la === FeiyanFormulaParser.Ellipsis || _la === FeiyanFormulaParser.Identifier);
		} catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		} finally {
			this.exitRule();
		}
		return localctx;
	}



	selectionStatement() {
		let localctx = new SelectionStatementContext(this, this._ctx, this.state);
		this.enterRule(localctx, 96, FeiyanFormulaParser.RULE_selectionStatement);
		try {
			this.state = 686;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
				case FeiyanFormulaParser.If:
					this.enterOuterAlt(localctx, 1);
					this.state = 671;
					this.match(FeiyanFormulaParser.If);
					this.state = 672;
					this.match(FeiyanFormulaParser.LeftParen);
					this.state = 673;
					this.condition();
					this.state = 674;
					this.match(FeiyanFormulaParser.RightParen);
					this.state = 675;
					this.statement();
					this.state = 678;
					this._errHandler.sync(this);
					var la_ = this._interp.adaptivePredict(this._input, 68, this._ctx);
					if (la_ === 1) {
						this.state = 676;
						this.match(FeiyanFormulaParser.Else);
						this.state = 677;
						this.statement();

					}
					break;
				case FeiyanFormulaParser.Switch:
					this.enterOuterAlt(localctx, 2);
					this.state = 680;
					this.match(FeiyanFormulaParser.Switch);
					this.state = 681;
					this.match(FeiyanFormulaParser.LeftParen);
					this.state = 682;
					this.condition();
					this.state = 683;
					this.match(FeiyanFormulaParser.RightParen);
					this.state = 684;
					this.statement();
					break;
				default:
					throw new antlr4.error.NoViableAltException(this);
			}
		} catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		} finally {
			this.exitRule();
		}
		return localctx;
	}



	condition() {
		let localctx = new ConditionContext(this, this._ctx, this.state);
		this.enterRule(localctx, 98, FeiyanFormulaParser.RULE_condition);
		var _la = 0; // Token type
		try {
			this.state = 699;
			this._errHandler.sync(this);
			var la_ = this._interp.adaptivePredict(this._input, 72, this._ctx);
			switch (la_) {
				case 1:
					this.enterOuterAlt(localctx, 1);
					this.state = 688;
					this.expression();
					break;

				case 2:
					this.enterOuterAlt(localctx, 2);
					this.state = 690;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === FeiyanFormulaParser.Alignas || _la === FeiyanFormulaParser.LeftBracket) {
						this.state = 689;
						this.attributeSpecifierSeq();
					}

					this.state = 692;
					this.declSpecifierSeq();
					this.state = 693;
					this.declarator();
					this.state = 697;
					this._errHandler.sync(this);
					switch (this._input.LA(1)) {
						case FeiyanFormulaParser.Assign:
							this.state = 694;
							this.match(FeiyanFormulaParser.Assign);
							this.state = 695;
							this.initializerClause();
							break;
						case FeiyanFormulaParser.LeftBrace:
							this.state = 696;
							this.bracedInitList();
							break;
						default:
							throw new antlr4.error.NoViableAltException(this);
					}
					break;

			}
		} catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		} finally {
			this.exitRule();
		}
		return localctx;
	}



	iterationStatement() {
		let localctx = new IterationStatementContext(this, this._ctx, this.state);
		this.enterRule(localctx, 100, FeiyanFormulaParser.RULE_iterationStatement);
		var _la = 0; // Token type
		try {
			this.state = 734;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
				case FeiyanFormulaParser.While:
					this.enterOuterAlt(localctx, 1);
					this.state = 701;
					this.match(FeiyanFormulaParser.While);
					this.state = 702;
					this.match(FeiyanFormulaParser.LeftParen);
					this.state = 703;
					this.condition();
					this.state = 704;
					this.match(FeiyanFormulaParser.RightParen);
					this.state = 705;
					this.statement();
					break;
				case FeiyanFormulaParser.Do:
					this.enterOuterAlt(localctx, 2);
					this.state = 707;
					this.match(FeiyanFormulaParser.Do);
					this.state = 708;
					this.statement();
					this.state = 709;
					this.match(FeiyanFormulaParser.While);
					this.state = 710;
					this.match(FeiyanFormulaParser.LeftParen);
					this.state = 711;
					this.expression();
					this.state = 712;
					this.match(FeiyanFormulaParser.RightParen);
					this.state = 713;
					this.match(FeiyanFormulaParser.Semi);
					break;
				case FeiyanFormulaParser.For:
					this.enterOuterAlt(localctx, 3);
					this.state = 715;
					this.match(FeiyanFormulaParser.For);
					this.state = 716;
					this.match(FeiyanFormulaParser.LeftParen);
					this.state = 729;
					this._errHandler.sync(this);
					var la_ = this._interp.adaptivePredict(this._input, 75, this._ctx);
					switch (la_) {
						case 1:
							this.state = 717;
							this.forInitStatement();
							this.state = 719;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
							if ((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << FeiyanFormulaParser.IntegerLiteral) | (1 << FeiyanFormulaParser.CharacterLiteral) | (1 << FeiyanFormulaParser.FloatingLiteral) | (1 << FeiyanFormulaParser.StringLiteral) | (1 << FeiyanFormulaParser.BooleanLiteral) | (1 << FeiyanFormulaParser.PointerLiteral) | (1 << FeiyanFormulaParser.UserDefinedLiteral) | (1 << FeiyanFormulaParser.Alignas) | (1 << FeiyanFormulaParser.Auto) | (1 << FeiyanFormulaParser.Bool) | (1 << FeiyanFormulaParser.Char) | (1 << FeiyanFormulaParser.Char16) | (1 << FeiyanFormulaParser.Char32) | (1 << FeiyanFormulaParser.Const) | (1 << FeiyanFormulaParser.Const_cast) | (1 << FeiyanFormulaParser.Decltype) | (1 << FeiyanFormulaParser.Double) | (1 << FeiyanFormulaParser.Dynamic_cast))) !== 0) || ((((_la - 33)) & ~0x1f) == 0 && ((1 << (_la - 33)) & ((1 << (FeiyanFormulaParser.Enum - 33)) | (1 << (FeiyanFormulaParser.Explicit - 33)) | (1 << (FeiyanFormulaParser.Float - 33)) | (1 << (FeiyanFormulaParser.Inline - 33)) | (1 << (FeiyanFormulaParser.Int - 33)) | (1 << (FeiyanFormulaParser.Long - 33)) | (1 << (FeiyanFormulaParser.New - 33)) | (1 << (FeiyanFormulaParser.Operator - 33)) | (1 << (FeiyanFormulaParser.Reinterpret_cast - 33)) | (1 << (FeiyanFormulaParser.Short - 33)) | (1 << (FeiyanFormulaParser.Signed - 33)))) !== 0) || ((((_la - 65)) & ~0x1f) == 0 && ((1 << (_la - 65)) & ((1 << (FeiyanFormulaParser.Static_cast - 65)) | (1 << (FeiyanFormulaParser.This - 65)) | (1 << (FeiyanFormulaParser.Throw - 65)) | (1 << (FeiyanFormulaParser.Unsigned - 65)) | (1 << (FeiyanFormulaParser.Virtual - 65)) | (1 << (FeiyanFormulaParser.Void - 65)) | (1 << (FeiyanFormulaParser.Volatile - 65)) | (1 << (FeiyanFormulaParser.Wchar - 65)) | (1 << (FeiyanFormulaParser.LeftParen - 65)) | (1 << (FeiyanFormulaParser.LeftBracket - 65)) | (1 << (FeiyanFormulaParser.Plus - 65)) | (1 << (FeiyanFormulaParser.Minus - 65)) | (1 << (FeiyanFormulaParser.Star - 65)))) !== 0) || ((((_la - 97)) & ~0x1f) == 0 && ((1 << (_la - 97)) & ((1 << (FeiyanFormulaParser.And - 97)) | (1 << (FeiyanFormulaParser.Or - 97)) | (1 << (FeiyanFormulaParser.Tilde - 97)) | (1 << (FeiyanFormulaParser.Not - 97)) | (1 << (FeiyanFormulaParser.PlusPlus - 97)) | (1 << (FeiyanFormulaParser.MinusMinus - 97)) | (1 << (FeiyanFormulaParser.Doublecolon - 97)))) !== 0) || _la === FeiyanFormulaParser.Identifier) {
								this.state = 718;
								this.condition();
							}

							this.state = 721;
							this.match(FeiyanFormulaParser.Semi);
							this.state = 723;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
							if ((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << FeiyanFormulaParser.IntegerLiteral) | (1 << FeiyanFormulaParser.CharacterLiteral) | (1 << FeiyanFormulaParser.FloatingLiteral) | (1 << FeiyanFormulaParser.StringLiteral) | (1 << FeiyanFormulaParser.BooleanLiteral) | (1 << FeiyanFormulaParser.PointerLiteral) | (1 << FeiyanFormulaParser.UserDefinedLiteral) | (1 << FeiyanFormulaParser.Auto) | (1 << FeiyanFormulaParser.Bool) | (1 << FeiyanFormulaParser.Char) | (1 << FeiyanFormulaParser.Char16) | (1 << FeiyanFormulaParser.Char32) | (1 << FeiyanFormulaParser.Const_cast) | (1 << FeiyanFormulaParser.Decltype) | (1 << FeiyanFormulaParser.Double) | (1 << FeiyanFormulaParser.Dynamic_cast))) !== 0) || ((((_la - 39)) & ~0x1f) == 0 && ((1 << (_la - 39)) & ((1 << (FeiyanFormulaParser.Float - 39)) | (1 << (FeiyanFormulaParser.Int - 39)) | (1 << (FeiyanFormulaParser.Long - 39)) | (1 << (FeiyanFormulaParser.New - 39)) | (1 << (FeiyanFormulaParser.Operator - 39)) | (1 << (FeiyanFormulaParser.Reinterpret_cast - 39)) | (1 << (FeiyanFormulaParser.Short - 39)) | (1 << (FeiyanFormulaParser.Signed - 39)) | (1 << (FeiyanFormulaParser.Static_cast - 39)) | (1 << (FeiyanFormulaParser.This - 39)))) !== 0) || ((((_la - 71)) & ~0x1f) == 0 && ((1 << (_la - 71)) & ((1 << (FeiyanFormulaParser.Throw - 71)) | (1 << (FeiyanFormulaParser.Unsigned - 71)) | (1 << (FeiyanFormulaParser.Void - 71)) | (1 << (FeiyanFormulaParser.Wchar - 71)) | (1 << (FeiyanFormulaParser.LeftParen - 71)) | (1 << (FeiyanFormulaParser.LeftBracket - 71)) | (1 << (FeiyanFormulaParser.Plus - 71)) | (1 << (FeiyanFormulaParser.Minus - 71)) | (1 << (FeiyanFormulaParser.Star - 71)) | (1 << (FeiyanFormulaParser.And - 71)) | (1 << (FeiyanFormulaParser.Or - 71)) | (1 << (FeiyanFormulaParser.Tilde - 71)) | (1 << (FeiyanFormulaParser.Not - 71)))) !== 0) || ((((_la - 120)) & ~0x1f) == 0 && ((1 << (_la - 120)) & ((1 << (FeiyanFormulaParser.PlusPlus - 120)) | (1 << (FeiyanFormulaParser.MinusMinus - 120)) | (1 << (FeiyanFormulaParser.Doublecolon - 120)) | (1 << (FeiyanFormulaParser.Identifier - 120)))) !== 0)) {
								this.state = 722;
								this.expression();
							}

							break;

						case 2:
							this.state = 725;
							this.forRangeDeclaration();
							this.state = 726;
							this.match(FeiyanFormulaParser.Colon);
							this.state = 727;
							this.forRangeInitializer();
							break;

					}
					this.state = 731;
					this.match(FeiyanFormulaParser.RightParen);
					this.state = 732;
					this.statement();
					break;
				default:
					throw new antlr4.error.NoViableAltException(this);
			}
		} catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		} finally {
			this.exitRule();
		}
		return localctx;
	}



	forInitStatement() {
		let localctx = new ForInitStatementContext(this, this._ctx, this.state);
		this.enterRule(localctx, 102, FeiyanFormulaParser.RULE_forInitStatement);
		try {
			this.state = 738;
			this._errHandler.sync(this);
			var la_ = this._interp.adaptivePredict(this._input, 77, this._ctx);
			switch (la_) {
				case 1:
					this.enterOuterAlt(localctx, 1);
					this.state = 736;
					this.expressionStatement();
					break;

				case 2:
					this.enterOuterAlt(localctx, 2);
					this.state = 737;
					this.simpleDeclaration();
					break;

			}
		} catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		} finally {
			this.exitRule();
		}
		return localctx;
	}



	forRangeDeclaration() {
		let localctx = new ForRangeDeclarationContext(this, this._ctx, this.state);
		this.enterRule(localctx, 104, FeiyanFormulaParser.RULE_forRangeDeclaration);
		var _la = 0; // Token type
		try {
			this.enterOuterAlt(localctx, 1);
			this.state = 741;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === FeiyanFormulaParser.Alignas || _la === FeiyanFormulaParser.LeftBracket) {
				this.state = 740;
				this.attributeSpecifierSeq();
			}

			this.state = 743;
			this.declSpecifierSeq();
			this.state = 744;
			this.declarator();
		} catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		} finally {
			this.exitRule();
		}
		return localctx;
	}



	forRangeInitializer() {
		let localctx = new ForRangeInitializerContext(this, this._ctx, this.state);
		this.enterRule(localctx, 106, FeiyanFormulaParser.RULE_forRangeInitializer);
		try {
			this.state = 748;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
				case FeiyanFormulaParser.IntegerLiteral:
				case FeiyanFormulaParser.CharacterLiteral:
				case FeiyanFormulaParser.FloatingLiteral:
				case FeiyanFormulaParser.StringLiteral:
				case FeiyanFormulaParser.BooleanLiteral:
				case FeiyanFormulaParser.PointerLiteral:
				case FeiyanFormulaParser.UserDefinedLiteral:
				case FeiyanFormulaParser.Auto:
				case FeiyanFormulaParser.Bool:
				case FeiyanFormulaParser.Char:
				case FeiyanFormulaParser.Char16:
				case FeiyanFormulaParser.Char32:
				case FeiyanFormulaParser.Const_cast:
				case FeiyanFormulaParser.Decltype:
				case FeiyanFormulaParser.Double:
				case FeiyanFormulaParser.Dynamic_cast:
				case FeiyanFormulaParser.Float:
				case FeiyanFormulaParser.Int:
				case FeiyanFormulaParser.Long:
				case FeiyanFormulaParser.New:
				case FeiyanFormulaParser.Operator:
				case FeiyanFormulaParser.Reinterpret_cast:
				case FeiyanFormulaParser.Short:
				case FeiyanFormulaParser.Signed:
				case FeiyanFormulaParser.Static_cast:
				case FeiyanFormulaParser.This:
				case FeiyanFormulaParser.Throw:
				case FeiyanFormulaParser.Unsigned:
				case FeiyanFormulaParser.Void:
				case FeiyanFormulaParser.Wchar:
				case FeiyanFormulaParser.LeftParen:
				case FeiyanFormulaParser.LeftBracket:
				case FeiyanFormulaParser.Plus:
				case FeiyanFormulaParser.Minus:
				case FeiyanFormulaParser.Star:
				case FeiyanFormulaParser.And:
				case FeiyanFormulaParser.Or:
				case FeiyanFormulaParser.Tilde:
				case FeiyanFormulaParser.Not:
				case FeiyanFormulaParser.PlusPlus:
				case FeiyanFormulaParser.MinusMinus:
				case FeiyanFormulaParser.Doublecolon:
				case FeiyanFormulaParser.Identifier:
					this.enterOuterAlt(localctx, 1);
					this.state = 746;
					this.expression();
					break;
				case FeiyanFormulaParser.LeftBrace:
					this.enterOuterAlt(localctx, 2);
					this.state = 747;
					this.bracedInitList();
					break;
				default:
					throw new antlr4.error.NoViableAltException(this);
			}
		} catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		} finally {
			this.exitRule();
		}
		return localctx;
	}



	jumpStatement() {
		let localctx = new JumpStatementContext(this, this._ctx, this.state);
		this.enterRule(localctx, 108, FeiyanFormulaParser.RULE_jumpStatement);
		try {
			this.enterOuterAlt(localctx, 1);
			this.state = 759;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
				case FeiyanFormulaParser.Break:
					this.state = 750;
					this.match(FeiyanFormulaParser.Break);
					break;
				case FeiyanFormulaParser.Continue:
					this.state = 751;
					this.match(FeiyanFormulaParser.Continue);
					break;
				case FeiyanFormulaParser.Return:
					this.state = 752;
					this.match(FeiyanFormulaParser.Return);
					this.state = 755;
					this._errHandler.sync(this);
					switch (this._input.LA(1)) {
						case FeiyanFormulaParser.IntegerLiteral:
						case FeiyanFormulaParser.CharacterLiteral:
						case FeiyanFormulaParser.FloatingLiteral:
						case FeiyanFormulaParser.StringLiteral:
						case FeiyanFormulaParser.BooleanLiteral:
						case FeiyanFormulaParser.PointerLiteral:
						case FeiyanFormulaParser.UserDefinedLiteral:
						case FeiyanFormulaParser.Auto:
						case FeiyanFormulaParser.Bool:
						case FeiyanFormulaParser.Char:
						case FeiyanFormulaParser.Char16:
						case FeiyanFormulaParser.Char32:
						case FeiyanFormulaParser.Const_cast:
						case FeiyanFormulaParser.Decltype:
						case FeiyanFormulaParser.Double:
						case FeiyanFormulaParser.Dynamic_cast:
						case FeiyanFormulaParser.Float:
						case FeiyanFormulaParser.Int:
						case FeiyanFormulaParser.Long:
						case FeiyanFormulaParser.New:
						case FeiyanFormulaParser.Operator:
						case FeiyanFormulaParser.Reinterpret_cast:
						case FeiyanFormulaParser.Short:
						case FeiyanFormulaParser.Signed:
						case FeiyanFormulaParser.Static_cast:
						case FeiyanFormulaParser.This:
						case FeiyanFormulaParser.Throw:
						case FeiyanFormulaParser.Unsigned:
						case FeiyanFormulaParser.Void:
						case FeiyanFormulaParser.Wchar:
						case FeiyanFormulaParser.LeftParen:
						case FeiyanFormulaParser.LeftBracket:
						case FeiyanFormulaParser.Plus:
						case FeiyanFormulaParser.Minus:
						case FeiyanFormulaParser.Star:
						case FeiyanFormulaParser.And:
						case FeiyanFormulaParser.Or:
						case FeiyanFormulaParser.Tilde:
						case FeiyanFormulaParser.Not:
						case FeiyanFormulaParser.PlusPlus:
						case FeiyanFormulaParser.MinusMinus:
						case FeiyanFormulaParser.Doublecolon:
						case FeiyanFormulaParser.Identifier:
							this.state = 753;
							this.expression();
							break;
						case FeiyanFormulaParser.LeftBrace:
							this.state = 754;
							this.bracedInitList();
							break;
						case FeiyanFormulaParser.Semi:
							break;
						default:
							break;
					}
					break;
				case FeiyanFormulaParser.Goto:
					this.state = 757;
					this.match(FeiyanFormulaParser.Goto);
					this.state = 758;
					this.match(FeiyanFormulaParser.Identifier);
					break;
				default:
					throw new antlr4.error.NoViableAltException(this);
			}
			this.state = 761;
			this.match(FeiyanFormulaParser.Semi);
		} catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		} finally {
			this.exitRule();
		}
		return localctx;
	}



	declarationStatement() {
		let localctx = new DeclarationStatementContext(this, this._ctx, this.state);
		this.enterRule(localctx, 110, FeiyanFormulaParser.RULE_declarationStatement);
		try {
			this.enterOuterAlt(localctx, 1);
			this.state = 763;
			this.blockDeclaration();
		} catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		} finally {
			this.exitRule();
		}
		return localctx;
	}



	blockDeclaration() {
		let localctx = new BlockDeclarationContext(this, this._ctx, this.state);
		this.enterRule(localctx, 112, FeiyanFormulaParser.RULE_blockDeclaration);
		try {
			this.enterOuterAlt(localctx, 1);
			this.state = 765;
			this.simpleDeclaration();
		} catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		} finally {
			this.exitRule();
		}
		return localctx;
	}



	simpleDeclaration() {
		let localctx = new SimpleDeclarationContext(this, this._ctx, this.state);
		this.enterRule(localctx, 114, FeiyanFormulaParser.RULE_simpleDeclaration);
		var _la = 0; // Token type
		try {
			this.state = 781;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
				case FeiyanFormulaParser.Auto:
				case FeiyanFormulaParser.Bool:
				case FeiyanFormulaParser.Char:
				case FeiyanFormulaParser.Char16:
				case FeiyanFormulaParser.Char32:
				case FeiyanFormulaParser.Const:
				case FeiyanFormulaParser.Decltype:
				case FeiyanFormulaParser.Double:
				case FeiyanFormulaParser.Enum:
				case FeiyanFormulaParser.Explicit:
				case FeiyanFormulaParser.Float:
				case FeiyanFormulaParser.Inline:
				case FeiyanFormulaParser.Int:
				case FeiyanFormulaParser.Long:
				case FeiyanFormulaParser.Operator:
				case FeiyanFormulaParser.Short:
				case FeiyanFormulaParser.Signed:
				case FeiyanFormulaParser.Unsigned:
				case FeiyanFormulaParser.Virtual:
				case FeiyanFormulaParser.Void:
				case FeiyanFormulaParser.Volatile:
				case FeiyanFormulaParser.Wchar:
				case FeiyanFormulaParser.LeftParen:
				case FeiyanFormulaParser.Star:
				case FeiyanFormulaParser.And:
				case FeiyanFormulaParser.AndAnd:
				case FeiyanFormulaParser.Doublecolon:
				case FeiyanFormulaParser.Semi:
				case FeiyanFormulaParser.Ellipsis:
				case FeiyanFormulaParser.Identifier:
					this.enterOuterAlt(localctx, 1);
					this.state = 768;
					this._errHandler.sync(this);
					var la_ = this._interp.adaptivePredict(this._input, 82, this._ctx);
					if (la_ === 1) {
						this.state = 767;
						this.declSpecifierSeq();

					}
					this.state = 771;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === FeiyanFormulaParser.Decltype || _la === FeiyanFormulaParser.Operator || ((((_la - 85)) & ~0x1f) == 0 && ((1 << (_la - 85)) & ((1 << (FeiyanFormulaParser.LeftParen - 85)) | (1 << (FeiyanFormulaParser.Star - 85)) | (1 << (FeiyanFormulaParser.And - 85)))) !== 0) || ((((_la - 118)) & ~0x1f) == 0 && ((1 << (_la - 118)) & ((1 << (FeiyanFormulaParser.AndAnd - 118)) | (1 << (FeiyanFormulaParser.Doublecolon - 118)) | (1 << (FeiyanFormulaParser.Ellipsis - 118)) | (1 << (FeiyanFormulaParser.Identifier - 118)))) !== 0)) {
						this.state = 770;
						this.initDeclaratorList();
					}

					this.state = 773;
					this.match(FeiyanFormulaParser.Semi);
					break;
				case FeiyanFormulaParser.Alignas:
				case FeiyanFormulaParser.LeftBracket:
					this.enterOuterAlt(localctx, 2);
					this.state = 774;
					this.attributeSpecifierSeq();
					this.state = 776;
					this._errHandler.sync(this);
					var la_ = this._interp.adaptivePredict(this._input, 84, this._ctx);
					if (la_ === 1) {
						this.state = 775;
						this.declSpecifierSeq();

					}
					this.state = 778;
					this.initDeclaratorList();
					this.state = 779;
					this.match(FeiyanFormulaParser.Semi);
					break;
				default:
					throw new antlr4.error.NoViableAltException(this);
			}
		} catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		} finally {
			this.exitRule();
		}
		return localctx;
	}



	declSpecifier() {
		let localctx = new DeclSpecifierContext(this, this._ctx, this.state);
		this.enterRule(localctx, 116, FeiyanFormulaParser.RULE_declSpecifier);
		try {
			this.state = 785;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
				case FeiyanFormulaParser.Auto:
				case FeiyanFormulaParser.Bool:
				case FeiyanFormulaParser.Char:
				case FeiyanFormulaParser.Char16:
				case FeiyanFormulaParser.Char32:
				case FeiyanFormulaParser.Const:
				case FeiyanFormulaParser.Decltype:
				case FeiyanFormulaParser.Double:
				case FeiyanFormulaParser.Enum:
				case FeiyanFormulaParser.Float:
				case FeiyanFormulaParser.Int:
				case FeiyanFormulaParser.Long:
				case FeiyanFormulaParser.Short:
				case FeiyanFormulaParser.Signed:
				case FeiyanFormulaParser.Unsigned:
				case FeiyanFormulaParser.Void:
				case FeiyanFormulaParser.Volatile:
				case FeiyanFormulaParser.Wchar:
				case FeiyanFormulaParser.Doublecolon:
				case FeiyanFormulaParser.Identifier:
					this.enterOuterAlt(localctx, 1);
					this.state = 783;
					this.typeSpecifier();
					break;
				case FeiyanFormulaParser.Explicit:
				case FeiyanFormulaParser.Inline:
				case FeiyanFormulaParser.Virtual:
					this.enterOuterAlt(localctx, 2);
					this.state = 784;
					this.functionSpecifier();
					break;
				default:
					throw new antlr4.error.NoViableAltException(this);
			}
		} catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		} finally {
			this.exitRule();
		}
		return localctx;
	}



	declSpecifierSeq() {
		let localctx = new DeclSpecifierSeqContext(this, this._ctx, this.state);
		this.enterRule(localctx, 118, FeiyanFormulaParser.RULE_declSpecifierSeq);
		try {
			this.enterOuterAlt(localctx, 1);
			this.state = 788;
			this._errHandler.sync(this);
			var _alt = 1 + 1;
			do {
				switch (_alt) {
					case 1 + 1:
						this.state = 787;
						this.declSpecifier();
						break;
					default:
						throw new antlr4.error.NoViableAltException(this);
				}
				this.state = 790;
				this._errHandler.sync(this);
				_alt = this._interp.adaptivePredict(this._input, 87, this._ctx);
			} while (_alt != 1 && _alt != antlr4.atn.ATN.INVALID_ALT_NUMBER);
			this.state = 793;
			this._errHandler.sync(this);
			var la_ = this._interp.adaptivePredict(this._input, 88, this._ctx);
			if (la_ === 1) {
				this.state = 792;
				this.attributeSpecifierSeq();

			}
		} catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		} finally {
			this.exitRule();
		}
		return localctx;
	}



	functionSpecifier() {
		let localctx = new FunctionSpecifierContext(this, this._ctx, this.state);
		this.enterRule(localctx, 120, FeiyanFormulaParser.RULE_functionSpecifier);
		var _la = 0; // Token type
		try {
			this.enterOuterAlt(localctx, 1);
			this.state = 795;
			_la = this._input.LA(1);
			if (!(_la === FeiyanFormulaParser.Explicit || _la === FeiyanFormulaParser.Inline || _la === FeiyanFormulaParser.Virtual)) {
				this._errHandler.recoverInline(this);
			}
			else {
				this._errHandler.reportMatch(this);
				this.consume();
			}
		} catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		} finally {
			this.exitRule();
		}
		return localctx;
	}



	typedefName() {
		let localctx = new TypedefNameContext(this, this._ctx, this.state);
		this.enterRule(localctx, 122, FeiyanFormulaParser.RULE_typedefName);
		try {
			this.enterOuterAlt(localctx, 1);
			this.state = 797;
			this.match(FeiyanFormulaParser.Identifier);
		} catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		} finally {
			this.exitRule();
		}
		return localctx;
	}



	typeSpecifier() {
		let localctx = new TypeSpecifierContext(this, this._ctx, this.state);
		this.enterRule(localctx, 124, FeiyanFormulaParser.RULE_typeSpecifier);
		try {
			this.state = 801;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
				case FeiyanFormulaParser.Auto:
				case FeiyanFormulaParser.Bool:
				case FeiyanFormulaParser.Char:
				case FeiyanFormulaParser.Char16:
				case FeiyanFormulaParser.Char32:
				case FeiyanFormulaParser.Const:
				case FeiyanFormulaParser.Decltype:
				case FeiyanFormulaParser.Double:
				case FeiyanFormulaParser.Float:
				case FeiyanFormulaParser.Int:
				case FeiyanFormulaParser.Long:
				case FeiyanFormulaParser.Short:
				case FeiyanFormulaParser.Signed:
				case FeiyanFormulaParser.Unsigned:
				case FeiyanFormulaParser.Void:
				case FeiyanFormulaParser.Volatile:
				case FeiyanFormulaParser.Wchar:
				case FeiyanFormulaParser.Doublecolon:
				case FeiyanFormulaParser.Identifier:
					this.enterOuterAlt(localctx, 1);
					this.state = 799;
					this.trailingTypeSpecifier();
					break;
				case FeiyanFormulaParser.Enum:
					this.enterOuterAlt(localctx, 2);
					this.state = 800;
					this.enumSpecifier();
					break;
				default:
					throw new antlr4.error.NoViableAltException(this);
			}
		} catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		} finally {
			this.exitRule();
		}
		return localctx;
	}



	trailingTypeSpecifier() {
		let localctx = new TrailingTypeSpecifierContext(this, this._ctx, this.state);
		this.enterRule(localctx, 126, FeiyanFormulaParser.RULE_trailingTypeSpecifier);
		try {
			this.state = 805;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
				case FeiyanFormulaParser.Auto:
				case FeiyanFormulaParser.Bool:
				case FeiyanFormulaParser.Char:
				case FeiyanFormulaParser.Char16:
				case FeiyanFormulaParser.Char32:
				case FeiyanFormulaParser.Decltype:
				case FeiyanFormulaParser.Double:
				case FeiyanFormulaParser.Float:
				case FeiyanFormulaParser.Int:
				case FeiyanFormulaParser.Long:
				case FeiyanFormulaParser.Short:
				case FeiyanFormulaParser.Signed:
				case FeiyanFormulaParser.Unsigned:
				case FeiyanFormulaParser.Void:
				case FeiyanFormulaParser.Wchar:
				case FeiyanFormulaParser.Doublecolon:
				case FeiyanFormulaParser.Identifier:
					this.enterOuterAlt(localctx, 1);
					this.state = 803;
					this.simpleTypeSpecifier();
					break;
				case FeiyanFormulaParser.Const:
				case FeiyanFormulaParser.Volatile:
					this.enterOuterAlt(localctx, 2);
					this.state = 804;
					this.cvQualifier();
					break;
				default:
					throw new antlr4.error.NoViableAltException(this);
			}
		} catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		} finally {
			this.exitRule();
		}
		return localctx;
	}



	typeSpecifierSeq() {
		let localctx = new TypeSpecifierSeqContext(this, this._ctx, this.state);
		this.enterRule(localctx, 128, FeiyanFormulaParser.RULE_typeSpecifierSeq);
		var _la = 0; // Token type
		try {
			this.enterOuterAlt(localctx, 1);
			this.state = 808;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				this.state = 807;
				this.typeSpecifier();
				this.state = 810;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while ((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << FeiyanFormulaParser.Auto) | (1 << FeiyanFormulaParser.Bool) | (1 << FeiyanFormulaParser.Char) | (1 << FeiyanFormulaParser.Char16) | (1 << FeiyanFormulaParser.Char32) | (1 << FeiyanFormulaParser.Const) | (1 << FeiyanFormulaParser.Decltype) | (1 << FeiyanFormulaParser.Double))) !== 0) || ((((_la - 33)) & ~0x1f) == 0 && ((1 << (_la - 33)) & ((1 << (FeiyanFormulaParser.Enum - 33)) | (1 << (FeiyanFormulaParser.Float - 33)) | (1 << (FeiyanFormulaParser.Int - 33)) | (1 << (FeiyanFormulaParser.Long - 33)) | (1 << (FeiyanFormulaParser.Short - 33)) | (1 << (FeiyanFormulaParser.Signed - 33)))) !== 0) || ((((_la - 78)) & ~0x1f) == 0 && ((1 << (_la - 78)) & ((1 << (FeiyanFormulaParser.Unsigned - 78)) | (1 << (FeiyanFormulaParser.Void - 78)) | (1 << (FeiyanFormulaParser.Volatile - 78)) | (1 << (FeiyanFormulaParser.Wchar - 78)))) !== 0) || _la === FeiyanFormulaParser.Doublecolon || _la === FeiyanFormulaParser.Identifier);
			this.state = 813;
			this._errHandler.sync(this);
			var la_ = this._interp.adaptivePredict(this._input, 92, this._ctx);
			if (la_ === 1) {
				this.state = 812;
				this.attributeSpecifierSeq();

			}
		} catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		} finally {
			this.exitRule();
		}
		return localctx;
	}



	trailingTypeSpecifierSeq() {
		let localctx = new TrailingTypeSpecifierSeqContext(this, this._ctx, this.state);
		this.enterRule(localctx, 130, FeiyanFormulaParser.RULE_trailingTypeSpecifierSeq);
		var _la = 0; // Token type
		try {
			this.enterOuterAlt(localctx, 1);
			this.state = 816;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				this.state = 815;
				this.trailingTypeSpecifier();
				this.state = 818;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while ((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << FeiyanFormulaParser.Auto) | (1 << FeiyanFormulaParser.Bool) | (1 << FeiyanFormulaParser.Char) | (1 << FeiyanFormulaParser.Char16) | (1 << FeiyanFormulaParser.Char32) | (1 << FeiyanFormulaParser.Const) | (1 << FeiyanFormulaParser.Decltype) | (1 << FeiyanFormulaParser.Double))) !== 0) || ((((_la - 39)) & ~0x1f) == 0 && ((1 << (_la - 39)) & ((1 << (FeiyanFormulaParser.Float - 39)) | (1 << (FeiyanFormulaParser.Int - 39)) | (1 << (FeiyanFormulaParser.Long - 39)) | (1 << (FeiyanFormulaParser.Short - 39)) | (1 << (FeiyanFormulaParser.Signed - 39)))) !== 0) || ((((_la - 78)) & ~0x1f) == 0 && ((1 << (_la - 78)) & ((1 << (FeiyanFormulaParser.Unsigned - 78)) | (1 << (FeiyanFormulaParser.Void - 78)) | (1 << (FeiyanFormulaParser.Volatile - 78)) | (1 << (FeiyanFormulaParser.Wchar - 78)))) !== 0) || _la === FeiyanFormulaParser.Doublecolon || _la === FeiyanFormulaParser.Identifier);
			this.state = 821;
			this._errHandler.sync(this);
			var la_ = this._interp.adaptivePredict(this._input, 94, this._ctx);
			if (la_ === 1) {
				this.state = 820;
				this.attributeSpecifierSeq();

			}
		} catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		} finally {
			this.exitRule();
		}
		return localctx;
	}



	simpleTypeLengthModifier() {
		let localctx = new SimpleTypeLengthModifierContext(this, this._ctx, this.state);
		this.enterRule(localctx, 132, FeiyanFormulaParser.RULE_simpleTypeLengthModifier);
		var _la = 0; // Token type
		try {
			this.enterOuterAlt(localctx, 1);
			this.state = 823;
			_la = this._input.LA(1);
			if (!(_la === FeiyanFormulaParser.Long || _la === FeiyanFormulaParser.Short)) {
				this._errHandler.recoverInline(this);
			}
			else {
				this._errHandler.reportMatch(this);
				this.consume();
			}
		} catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		} finally {
			this.exitRule();
		}
		return localctx;
	}



	simpleTypeSignednessModifier() {
		let localctx = new SimpleTypeSignednessModifierContext(this, this._ctx, this.state);
		this.enterRule(localctx, 134, FeiyanFormulaParser.RULE_simpleTypeSignednessModifier);
		var _la = 0; // Token type
		try {
			this.enterOuterAlt(localctx, 1);
			this.state = 825;
			_la = this._input.LA(1);
			if (!(_la === FeiyanFormulaParser.Signed || _la === FeiyanFormulaParser.Unsigned)) {
				this._errHandler.recoverInline(this);
			}
			else {
				this._errHandler.reportMatch(this);
				this.consume();
			}
		} catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		} finally {
			this.exitRule();
		}
		return localctx;
	}



	simpleTypeSpecifier() {
		let localctx = new SimpleTypeSpecifierContext(this, this._ctx, this.state);
		this.enterRule(localctx, 136, FeiyanFormulaParser.RULE_simpleTypeSpecifier);
		var _la = 0; // Token type
		try {
			this.state = 874;
			this._errHandler.sync(this);
			var la_ = this._interp.adaptivePredict(this._input, 105, this._ctx);
			switch (la_) {
				case 1:
					this.enterOuterAlt(localctx, 1);
					this.state = 828;
					this._errHandler.sync(this);
					var la_ = this._interp.adaptivePredict(this._input, 95, this._ctx);
					if (la_ === 1) {
						this.state = 827;
						this.nestedNameSpecifier(0);

					}
					this.state = 830;
					this.theTypeName();
					break;

				case 2:
					this.enterOuterAlt(localctx, 2);
					this.state = 831;
					this.simpleTypeSignednessModifier();
					break;

				case 3:
					this.enterOuterAlt(localctx, 3);
					this.state = 833;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === FeiyanFormulaParser.Signed || _la === FeiyanFormulaParser.Unsigned) {
						this.state = 832;
						this.simpleTypeSignednessModifier();
					}

					this.state = 836;
					this._errHandler.sync(this);
					var _alt = 1;
					do {
						switch (_alt) {
							case 1:
								this.state = 835;
								this.simpleTypeLengthModifier();
								break;
							default:
								throw new antlr4.error.NoViableAltException(this);
						}
						this.state = 838;
						this._errHandler.sync(this);
						_alt = this._interp.adaptivePredict(this._input, 97, this._ctx);
					} while (_alt != 2 && _alt != antlr4.atn.ATN.INVALID_ALT_NUMBER);
					break;

				case 4:
					this.enterOuterAlt(localctx, 4);
					this.state = 841;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === FeiyanFormulaParser.Signed || _la === FeiyanFormulaParser.Unsigned) {
						this.state = 840;
						this.simpleTypeSignednessModifier();
					}

					this.state = 843;
					this.match(FeiyanFormulaParser.Char);
					break;

				case 5:
					this.enterOuterAlt(localctx, 5);
					this.state = 845;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === FeiyanFormulaParser.Signed || _la === FeiyanFormulaParser.Unsigned) {
						this.state = 844;
						this.simpleTypeSignednessModifier();
					}

					this.state = 847;
					this.match(FeiyanFormulaParser.Char16);
					break;

				case 6:
					this.enterOuterAlt(localctx, 6);
					this.state = 849;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === FeiyanFormulaParser.Signed || _la === FeiyanFormulaParser.Unsigned) {
						this.state = 848;
						this.simpleTypeSignednessModifier();
					}

					this.state = 851;
					this.match(FeiyanFormulaParser.Char32);
					break;

				case 7:
					this.enterOuterAlt(localctx, 7);
					this.state = 853;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === FeiyanFormulaParser.Signed || _la === FeiyanFormulaParser.Unsigned) {
						this.state = 852;
						this.simpleTypeSignednessModifier();
					}

					this.state = 855;
					this.match(FeiyanFormulaParser.Wchar);
					break;

				case 8:
					this.enterOuterAlt(localctx, 8);
					this.state = 856;
					this.match(FeiyanFormulaParser.Bool);
					break;

				case 9:
					this.enterOuterAlt(localctx, 9);
					this.state = 858;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === FeiyanFormulaParser.Signed || _la === FeiyanFormulaParser.Unsigned) {
						this.state = 857;
						this.simpleTypeSignednessModifier();
					}

					this.state = 863;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					while (_la === FeiyanFormulaParser.Long || _la === FeiyanFormulaParser.Short) {
						this.state = 860;
						this.simpleTypeLengthModifier();
						this.state = 865;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					}
					this.state = 866;
					this.match(FeiyanFormulaParser.Int);
					break;

				case 10:
					this.enterOuterAlt(localctx, 10);
					this.state = 867;
					this.match(FeiyanFormulaParser.Float);
					break;

				case 11:
					this.enterOuterAlt(localctx, 11);
					this.state = 869;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === FeiyanFormulaParser.Long || _la === FeiyanFormulaParser.Short) {
						this.state = 868;
						this.simpleTypeLengthModifier();
					}

					this.state = 871;
					this.match(FeiyanFormulaParser.Double);
					break;

				case 12:
					this.enterOuterAlt(localctx, 12);
					this.state = 872;
					this.match(FeiyanFormulaParser.Void);
					break;

				case 13:
					this.enterOuterAlt(localctx, 13);
					this.state = 873;
					this.match(FeiyanFormulaParser.Auto);
					break;

			}
		} catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		} finally {
			this.exitRule();
		}
		return localctx;
	}



	theTypeName() {
		let localctx = new TheTypeNameContext(this, this._ctx, this.state);
		this.enterRule(localctx, 138, FeiyanFormulaParser.RULE_theTypeName);
		try {
			this.state = 880;
			this._errHandler.sync(this);
			var la_ = this._interp.adaptivePredict(this._input, 106, this._ctx);
			switch (la_) {
				case 1:
					this.enterOuterAlt(localctx, 1);
					this.state = 876;
					this.className();
					break;

				case 2:
					this.enterOuterAlt(localctx, 2);
					this.state = 877;
					this.enumName();
					break;

				case 3:
					this.enterOuterAlt(localctx, 3);
					this.state = 878;
					this.typedefName();
					break;

				case 4:
					this.enterOuterAlt(localctx, 4);
					this.state = 879;
					this.simpleTemplateId();
					break;

			}
		} catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		} finally {
			this.exitRule();
		}
		return localctx;
	}



	decltypeSpecifier() {
		let localctx = new DecltypeSpecifierContext(this, this._ctx, this.state);
		this.enterRule(localctx, 140, FeiyanFormulaParser.RULE_decltypeSpecifier);
		try {
			this.enterOuterAlt(localctx, 1);
			this.state = 882;
			this.match(FeiyanFormulaParser.Decltype);
			this.state = 883;
			this.match(FeiyanFormulaParser.LeftParen);
			this.state = 886;
			this._errHandler.sync(this);
			var la_ = this._interp.adaptivePredict(this._input, 107, this._ctx);
			switch (la_) {
				case 1:
					this.state = 884;
					this.expression();
					break;

				case 2:
					this.state = 885;
					this.match(FeiyanFormulaParser.Auto);
					break;

			}
			this.state = 888;
			this.match(FeiyanFormulaParser.RightParen);
		} catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		} finally {
			this.exitRule();
		}
		return localctx;
	}



	enumName() {
		let localctx = new EnumNameContext(this, this._ctx, this.state);
		this.enterRule(localctx, 142, FeiyanFormulaParser.RULE_enumName);
		try {
			this.enterOuterAlt(localctx, 1);
			this.state = 890;
			this.match(FeiyanFormulaParser.Identifier);
		} catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		} finally {
			this.exitRule();
		}
		return localctx;
	}



	enumSpecifier() {
		let localctx = new EnumSpecifierContext(this, this._ctx, this.state);
		this.enterRule(localctx, 144, FeiyanFormulaParser.RULE_enumSpecifier);
		var _la = 0; // Token type
		try {
			this.enterOuterAlt(localctx, 1);
			this.state = 892;
			this.enumHead();
			this.state = 893;
			this.match(FeiyanFormulaParser.LeftBrace);
			this.state = 898;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === FeiyanFormulaParser.Identifier) {
				this.state = 894;
				this.enumeratorList();
				this.state = 896;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === FeiyanFormulaParser.Comma) {
					this.state = 895;
					this.match(FeiyanFormulaParser.Comma);
				}

			}

			this.state = 900;
			this.match(FeiyanFormulaParser.RightBrace);
		} catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		} finally {
			this.exitRule();
		}
		return localctx;
	}



	enumHead() {
		let localctx = new EnumHeadContext(this, this._ctx, this.state);
		this.enterRule(localctx, 146, FeiyanFormulaParser.RULE_enumHead);
		var _la = 0; // Token type
		try {
			this.enterOuterAlt(localctx, 1);
			this.state = 902;
			this.enumkey();
			this.state = 904;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === FeiyanFormulaParser.Alignas || _la === FeiyanFormulaParser.LeftBracket) {
				this.state = 903;
				this.attributeSpecifierSeq();
			}

			this.state = 907;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === FeiyanFormulaParser.Identifier) {
				this.state = 906;
				this.match(FeiyanFormulaParser.Identifier);
			}

			this.state = 910;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === FeiyanFormulaParser.Colon) {
				this.state = 909;
				this.enumbase();
			}

		} catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		} finally {
			this.exitRule();
		}
		return localctx;
	}



	opaqueEnumDeclaration() {
		let localctx = new OpaqueEnumDeclarationContext(this, this._ctx, this.state);
		this.enterRule(localctx, 148, FeiyanFormulaParser.RULE_opaqueEnumDeclaration);
		var _la = 0; // Token type
		try {
			this.enterOuterAlt(localctx, 1);
			this.state = 912;
			this.enumkey();
			this.state = 914;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === FeiyanFormulaParser.Alignas || _la === FeiyanFormulaParser.LeftBracket) {
				this.state = 913;
				this.attributeSpecifierSeq();
			}

			this.state = 916;
			this.match(FeiyanFormulaParser.Identifier);
			this.state = 918;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === FeiyanFormulaParser.Colon) {
				this.state = 917;
				this.enumbase();
			}

			this.state = 920;
			this.match(FeiyanFormulaParser.Semi);
		} catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		} finally {
			this.exitRule();
		}
		return localctx;
	}



	enumkey() {
		let localctx = new EnumkeyContext(this, this._ctx, this.state);
		this.enterRule(localctx, 150, FeiyanFormulaParser.RULE_enumkey);
		var _la = 0; // Token type
		try {
			this.enterOuterAlt(localctx, 1);
			this.state = 922;
			this.match(FeiyanFormulaParser.Enum);
			this.state = 924;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === FeiyanFormulaParser.Class || _la === FeiyanFormulaParser.Struct) {
				this.state = 923;
				_la = this._input.LA(1);
				if (!(_la === FeiyanFormulaParser.Class || _la === FeiyanFormulaParser.Struct)) {
					this._errHandler.recoverInline(this);
				}
				else {
					this._errHandler.reportMatch(this);
					this.consume();
				}
			}

		} catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		} finally {
			this.exitRule();
		}
		return localctx;
	}



	enumbase() {
		let localctx = new EnumbaseContext(this, this._ctx, this.state);
		this.enterRule(localctx, 152, FeiyanFormulaParser.RULE_enumbase);
		try {
			this.enterOuterAlt(localctx, 1);
			this.state = 926;
			this.match(FeiyanFormulaParser.Colon);
			this.state = 927;
			this.typeSpecifierSeq();
		} catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		} finally {
			this.exitRule();
		}
		return localctx;
	}



	enumeratorList() {
		let localctx = new EnumeratorListContext(this, this._ctx, this.state);
		this.enterRule(localctx, 154, FeiyanFormulaParser.RULE_enumeratorList);
		try {
			this.enterOuterAlt(localctx, 1);
			this.state = 929;
			this.enumeratorDefinition();
			this.state = 934;
			this._errHandler.sync(this);
			var _alt = this._interp.adaptivePredict(this._input, 116, this._ctx)
			while (_alt != 2 && _alt != antlr4.atn.ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					this.state = 930;
					this.match(FeiyanFormulaParser.Comma);
					this.state = 931;
					this.enumeratorDefinition();
				}
				this.state = 936;
				this._errHandler.sync(this);
				_alt = this._interp.adaptivePredict(this._input, 116, this._ctx);
			}

		} catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		} finally {
			this.exitRule();
		}
		return localctx;
	}



	enumeratorDefinition() {
		let localctx = new EnumeratorDefinitionContext(this, this._ctx, this.state);
		this.enterRule(localctx, 156, FeiyanFormulaParser.RULE_enumeratorDefinition);
		var _la = 0; // Token type
		try {
			this.enterOuterAlt(localctx, 1);
			this.state = 937;
			this.enumerator();
			this.state = 940;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === FeiyanFormulaParser.Assign) {
				this.state = 938;
				this.match(FeiyanFormulaParser.Assign);
				this.state = 939;
				this.constantExpression();
			}

		} catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		} finally {
			this.exitRule();
		}
		return localctx;
	}



	enumerator() {
		let localctx = new EnumeratorContext(this, this._ctx, this.state);
		this.enterRule(localctx, 158, FeiyanFormulaParser.RULE_enumerator);
		try {
			this.enterOuterAlt(localctx, 1);
			this.state = 942;
			this.match(FeiyanFormulaParser.Identifier);
		} catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		} finally {
			this.exitRule();
		}
		return localctx;
	}



	namespaceName() {
		let localctx = new NamespaceNameContext(this, this._ctx, this.state);
		this.enterRule(localctx, 160, FeiyanFormulaParser.RULE_namespaceName);
		try {
			this.state = 946;
			this._errHandler.sync(this);
			var la_ = this._interp.adaptivePredict(this._input, 118, this._ctx);
			switch (la_) {
				case 1:
					this.enterOuterAlt(localctx, 1);
					this.state = 944;
					this.originalNamespaceName();
					break;

				case 2:
					this.enterOuterAlt(localctx, 2);
					this.state = 945;
					this.namespaceAlias();
					break;

			}
		} catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		} finally {
			this.exitRule();
		}
		return localctx;
	}



	originalNamespaceName() {
		let localctx = new OriginalNamespaceNameContext(this, this._ctx, this.state);
		this.enterRule(localctx, 162, FeiyanFormulaParser.RULE_originalNamespaceName);
		try {
			this.enterOuterAlt(localctx, 1);
			this.state = 948;
			this.match(FeiyanFormulaParser.Identifier);
		} catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		} finally {
			this.exitRule();
		}
		return localctx;
	}



	namespaceAlias() {
		let localctx = new NamespaceAliasContext(this, this._ctx, this.state);
		this.enterRule(localctx, 164, FeiyanFormulaParser.RULE_namespaceAlias);
		try {
			this.enterOuterAlt(localctx, 1);
			this.state = 950;
			this.match(FeiyanFormulaParser.Identifier);
		} catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		} finally {
			this.exitRule();
		}
		return localctx;
	}



	attributeSpecifierSeq() {
		let localctx = new AttributeSpecifierSeqContext(this, this._ctx, this.state);
		this.enterRule(localctx, 166, FeiyanFormulaParser.RULE_attributeSpecifierSeq);
		try {
			this.enterOuterAlt(localctx, 1);
			this.state = 953;
			this._errHandler.sync(this);
			var _alt = 1;
			do {
				switch (_alt) {
					case 1:
						this.state = 952;
						this.attributeSpecifier();
						break;
					default:
						throw new antlr4.error.NoViableAltException(this);
				}
				this.state = 955;
				this._errHandler.sync(this);
				_alt = this._interp.adaptivePredict(this._input, 119, this._ctx);
			} while (_alt != 2 && _alt != antlr4.atn.ATN.INVALID_ALT_NUMBER);
		} catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		} finally {
			this.exitRule();
		}
		return localctx;
	}



	attributeSpecifier() {
		let localctx = new AttributeSpecifierContext(this, this._ctx, this.state);
		this.enterRule(localctx, 168, FeiyanFormulaParser.RULE_attributeSpecifier);
		var _la = 0; // Token type
		try {
			this.state = 965;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
				case FeiyanFormulaParser.LeftBracket:
					this.enterOuterAlt(localctx, 1);
					this.state = 957;
					this.match(FeiyanFormulaParser.LeftBracket);
					this.state = 958;
					this.match(FeiyanFormulaParser.LeftBracket);
					this.state = 960;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === FeiyanFormulaParser.Identifier) {
						this.state = 959;
						this.attributeList();
					}

					this.state = 962;
					this.match(FeiyanFormulaParser.RightBracket);
					this.state = 963;
					this.match(FeiyanFormulaParser.RightBracket);
					break;
				case FeiyanFormulaParser.Alignas:
					this.enterOuterAlt(localctx, 2);
					this.state = 964;
					this.alignmentspecifier();
					break;
				default:
					throw new antlr4.error.NoViableAltException(this);
			}
		} catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		} finally {
			this.exitRule();
		}
		return localctx;
	}



	alignmentspecifier() {
		let localctx = new AlignmentspecifierContext(this, this._ctx, this.state);
		this.enterRule(localctx, 170, FeiyanFormulaParser.RULE_alignmentspecifier);
		var _la = 0; // Token type
		try {
			this.enterOuterAlt(localctx, 1);
			this.state = 967;
			this.match(FeiyanFormulaParser.Alignas);
			this.state = 968;
			this.match(FeiyanFormulaParser.LeftParen);
			this.state = 971;
			this._errHandler.sync(this);
			var la_ = this._interp.adaptivePredict(this._input, 122, this._ctx);
			switch (la_) {
				case 1:
					this.state = 969;
					this.theTypeId();
					break;

				case 2:
					this.state = 970;
					this.constantExpression();
					break;

			}
			this.state = 974;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === FeiyanFormulaParser.Ellipsis) {
				this.state = 973;
				this.match(FeiyanFormulaParser.Ellipsis);
			}

			this.state = 976;
			this.match(FeiyanFormulaParser.RightParen);
		} catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		} finally {
			this.exitRule();
		}
		return localctx;
	}



	attributeList() {
		let localctx = new AttributeListContext(this, this._ctx, this.state);
		this.enterRule(localctx, 172, FeiyanFormulaParser.RULE_attributeList);
		var _la = 0; // Token type
		try {
			this.enterOuterAlt(localctx, 1);
			this.state = 978;
			this.attribute();
			this.state = 983;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === FeiyanFormulaParser.Comma) {
				this.state = 979;
				this.match(FeiyanFormulaParser.Comma);
				this.state = 980;
				this.attribute();
				this.state = 985;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 987;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === FeiyanFormulaParser.Ellipsis) {
				this.state = 986;
				this.match(FeiyanFormulaParser.Ellipsis);
			}

		} catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		} finally {
			this.exitRule();
		}
		return localctx;
	}



	attribute() {
		let localctx = new AttributeContext(this, this._ctx, this.state);
		this.enterRule(localctx, 174, FeiyanFormulaParser.RULE_attribute);
		var _la = 0; // Token type
		try {
			this.enterOuterAlt(localctx, 1);
			this.state = 992;
			this._errHandler.sync(this);
			var la_ = this._interp.adaptivePredict(this._input, 126, this._ctx);
			if (la_ === 1) {
				this.state = 989;
				this.attributeNamespace();
				this.state = 990;
				this.match(FeiyanFormulaParser.Doublecolon);

			}
			this.state = 994;
			this.match(FeiyanFormulaParser.Identifier);
			this.state = 996;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === FeiyanFormulaParser.LeftParen) {
				this.state = 995;
				this.attributeArgumentClause();
			}

		} catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		} finally {
			this.exitRule();
		}
		return localctx;
	}



	attributeNamespace() {
		let localctx = new AttributeNamespaceContext(this, this._ctx, this.state);
		this.enterRule(localctx, 176, FeiyanFormulaParser.RULE_attributeNamespace);
		try {
			this.enterOuterAlt(localctx, 1);
			this.state = 998;
			this.match(FeiyanFormulaParser.Identifier);
		} catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		} finally {
			this.exitRule();
		}
		return localctx;
	}



	attributeArgumentClause() {
		let localctx = new AttributeArgumentClauseContext(this, this._ctx, this.state);
		this.enterRule(localctx, 178, FeiyanFormulaParser.RULE_attributeArgumentClause);
		var _la = 0; // Token type
		try {
			this.enterOuterAlt(localctx, 1);
			this.state = 1000;
			this.match(FeiyanFormulaParser.LeftParen);
			this.state = 1002;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if ((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << FeiyanFormulaParser.IntegerLiteral) | (1 << FeiyanFormulaParser.CharacterLiteral) | (1 << FeiyanFormulaParser.FloatingLiteral) | (1 << FeiyanFormulaParser.StringLiteral) | (1 << FeiyanFormulaParser.BooleanLiteral) | (1 << FeiyanFormulaParser.PointerLiteral) | (1 << FeiyanFormulaParser.UserDefinedLiteral) | (1 << FeiyanFormulaParser.MultiLineMacro) | (1 << FeiyanFormulaParser.Directive) | (1 << FeiyanFormulaParser.Alignas) | (1 << FeiyanFormulaParser.Alignof) | (1 << FeiyanFormulaParser.Asm) | (1 << FeiyanFormulaParser.Auto) | (1 << FeiyanFormulaParser.Bool) | (1 << FeiyanFormulaParser.Break) | (1 << FeiyanFormulaParser.Case) | (1 << FeiyanFormulaParser.Catch) | (1 << FeiyanFormulaParser.Char) | (1 << FeiyanFormulaParser.Char16) | (1 << FeiyanFormulaParser.Char32) | (1 << FeiyanFormulaParser.Class) | (1 << FeiyanFormulaParser.Const) | (1 << FeiyanFormulaParser.Constexpr) | (1 << FeiyanFormulaParser.Const_cast) | (1 << FeiyanFormulaParser.Continue) | (1 << FeiyanFormulaParser.Decltype) | (1 << FeiyanFormulaParser.Default) | (1 << FeiyanFormulaParser.Delete) | (1 << FeiyanFormulaParser.Do) | (1 << FeiyanFormulaParser.Double) | (1 << FeiyanFormulaParser.Dynamic_cast))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (FeiyanFormulaParser.Else - 32)) | (1 << (FeiyanFormulaParser.Enum - 32)) | (1 << (FeiyanFormulaParser.Explicit - 32)) | (1 << (FeiyanFormulaParser.Export - 32)) | (1 << (FeiyanFormulaParser.Extern - 32)) | (1 << (FeiyanFormulaParser.False_ - 32)) | (1 << (FeiyanFormulaParser.Final - 32)) | (1 << (FeiyanFormulaParser.Float - 32)) | (1 << (FeiyanFormulaParser.For - 32)) | (1 << (FeiyanFormulaParser.Friend - 32)) | (1 << (FeiyanFormulaParser.Goto - 32)) | (1 << (FeiyanFormulaParser.If - 32)) | (1 << (FeiyanFormulaParser.Inline - 32)) | (1 << (FeiyanFormulaParser.Int - 32)) | (1 << (FeiyanFormulaParser.Long - 32)) | (1 << (FeiyanFormulaParser.Mutable - 32)) | (1 << (FeiyanFormulaParser.Namespace - 32)) | (1 << (FeiyanFormulaParser.New - 32)) | (1 << (FeiyanFormulaParser.Noexcept - 32)) | (1 << (FeiyanFormulaParser.Nullptr - 32)) | (1 << (FeiyanFormulaParser.Operator - 32)) | (1 << (FeiyanFormulaParser.Override - 32)) | (1 << (FeiyanFormulaParser.Private - 32)) | (1 << (FeiyanFormulaParser.Protected - 32)) | (1 << (FeiyanFormulaParser.Public - 32)) | (1 << (FeiyanFormulaParser.Register - 32)) | (1 << (FeiyanFormulaParser.Reinterpret_cast - 32)) | (1 << (FeiyanFormulaParser.Return - 32)) | (1 << (FeiyanFormulaParser.Short - 32)) | (1 << (FeiyanFormulaParser.Signed - 32)) | (1 << (FeiyanFormulaParser.Sizeof - 32)) | (1 << (FeiyanFormulaParser.Static - 32)))) !== 0) || ((((_la - 64)) & ~0x1f) == 0 && ((1 << (_la - 64)) & ((1 << (FeiyanFormulaParser.Static_assert - 64)) | (1 << (FeiyanFormulaParser.Static_cast - 64)) | (1 << (FeiyanFormulaParser.Struct - 64)) | (1 << (FeiyanFormulaParser.Switch - 64)) | (1 << (FeiyanFormulaParser.Template - 64)) | (1 << (FeiyanFormulaParser.This - 64)) | (1 << (FeiyanFormulaParser.Thread_local - 64)) | (1 << (FeiyanFormulaParser.Throw - 64)) | (1 << (FeiyanFormulaParser.True_ - 64)) | (1 << (FeiyanFormulaParser.Try - 64)) | (1 << (FeiyanFormulaParser.Typedef - 64)) | (1 << (FeiyanFormulaParser.Typeid_ - 64)) | (1 << (FeiyanFormulaParser.Typename_ - 64)) | (1 << (FeiyanFormulaParser.Union - 64)) | (1 << (FeiyanFormulaParser.Unsigned - 64)) | (1 << (FeiyanFormulaParser.Using - 64)) | (1 << (FeiyanFormulaParser.Virtual - 64)) | (1 << (FeiyanFormulaParser.Void - 64)) | (1 << (FeiyanFormulaParser.Volatile - 64)) | (1 << (FeiyanFormulaParser.Wchar - 64)) | (1 << (FeiyanFormulaParser.While - 64)) | (1 << (FeiyanFormulaParser.LeftParen - 64)) | (1 << (FeiyanFormulaParser.LeftBracket - 64)) | (1 << (FeiyanFormulaParser.LeftBrace - 64)) | (1 << (FeiyanFormulaParser.Plus - 64)) | (1 << (FeiyanFormulaParser.Minus - 64)) | (1 << (FeiyanFormulaParser.Star - 64)) | (1 << (FeiyanFormulaParser.Div - 64)) | (1 << (FeiyanFormulaParser.Mod - 64)))) !== 0) || ((((_la - 96)) & ~0x1f) == 0 && ((1 << (_la - 96)) & ((1 << (FeiyanFormulaParser.Caret - 96)) | (1 << (FeiyanFormulaParser.And - 96)) | (1 << (FeiyanFormulaParser.Or - 96)) | (1 << (FeiyanFormulaParser.Tilde - 96)) | (1 << (FeiyanFormulaParser.Not - 96)) | (1 << (FeiyanFormulaParser.Assign - 96)) | (1 << (FeiyanFormulaParser.Less - 96)) | (1 << (FeiyanFormulaParser.Greater - 96)) | (1 << (FeiyanFormulaParser.PlusAssign - 96)) | (1 << (FeiyanFormulaParser.MinusAssign - 96)) | (1 << (FeiyanFormulaParser.StarAssign - 96)) | (1 << (FeiyanFormulaParser.DivAssign - 96)) | (1 << (FeiyanFormulaParser.ModAssign - 96)) | (1 << (FeiyanFormulaParser.XorAssign - 96)) | (1 << (FeiyanFormulaParser.AndAssign - 96)) | (1 << (FeiyanFormulaParser.OrAssign - 96)) | (1 << (FeiyanFormulaParser.LeftShiftAssign - 96)) | (1 << (FeiyanFormulaParser.RightShiftAssign - 96)) | (1 << (FeiyanFormulaParser.Equal - 96)) | (1 << (FeiyanFormulaParser.NotEqual - 96)) | (1 << (FeiyanFormulaParser.LessEqual - 96)) | (1 << (FeiyanFormulaParser.GreaterEqual - 96)) | (1 << (FeiyanFormulaParser.AndAnd - 96)) | (1 << (FeiyanFormulaParser.OrOr - 96)) | (1 << (FeiyanFormulaParser.PlusPlus - 96)) | (1 << (FeiyanFormulaParser.MinusMinus - 96)) | (1 << (FeiyanFormulaParser.Comma - 96)) | (1 << (FeiyanFormulaParser.ArrowStar - 96)) | (1 << (FeiyanFormulaParser.Arrow - 96)) | (1 << (FeiyanFormulaParser.Question - 96)) | (1 << (FeiyanFormulaParser.Colon - 96)) | (1 << (FeiyanFormulaParser.Doublecolon - 96)))) !== 0) || ((((_la - 128)) & ~0x1f) == 0 && ((1 << (_la - 128)) & ((1 << (FeiyanFormulaParser.Semi - 128)) | (1 << (FeiyanFormulaParser.Dot - 128)) | (1 << (FeiyanFormulaParser.DotStar - 128)) | (1 << (FeiyanFormulaParser.Ellipsis - 128)) | (1 << (FeiyanFormulaParser.Identifier - 128)) | (1 << (FeiyanFormulaParser.DecimalLiteral - 128)) | (1 << (FeiyanFormulaParser.OctalLiteral - 128)) | (1 << (FeiyanFormulaParser.HexadecimalLiteral - 128)) | (1 << (FeiyanFormulaParser.BinaryLiteral - 128)) | (1 << (FeiyanFormulaParser.Integersuffix - 128)) | (1 << (FeiyanFormulaParser.UserDefinedIntegerLiteral - 128)) | (1 << (FeiyanFormulaParser.UserDefinedFloatingLiteral - 128)) | (1 << (FeiyanFormulaParser.UserDefinedStringLiteral - 128)) | (1 << (FeiyanFormulaParser.UserDefinedCharacterLiteral - 128)) | (1 << (FeiyanFormulaParser.Whitespace - 128)) | (1 << (FeiyanFormulaParser.Newline - 128)) | (1 << (FeiyanFormulaParser.BlockComment - 128)) | (1 << (FeiyanFormulaParser.LineComment - 128)))) !== 0)) {
				this.state = 1001;
				this.balancedTokenSeq();
			}

			this.state = 1004;
			this.match(FeiyanFormulaParser.RightParen);
		} catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		} finally {
			this.exitRule();
		}
		return localctx;
	}



	balancedTokenSeq() {
		let localctx = new BalancedTokenSeqContext(this, this._ctx, this.state);
		this.enterRule(localctx, 180, FeiyanFormulaParser.RULE_balancedTokenSeq);
		var _la = 0; // Token type
		try {
			this.enterOuterAlt(localctx, 1);
			this.state = 1007;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				this.state = 1006;
				this.balancedtoken();
				this.state = 1009;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while ((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << FeiyanFormulaParser.IntegerLiteral) | (1 << FeiyanFormulaParser.CharacterLiteral) | (1 << FeiyanFormulaParser.FloatingLiteral) | (1 << FeiyanFormulaParser.StringLiteral) | (1 << FeiyanFormulaParser.BooleanLiteral) | (1 << FeiyanFormulaParser.PointerLiteral) | (1 << FeiyanFormulaParser.UserDefinedLiteral) | (1 << FeiyanFormulaParser.MultiLineMacro) | (1 << FeiyanFormulaParser.Directive) | (1 << FeiyanFormulaParser.Alignas) | (1 << FeiyanFormulaParser.Alignof) | (1 << FeiyanFormulaParser.Asm) | (1 << FeiyanFormulaParser.Auto) | (1 << FeiyanFormulaParser.Bool) | (1 << FeiyanFormulaParser.Break) | (1 << FeiyanFormulaParser.Case) | (1 << FeiyanFormulaParser.Catch) | (1 << FeiyanFormulaParser.Char) | (1 << FeiyanFormulaParser.Char16) | (1 << FeiyanFormulaParser.Char32) | (1 << FeiyanFormulaParser.Class) | (1 << FeiyanFormulaParser.Const) | (1 << FeiyanFormulaParser.Constexpr) | (1 << FeiyanFormulaParser.Const_cast) | (1 << FeiyanFormulaParser.Continue) | (1 << FeiyanFormulaParser.Decltype) | (1 << FeiyanFormulaParser.Default) | (1 << FeiyanFormulaParser.Delete) | (1 << FeiyanFormulaParser.Do) | (1 << FeiyanFormulaParser.Double) | (1 << FeiyanFormulaParser.Dynamic_cast))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (FeiyanFormulaParser.Else - 32)) | (1 << (FeiyanFormulaParser.Enum - 32)) | (1 << (FeiyanFormulaParser.Explicit - 32)) | (1 << (FeiyanFormulaParser.Export - 32)) | (1 << (FeiyanFormulaParser.Extern - 32)) | (1 << (FeiyanFormulaParser.False_ - 32)) | (1 << (FeiyanFormulaParser.Final - 32)) | (1 << (FeiyanFormulaParser.Float - 32)) | (1 << (FeiyanFormulaParser.For - 32)) | (1 << (FeiyanFormulaParser.Friend - 32)) | (1 << (FeiyanFormulaParser.Goto - 32)) | (1 << (FeiyanFormulaParser.If - 32)) | (1 << (FeiyanFormulaParser.Inline - 32)) | (1 << (FeiyanFormulaParser.Int - 32)) | (1 << (FeiyanFormulaParser.Long - 32)) | (1 << (FeiyanFormulaParser.Mutable - 32)) | (1 << (FeiyanFormulaParser.Namespace - 32)) | (1 << (FeiyanFormulaParser.New - 32)) | (1 << (FeiyanFormulaParser.Noexcept - 32)) | (1 << (FeiyanFormulaParser.Nullptr - 32)) | (1 << (FeiyanFormulaParser.Operator - 32)) | (1 << (FeiyanFormulaParser.Override - 32)) | (1 << (FeiyanFormulaParser.Private - 32)) | (1 << (FeiyanFormulaParser.Protected - 32)) | (1 << (FeiyanFormulaParser.Public - 32)) | (1 << (FeiyanFormulaParser.Register - 32)) | (1 << (FeiyanFormulaParser.Reinterpret_cast - 32)) | (1 << (FeiyanFormulaParser.Return - 32)) | (1 << (FeiyanFormulaParser.Short - 32)) | (1 << (FeiyanFormulaParser.Signed - 32)) | (1 << (FeiyanFormulaParser.Sizeof - 32)) | (1 << (FeiyanFormulaParser.Static - 32)))) !== 0) || ((((_la - 64)) & ~0x1f) == 0 && ((1 << (_la - 64)) & ((1 << (FeiyanFormulaParser.Static_assert - 64)) | (1 << (FeiyanFormulaParser.Static_cast - 64)) | (1 << (FeiyanFormulaParser.Struct - 64)) | (1 << (FeiyanFormulaParser.Switch - 64)) | (1 << (FeiyanFormulaParser.Template - 64)) | (1 << (FeiyanFormulaParser.This - 64)) | (1 << (FeiyanFormulaParser.Thread_local - 64)) | (1 << (FeiyanFormulaParser.Throw - 64)) | (1 << (FeiyanFormulaParser.True_ - 64)) | (1 << (FeiyanFormulaParser.Try - 64)) | (1 << (FeiyanFormulaParser.Typedef - 64)) | (1 << (FeiyanFormulaParser.Typeid_ - 64)) | (1 << (FeiyanFormulaParser.Typename_ - 64)) | (1 << (FeiyanFormulaParser.Union - 64)) | (1 << (FeiyanFormulaParser.Unsigned - 64)) | (1 << (FeiyanFormulaParser.Using - 64)) | (1 << (FeiyanFormulaParser.Virtual - 64)) | (1 << (FeiyanFormulaParser.Void - 64)) | (1 << (FeiyanFormulaParser.Volatile - 64)) | (1 << (FeiyanFormulaParser.Wchar - 64)) | (1 << (FeiyanFormulaParser.While - 64)) | (1 << (FeiyanFormulaParser.LeftParen - 64)) | (1 << (FeiyanFormulaParser.LeftBracket - 64)) | (1 << (FeiyanFormulaParser.LeftBrace - 64)) | (1 << (FeiyanFormulaParser.Plus - 64)) | (1 << (FeiyanFormulaParser.Minus - 64)) | (1 << (FeiyanFormulaParser.Star - 64)) | (1 << (FeiyanFormulaParser.Div - 64)) | (1 << (FeiyanFormulaParser.Mod - 64)))) !== 0) || ((((_la - 96)) & ~0x1f) == 0 && ((1 << (_la - 96)) & ((1 << (FeiyanFormulaParser.Caret - 96)) | (1 << (FeiyanFormulaParser.And - 96)) | (1 << (FeiyanFormulaParser.Or - 96)) | (1 << (FeiyanFormulaParser.Tilde - 96)) | (1 << (FeiyanFormulaParser.Not - 96)) | (1 << (FeiyanFormulaParser.Assign - 96)) | (1 << (FeiyanFormulaParser.Less - 96)) | (1 << (FeiyanFormulaParser.Greater - 96)) | (1 << (FeiyanFormulaParser.PlusAssign - 96)) | (1 << (FeiyanFormulaParser.MinusAssign - 96)) | (1 << (FeiyanFormulaParser.StarAssign - 96)) | (1 << (FeiyanFormulaParser.DivAssign - 96)) | (1 << (FeiyanFormulaParser.ModAssign - 96)) | (1 << (FeiyanFormulaParser.XorAssign - 96)) | (1 << (FeiyanFormulaParser.AndAssign - 96)) | (1 << (FeiyanFormulaParser.OrAssign - 96)) | (1 << (FeiyanFormulaParser.LeftShiftAssign - 96)) | (1 << (FeiyanFormulaParser.RightShiftAssign - 96)) | (1 << (FeiyanFormulaParser.Equal - 96)) | (1 << (FeiyanFormulaParser.NotEqual - 96)) | (1 << (FeiyanFormulaParser.LessEqual - 96)) | (1 << (FeiyanFormulaParser.GreaterEqual - 96)) | (1 << (FeiyanFormulaParser.AndAnd - 96)) | (1 << (FeiyanFormulaParser.OrOr - 96)) | (1 << (FeiyanFormulaParser.PlusPlus - 96)) | (1 << (FeiyanFormulaParser.MinusMinus - 96)) | (1 << (FeiyanFormulaParser.Comma - 96)) | (1 << (FeiyanFormulaParser.ArrowStar - 96)) | (1 << (FeiyanFormulaParser.Arrow - 96)) | (1 << (FeiyanFormulaParser.Question - 96)) | (1 << (FeiyanFormulaParser.Colon - 96)) | (1 << (FeiyanFormulaParser.Doublecolon - 96)))) !== 0) || ((((_la - 128)) & ~0x1f) == 0 && ((1 << (_la - 128)) & ((1 << (FeiyanFormulaParser.Semi - 128)) | (1 << (FeiyanFormulaParser.Dot - 128)) | (1 << (FeiyanFormulaParser.DotStar - 128)) | (1 << (FeiyanFormulaParser.Ellipsis - 128)) | (1 << (FeiyanFormulaParser.Identifier - 128)) | (1 << (FeiyanFormulaParser.DecimalLiteral - 128)) | (1 << (FeiyanFormulaParser.OctalLiteral - 128)) | (1 << (FeiyanFormulaParser.HexadecimalLiteral - 128)) | (1 << (FeiyanFormulaParser.BinaryLiteral - 128)) | (1 << (FeiyanFormulaParser.Integersuffix - 128)) | (1 << (FeiyanFormulaParser.UserDefinedIntegerLiteral - 128)) | (1 << (FeiyanFormulaParser.UserDefinedFloatingLiteral - 128)) | (1 << (FeiyanFormulaParser.UserDefinedStringLiteral - 128)) | (1 << (FeiyanFormulaParser.UserDefinedCharacterLiteral - 128)) | (1 << (FeiyanFormulaParser.Whitespace - 128)) | (1 << (FeiyanFormulaParser.Newline - 128)) | (1 << (FeiyanFormulaParser.BlockComment - 128)) | (1 << (FeiyanFormulaParser.LineComment - 128)))) !== 0));
		} catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		} finally {
			this.exitRule();
		}
		return localctx;
	}



	balancedtoken() {
		let localctx = new BalancedtokenContext(this, this._ctx, this.state);
		this.enterRule(localctx, 182, FeiyanFormulaParser.RULE_balancedtoken);
		var _la = 0; // Token type
		try {
			this.state = 1028;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
				case FeiyanFormulaParser.LeftParen:
					this.enterOuterAlt(localctx, 1);
					this.state = 1011;
					this.match(FeiyanFormulaParser.LeftParen);
					this.state = 1012;
					this.balancedTokenSeq();
					this.state = 1013;
					this.match(FeiyanFormulaParser.RightParen);
					break;
				case FeiyanFormulaParser.LeftBracket:
					this.enterOuterAlt(localctx, 2);
					this.state = 1015;
					this.match(FeiyanFormulaParser.LeftBracket);
					this.state = 1016;
					this.balancedTokenSeq();
					this.state = 1017;
					this.match(FeiyanFormulaParser.RightBracket);
					break;
				case FeiyanFormulaParser.LeftBrace:
					this.enterOuterAlt(localctx, 3);
					this.state = 1019;
					this.match(FeiyanFormulaParser.LeftBrace);
					this.state = 1020;
					this.balancedTokenSeq();
					this.state = 1021;
					this.match(FeiyanFormulaParser.RightBrace);
					break;
				case FeiyanFormulaParser.IntegerLiteral:
				case FeiyanFormulaParser.CharacterLiteral:
				case FeiyanFormulaParser.FloatingLiteral:
				case FeiyanFormulaParser.StringLiteral:
				case FeiyanFormulaParser.BooleanLiteral:
				case FeiyanFormulaParser.PointerLiteral:
				case FeiyanFormulaParser.UserDefinedLiteral:
				case FeiyanFormulaParser.MultiLineMacro:
				case FeiyanFormulaParser.Directive:
				case FeiyanFormulaParser.Alignas:
				case FeiyanFormulaParser.Alignof:
				case FeiyanFormulaParser.Asm:
				case FeiyanFormulaParser.Auto:
				case FeiyanFormulaParser.Bool:
				case FeiyanFormulaParser.Break:
				case FeiyanFormulaParser.Case:
				case FeiyanFormulaParser.Catch:
				case FeiyanFormulaParser.Char:
				case FeiyanFormulaParser.Char16:
				case FeiyanFormulaParser.Char32:
				case FeiyanFormulaParser.Class:
				case FeiyanFormulaParser.Const:
				case FeiyanFormulaParser.Constexpr:
				case FeiyanFormulaParser.Const_cast:
				case FeiyanFormulaParser.Continue:
				case FeiyanFormulaParser.Decltype:
				case FeiyanFormulaParser.Default:
				case FeiyanFormulaParser.Delete:
				case FeiyanFormulaParser.Do:
				case FeiyanFormulaParser.Double:
				case FeiyanFormulaParser.Dynamic_cast:
				case FeiyanFormulaParser.Else:
				case FeiyanFormulaParser.Enum:
				case FeiyanFormulaParser.Explicit:
				case FeiyanFormulaParser.Export:
				case FeiyanFormulaParser.Extern:
				case FeiyanFormulaParser.False_:
				case FeiyanFormulaParser.Final:
				case FeiyanFormulaParser.Float:
				case FeiyanFormulaParser.For:
				case FeiyanFormulaParser.Friend:
				case FeiyanFormulaParser.Goto:
				case FeiyanFormulaParser.If:
				case FeiyanFormulaParser.Inline:
				case FeiyanFormulaParser.Int:
				case FeiyanFormulaParser.Long:
				case FeiyanFormulaParser.Mutable:
				case FeiyanFormulaParser.Namespace:
				case FeiyanFormulaParser.New:
				case FeiyanFormulaParser.Noexcept:
				case FeiyanFormulaParser.Nullptr:
				case FeiyanFormulaParser.Operator:
				case FeiyanFormulaParser.Override:
				case FeiyanFormulaParser.Private:
				case FeiyanFormulaParser.Protected:
				case FeiyanFormulaParser.Public:
				case FeiyanFormulaParser.Register:
				case FeiyanFormulaParser.Reinterpret_cast:
				case FeiyanFormulaParser.Return:
				case FeiyanFormulaParser.Short:
				case FeiyanFormulaParser.Signed:
				case FeiyanFormulaParser.Sizeof:
				case FeiyanFormulaParser.Static:
				case FeiyanFormulaParser.Static_assert:
				case FeiyanFormulaParser.Static_cast:
				case FeiyanFormulaParser.Struct:
				case FeiyanFormulaParser.Switch:
				case FeiyanFormulaParser.Template:
				case FeiyanFormulaParser.This:
				case FeiyanFormulaParser.Thread_local:
				case FeiyanFormulaParser.Throw:
				case FeiyanFormulaParser.True_:
				case FeiyanFormulaParser.Try:
				case FeiyanFormulaParser.Typedef:
				case FeiyanFormulaParser.Typeid_:
				case FeiyanFormulaParser.Typename_:
				case FeiyanFormulaParser.Union:
				case FeiyanFormulaParser.Unsigned:
				case FeiyanFormulaParser.Using:
				case FeiyanFormulaParser.Virtual:
				case FeiyanFormulaParser.Void:
				case FeiyanFormulaParser.Volatile:
				case FeiyanFormulaParser.Wchar:
				case FeiyanFormulaParser.While:
				case FeiyanFormulaParser.Plus:
				case FeiyanFormulaParser.Minus:
				case FeiyanFormulaParser.Star:
				case FeiyanFormulaParser.Div:
				case FeiyanFormulaParser.Mod:
				case FeiyanFormulaParser.Caret:
				case FeiyanFormulaParser.And:
				case FeiyanFormulaParser.Or:
				case FeiyanFormulaParser.Tilde:
				case FeiyanFormulaParser.Not:
				case FeiyanFormulaParser.Assign:
				case FeiyanFormulaParser.Less:
				case FeiyanFormulaParser.Greater:
				case FeiyanFormulaParser.PlusAssign:
				case FeiyanFormulaParser.MinusAssign:
				case FeiyanFormulaParser.StarAssign:
				case FeiyanFormulaParser.DivAssign:
				case FeiyanFormulaParser.ModAssign:
				case FeiyanFormulaParser.XorAssign:
				case FeiyanFormulaParser.AndAssign:
				case FeiyanFormulaParser.OrAssign:
				case FeiyanFormulaParser.LeftShiftAssign:
				case FeiyanFormulaParser.RightShiftAssign:
				case FeiyanFormulaParser.Equal:
				case FeiyanFormulaParser.NotEqual:
				case FeiyanFormulaParser.LessEqual:
				case FeiyanFormulaParser.GreaterEqual:
				case FeiyanFormulaParser.AndAnd:
				case FeiyanFormulaParser.OrOr:
				case FeiyanFormulaParser.PlusPlus:
				case FeiyanFormulaParser.MinusMinus:
				case FeiyanFormulaParser.Comma:
				case FeiyanFormulaParser.ArrowStar:
				case FeiyanFormulaParser.Arrow:
				case FeiyanFormulaParser.Question:
				case FeiyanFormulaParser.Colon:
				case FeiyanFormulaParser.Doublecolon:
				case FeiyanFormulaParser.Semi:
				case FeiyanFormulaParser.Dot:
				case FeiyanFormulaParser.DotStar:
				case FeiyanFormulaParser.Ellipsis:
				case FeiyanFormulaParser.Identifier:
				case FeiyanFormulaParser.DecimalLiteral:
				case FeiyanFormulaParser.OctalLiteral:
				case FeiyanFormulaParser.HexadecimalLiteral:
				case FeiyanFormulaParser.BinaryLiteral:
				case FeiyanFormulaParser.Integersuffix:
				case FeiyanFormulaParser.UserDefinedIntegerLiteral:
				case FeiyanFormulaParser.UserDefinedFloatingLiteral:
				case FeiyanFormulaParser.UserDefinedStringLiteral:
				case FeiyanFormulaParser.UserDefinedCharacterLiteral:
				case FeiyanFormulaParser.Whitespace:
				case FeiyanFormulaParser.Newline:
				case FeiyanFormulaParser.BlockComment:
				case FeiyanFormulaParser.LineComment:
					this.enterOuterAlt(localctx, 4);
					this.state = 1024;
					this._errHandler.sync(this);
					var _alt = 1;
					do {
						switch (_alt) {
							case 1:
								this.state = 1023;
								_la = this._input.LA(1);
								if (_la <= 0 || ((((_la - 85)) & ~0x1f) == 0 && ((1 << (_la - 85)) & ((1 << (FeiyanFormulaParser.LeftParen - 85)) | (1 << (FeiyanFormulaParser.RightParen - 85)) | (1 << (FeiyanFormulaParser.LeftBracket - 85)) | (1 << (FeiyanFormulaParser.RightBracket - 85)) | (1 << (FeiyanFormulaParser.LeftBrace - 85)) | (1 << (FeiyanFormulaParser.RightBrace - 85)))) !== 0)) {
									this._errHandler.recoverInline(this);
								}
								else {
									this._errHandler.reportMatch(this);
									this.consume();
								}
								break;
							default:
								throw new antlr4.error.NoViableAltException(this);
						}
						this.state = 1026;
						this._errHandler.sync(this);
						_alt = this._interp.adaptivePredict(this._input, 130, this._ctx);
					} while (_alt != 2 && _alt != antlr4.atn.ATN.INVALID_ALT_NUMBER);
					break;
				default:
					throw new antlr4.error.NoViableAltException(this);
			}
		} catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		} finally {
			this.exitRule();
		}
		return localctx;
	}



	initDeclaratorList() {
		let localctx = new InitDeclaratorListContext(this, this._ctx, this.state);
		this.enterRule(localctx, 184, FeiyanFormulaParser.RULE_initDeclaratorList);
		var _la = 0; // Token type
		try {
			this.enterOuterAlt(localctx, 1);
			this.state = 1030;
			this.initDeclarator();
			this.state = 1035;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === FeiyanFormulaParser.Comma) {
				this.state = 1031;
				this.match(FeiyanFormulaParser.Comma);
				this.state = 1032;
				this.initDeclarator();
				this.state = 1037;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
		} catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		} finally {
			this.exitRule();
		}
		return localctx;
	}



	initDeclarator() {
		let localctx = new InitDeclaratorContext(this, this._ctx, this.state);
		this.enterRule(localctx, 186, FeiyanFormulaParser.RULE_initDeclarator);
		var _la = 0; // Token type
		try {
			this.enterOuterAlt(localctx, 1);
			this.state = 1038;
			this.declarator();
			this.state = 1040;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (((((_la - 85)) & ~0x1f) == 0 && ((1 << (_la - 85)) & ((1 << (FeiyanFormulaParser.LeftParen - 85)) | (1 << (FeiyanFormulaParser.LeftBrace - 85)) | (1 << (FeiyanFormulaParser.Assign - 85)))) !== 0)) {
				this.state = 1039;
				this.initializer();
			}

		} catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		} finally {
			this.exitRule();
		}
		return localctx;
	}



	declarator() {
		let localctx = new DeclaratorContext(this, this._ctx, this.state);
		this.enterRule(localctx, 188, FeiyanFormulaParser.RULE_declarator);
		try {
			this.state = 1047;
			this._errHandler.sync(this);
			var la_ = this._interp.adaptivePredict(this._input, 134, this._ctx);
			switch (la_) {
				case 1:
					this.enterOuterAlt(localctx, 1);
					this.state = 1042;
					this.pointerDeclarator();
					break;

				case 2:
					this.enterOuterAlt(localctx, 2);
					this.state = 1043;
					this.noPointerDeclarator(0);
					this.state = 1044;
					this.parametersAndQualifiers();
					this.state = 1045;
					this.trailingReturnType();
					break;

			}
		} catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		} finally {
			this.exitRule();
		}
		return localctx;
	}



	pointerDeclarator() {
		let localctx = new PointerDeclaratorContext(this, this._ctx, this.state);
		this.enterRule(localctx, 190, FeiyanFormulaParser.RULE_pointerDeclarator);
		var _la = 0; // Token type
		try {
			this.enterOuterAlt(localctx, 1);
			this.state = 1055;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (((((_la - 93)) & ~0x1f) == 0 && ((1 << (_la - 93)) & ((1 << (FeiyanFormulaParser.Star - 93)) | (1 << (FeiyanFormulaParser.And - 93)) | (1 << (FeiyanFormulaParser.AndAnd - 93)))) !== 0)) {
				this.state = 1049;
				this.pointerOperator();
				this.state = 1051;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === FeiyanFormulaParser.Const) {
					this.state = 1050;
					this.match(FeiyanFormulaParser.Const);
				}

				this.state = 1057;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 1058;
			this.noPointerDeclarator(0);
		} catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		} finally {
			this.exitRule();
		}
		return localctx;
	}


	noPointerDeclarator(_p) {
		if (_p === undefined) {
			_p = 0;
		}
		const _parentctx = this._ctx;
		const _parentState = this.state;
		let localctx = new NoPointerDeclaratorContext(this, this._ctx, _parentState);
		let _prevctx = localctx;
		const _startState = 192;
		this.enterRecursionRule(localctx, 192, FeiyanFormulaParser.RULE_noPointerDeclarator, _p);
		var _la = 0; // Token type
		try {
			this.enterOuterAlt(localctx, 1);
			this.state = 1069;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
				case FeiyanFormulaParser.Decltype:
				case FeiyanFormulaParser.Operator:
				case FeiyanFormulaParser.Doublecolon:
				case FeiyanFormulaParser.Ellipsis:
				case FeiyanFormulaParser.Identifier:
					this.state = 1061;
					this.declaratorid();
					this.state = 1063;
					this._errHandler.sync(this);
					var la_ = this._interp.adaptivePredict(this._input, 137, this._ctx);
					if (la_ === 1) {
						this.state = 1062;
						this.attributeSpecifierSeq();

					}
					break;
				case FeiyanFormulaParser.LeftParen:
					this.state = 1065;
					this.match(FeiyanFormulaParser.LeftParen);
					this.state = 1066;
					this.pointerDeclarator();
					this.state = 1067;
					this.match(FeiyanFormulaParser.RightParen);
					break;
				default:
					throw new antlr4.error.NoViableAltException(this);
			}
			this._ctx.stop = this._input.LT(-1);
			this.state = 1085;
			this._errHandler.sync(this);
			var _alt = this._interp.adaptivePredict(this._input, 142, this._ctx)
			while (_alt != 2 && _alt != antlr4.atn.ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					if (this._parseListeners !== null) {
						this.triggerExitRuleEvent();
					}
					_prevctx = localctx;
					localctx = new NoPointerDeclaratorContext(this, _parentctx, _parentState);
					this.pushNewRecursionContext(localctx, _startState, FeiyanFormulaParser.RULE_noPointerDeclarator);
					this.state = 1071;
					if (!(this.precpred(this._ctx, 2))) {
						throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 2)");
					}
					this.state = 1081;
					this._errHandler.sync(this);
					switch (this._input.LA(1)) {
						case FeiyanFormulaParser.LeftParen:
							this.state = 1072;
							this.parametersAndQualifiers();
							break;
						case FeiyanFormulaParser.LeftBracket:
							this.state = 1073;
							this.match(FeiyanFormulaParser.LeftBracket);
							this.state = 1075;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
							if ((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << FeiyanFormulaParser.IntegerLiteral) | (1 << FeiyanFormulaParser.CharacterLiteral) | (1 << FeiyanFormulaParser.FloatingLiteral) | (1 << FeiyanFormulaParser.StringLiteral) | (1 << FeiyanFormulaParser.BooleanLiteral) | (1 << FeiyanFormulaParser.PointerLiteral) | (1 << FeiyanFormulaParser.UserDefinedLiteral) | (1 << FeiyanFormulaParser.Auto) | (1 << FeiyanFormulaParser.Bool) | (1 << FeiyanFormulaParser.Char) | (1 << FeiyanFormulaParser.Char16) | (1 << FeiyanFormulaParser.Char32) | (1 << FeiyanFormulaParser.Const_cast) | (1 << FeiyanFormulaParser.Decltype) | (1 << FeiyanFormulaParser.Double) | (1 << FeiyanFormulaParser.Dynamic_cast))) !== 0) || ((((_la - 39)) & ~0x1f) == 0 && ((1 << (_la - 39)) & ((1 << (FeiyanFormulaParser.Float - 39)) | (1 << (FeiyanFormulaParser.Int - 39)) | (1 << (FeiyanFormulaParser.Long - 39)) | (1 << (FeiyanFormulaParser.New - 39)) | (1 << (FeiyanFormulaParser.Operator - 39)) | (1 << (FeiyanFormulaParser.Reinterpret_cast - 39)) | (1 << (FeiyanFormulaParser.Short - 39)) | (1 << (FeiyanFormulaParser.Signed - 39)) | (1 << (FeiyanFormulaParser.Static_cast - 39)) | (1 << (FeiyanFormulaParser.This - 39)))) !== 0) || ((((_la - 78)) & ~0x1f) == 0 && ((1 << (_la - 78)) & ((1 << (FeiyanFormulaParser.Unsigned - 78)) | (1 << (FeiyanFormulaParser.Void - 78)) | (1 << (FeiyanFormulaParser.Wchar - 78)) | (1 << (FeiyanFormulaParser.LeftParen - 78)) | (1 << (FeiyanFormulaParser.LeftBracket - 78)) | (1 << (FeiyanFormulaParser.Plus - 78)) | (1 << (FeiyanFormulaParser.Minus - 78)) | (1 << (FeiyanFormulaParser.Star - 78)) | (1 << (FeiyanFormulaParser.And - 78)) | (1 << (FeiyanFormulaParser.Or - 78)) | (1 << (FeiyanFormulaParser.Tilde - 78)) | (1 << (FeiyanFormulaParser.Not - 78)))) !== 0) || ((((_la - 120)) & ~0x1f) == 0 && ((1 << (_la - 120)) & ((1 << (FeiyanFormulaParser.PlusPlus - 120)) | (1 << (FeiyanFormulaParser.MinusMinus - 120)) | (1 << (FeiyanFormulaParser.Doublecolon - 120)) | (1 << (FeiyanFormulaParser.Identifier - 120)))) !== 0)) {
								this.state = 1074;
								this.constantExpression();
							}

							this.state = 1077;
							this.match(FeiyanFormulaParser.RightBracket);
							this.state = 1079;
							this._errHandler.sync(this);
							var la_ = this._interp.adaptivePredict(this._input, 140, this._ctx);
							if (la_ === 1) {
								this.state = 1078;
								this.attributeSpecifierSeq();

							}
							break;
						default:
							throw new antlr4.error.NoViableAltException(this);
					}
				}
				this.state = 1087;
				this._errHandler.sync(this);
				_alt = this._interp.adaptivePredict(this._input, 142, this._ctx);
			}

		} catch (error) {
			if (error instanceof antlr4.error.RecognitionException) {
				localctx.exception = error;
				this._errHandler.reportError(this, error);
				this._errHandler.recover(this, error);
			} else {
				throw error;
			}
		} finally {
			this.unrollRecursionContexts(_parentctx)
		}
		return localctx;
	}



	parametersAndQualifiers() {
		let localctx = new ParametersAndQualifiersContext(this, this._ctx, this.state);
		this.enterRule(localctx, 194, FeiyanFormulaParser.RULE_parametersAndQualifiers);
		var _la = 0; // Token type
		try {
			this.enterOuterAlt(localctx, 1);
			this.state = 1088;
			this.match(FeiyanFormulaParser.LeftParen);
			this.state = 1090;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if ((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << FeiyanFormulaParser.Alignas) | (1 << FeiyanFormulaParser.Auto) | (1 << FeiyanFormulaParser.Bool) | (1 << FeiyanFormulaParser.Char) | (1 << FeiyanFormulaParser.Char16) | (1 << FeiyanFormulaParser.Char32) | (1 << FeiyanFormulaParser.Const) | (1 << FeiyanFormulaParser.Decltype) | (1 << FeiyanFormulaParser.Double))) !== 0) || ((((_la - 33)) & ~0x1f) == 0 && ((1 << (_la - 33)) & ((1 << (FeiyanFormulaParser.Enum - 33)) | (1 << (FeiyanFormulaParser.Explicit - 33)) | (1 << (FeiyanFormulaParser.Float - 33)) | (1 << (FeiyanFormulaParser.Inline - 33)) | (1 << (FeiyanFormulaParser.Int - 33)) | (1 << (FeiyanFormulaParser.Long - 33)) | (1 << (FeiyanFormulaParser.Short - 33)) | (1 << (FeiyanFormulaParser.Signed - 33)))) !== 0) || ((((_la - 78)) & ~0x1f) == 0 && ((1 << (_la - 78)) & ((1 << (FeiyanFormulaParser.Unsigned - 78)) | (1 << (FeiyanFormulaParser.Virtual - 78)) | (1 << (FeiyanFormulaParser.Void - 78)) | (1 << (FeiyanFormulaParser.Volatile - 78)) | (1 << (FeiyanFormulaParser.Wchar - 78)) | (1 << (FeiyanFormulaParser.LeftBracket - 78)))) !== 0) || _la === FeiyanFormulaParser.Doublecolon || _la === FeiyanFormulaParser.Identifier) {
				this.state = 1089;
				this.parameterDeclarationClause();
			}

			this.state = 1092;
			this.match(FeiyanFormulaParser.RightParen);
			this.state = 1094;
			this._errHandler.sync(this);
			var la_ = this._interp.adaptivePredict(this._input, 144, this._ctx);
			if (la_ === 1) {
				this.state = 1093;
				this.cvqualifierseq();

			}
			this.state = 1097;
			this._errHandler.sync(this);
			var la_ = this._interp.adaptivePredict(this._input, 145, this._ctx);
			if (la_ === 1) {
				this.state = 1096;
				this.refqualifier();

			}
			this.state = 1100;
			this._errHandler.sync(this);
			var la_ = this._interp.adaptivePredict(this._input, 146, this._ctx);
			if (la_ === 1) {
				this.state = 1099;
				this.exceptionSpecification();

			}
			this.state = 1103;
			this._errHandler.sync(this);
			var la_ = this._interp.adaptivePredict(this._input, 147, this._ctx);
			if (la_ === 1) {
				this.state = 1102;
				this.attributeSpecifierSeq();

			}
		} catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		} finally {
			this.exitRule();
		}
		return localctx;
	}



	trailingReturnType() {
		let localctx = new TrailingReturnTypeContext(this, this._ctx, this.state);
		this.enterRule(localctx, 196, FeiyanFormulaParser.RULE_trailingReturnType);
		try {
			this.enterOuterAlt(localctx, 1);
			this.state = 1105;
			this.match(FeiyanFormulaParser.Arrow);
			this.state = 1106;
			this.trailingTypeSpecifierSeq();
			this.state = 1108;
			this._errHandler.sync(this);
			var la_ = this._interp.adaptivePredict(this._input, 148, this._ctx);
			if (la_ === 1) {
				this.state = 1107;
				this.abstractDeclarator();

			}
		} catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		} finally {
			this.exitRule();
		}
		return localctx;
	}



	pointerOperator() {
		let localctx = new PointerOperatorContext(this, this._ctx, this.state);
		this.enterRule(localctx, 198, FeiyanFormulaParser.RULE_pointerOperator);
		var _la = 0; // Token type
		try {
			this.state = 1121;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
				case FeiyanFormulaParser.And:
				case FeiyanFormulaParser.AndAnd:
					this.enterOuterAlt(localctx, 1);
					this.state = 1110;
					_la = this._input.LA(1);
					if (!(_la === FeiyanFormulaParser.And || _la === FeiyanFormulaParser.AndAnd)) {
						this._errHandler.recoverInline(this);
					}
					else {
						this._errHandler.reportMatch(this);
						this.consume();
					}
					this.state = 1112;
					this._errHandler.sync(this);
					var la_ = this._interp.adaptivePredict(this._input, 149, this._ctx);
					if (la_ === 1) {
						this.state = 1111;
						this.attributeSpecifierSeq();

					}
					break;
				case FeiyanFormulaParser.Star:
					this.enterOuterAlt(localctx, 2);
					this.state = 1114;
					this.match(FeiyanFormulaParser.Star);
					this.state = 1116;
					this._errHandler.sync(this);
					var la_ = this._interp.adaptivePredict(this._input, 150, this._ctx);
					if (la_ === 1) {
						this.state = 1115;
						this.attributeSpecifierSeq();

					}
					this.state = 1119;
					this._errHandler.sync(this);
					var la_ = this._interp.adaptivePredict(this._input, 151, this._ctx);
					if (la_ === 1) {
						this.state = 1118;
						this.cvqualifierseq();

					}
					break;
				default:
					throw new antlr4.error.NoViableAltException(this);
			}
		} catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		} finally {
			this.exitRule();
		}
		return localctx;
	}



	cvqualifierseq() {
		let localctx = new CvqualifierseqContext(this, this._ctx, this.state);
		this.enterRule(localctx, 200, FeiyanFormulaParser.RULE_cvqualifierseq);
		try {
			this.enterOuterAlt(localctx, 1);
			this.state = 1124;
			this._errHandler.sync(this);
			var _alt = 1;
			do {
				switch (_alt) {
					case 1:
						this.state = 1123;
						this.cvQualifier();
						break;
					default:
						throw new antlr4.error.NoViableAltException(this);
				}
				this.state = 1126;
				this._errHandler.sync(this);
				_alt = this._interp.adaptivePredict(this._input, 153, this._ctx);
			} while (_alt != 2 && _alt != antlr4.atn.ATN.INVALID_ALT_NUMBER);
		} catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		} finally {
			this.exitRule();
		}
		return localctx;
	}



	cvQualifier() {
		let localctx = new CvQualifierContext(this, this._ctx, this.state);
		this.enterRule(localctx, 202, FeiyanFormulaParser.RULE_cvQualifier);
		var _la = 0; // Token type
		try {
			this.enterOuterAlt(localctx, 1);
			this.state = 1128;
			_la = this._input.LA(1);
			if (!(_la === FeiyanFormulaParser.Const || _la === FeiyanFormulaParser.Volatile)) {
				this._errHandler.recoverInline(this);
			}
			else {
				this._errHandler.reportMatch(this);
				this.consume();
			}
		} catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		} finally {
			this.exitRule();
		}
		return localctx;
	}



	refqualifier() {
		let localctx = new RefqualifierContext(this, this._ctx, this.state);
		this.enterRule(localctx, 204, FeiyanFormulaParser.RULE_refqualifier);
		var _la = 0; // Token type
		try {
			this.enterOuterAlt(localctx, 1);
			this.state = 1130;
			_la = this._input.LA(1);
			if (!(_la === FeiyanFormulaParser.And || _la === FeiyanFormulaParser.AndAnd)) {
				this._errHandler.recoverInline(this);
			}
			else {
				this._errHandler.reportMatch(this);
				this.consume();
			}
		} catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		} finally {
			this.exitRule();
		}
		return localctx;
	}



	declaratorid() {
		let localctx = new DeclaratoridContext(this, this._ctx, this.state);
		this.enterRule(localctx, 206, FeiyanFormulaParser.RULE_declaratorid);
		var _la = 0; // Token type
		try {
			this.enterOuterAlt(localctx, 1);
			this.state = 1133;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === FeiyanFormulaParser.Ellipsis) {
				this.state = 1132;
				this.match(FeiyanFormulaParser.Ellipsis);
			}

			this.state = 1135;
			this.idExpression();
		} catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		} finally {
			this.exitRule();
		}
		return localctx;
	}



	theTypeId() {
		let localctx = new TheTypeIdContext(this, this._ctx, this.state);
		this.enterRule(localctx, 208, FeiyanFormulaParser.RULE_theTypeId);
		try {
			this.enterOuterAlt(localctx, 1);
			this.state = 1137;
			this.typeSpecifierSeq();
			this.state = 1139;
			this._errHandler.sync(this);
			var la_ = this._interp.adaptivePredict(this._input, 155, this._ctx);
			if (la_ === 1) {
				this.state = 1138;
				this.abstractDeclarator();

			}
		} catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		} finally {
			this.exitRule();
		}
		return localctx;
	}



	abstractDeclarator() {
		let localctx = new AbstractDeclaratorContext(this, this._ctx, this.state);
		this.enterRule(localctx, 210, FeiyanFormulaParser.RULE_abstractDeclarator);
		try {
			this.state = 1149;
			this._errHandler.sync(this);
			var la_ = this._interp.adaptivePredict(this._input, 157, this._ctx);
			switch (la_) {
				case 1:
					this.enterOuterAlt(localctx, 1);
					this.state = 1141;
					this.pointerAbstractDeclarator();
					break;

				case 2:
					this.enterOuterAlt(localctx, 2);
					this.state = 1143;
					this._errHandler.sync(this);
					var la_ = this._interp.adaptivePredict(this._input, 156, this._ctx);
					if (la_ === 1) {
						this.state = 1142;
						this.noPointerAbstractDeclarator(0);

					}
					this.state = 1145;
					this.parametersAndQualifiers();
					this.state = 1146;
					this.trailingReturnType();
					break;

				case 3:
					this.enterOuterAlt(localctx, 3);
					this.state = 1148;
					this.abstractPackDeclarator();
					break;

			}
		} catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		} finally {
			this.exitRule();
		}
		return localctx;
	}



	pointerAbstractDeclarator() {
		let localctx = new PointerAbstractDeclaratorContext(this, this._ctx, this.state);
		this.enterRule(localctx, 212, FeiyanFormulaParser.RULE_pointerAbstractDeclarator);
		var _la = 0; // Token type
		try {
			this.state = 1160;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
				case FeiyanFormulaParser.LeftParen:
				case FeiyanFormulaParser.LeftBracket:
					this.enterOuterAlt(localctx, 1);
					this.state = 1151;
					this.noPointerAbstractDeclarator(0);
					break;
				case FeiyanFormulaParser.Star:
				case FeiyanFormulaParser.And:
				case FeiyanFormulaParser.AndAnd:
					this.enterOuterAlt(localctx, 2);
					this.state = 1153;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						this.state = 1152;
						this.pointerOperator();
						this.state = 1155;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 93)) & ~0x1f) == 0 && ((1 << (_la - 93)) & ((1 << (FeiyanFormulaParser.Star - 93)) | (1 << (FeiyanFormulaParser.And - 93)) | (1 << (FeiyanFormulaParser.AndAnd - 93)))) !== 0));
					this.state = 1158;
					this._errHandler.sync(this);
					var la_ = this._interp.adaptivePredict(this._input, 159, this._ctx);
					if (la_ === 1) {
						this.state = 1157;
						this.noPointerAbstractDeclarator(0);

					}
					break;
				default:
					throw new antlr4.error.NoViableAltException(this);
			}
		} catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		} finally {
			this.exitRule();
		}
		return localctx;
	}


	noPointerAbstractDeclarator(_p) {
		if (_p === undefined) {
			_p = 0;
		}
		const _parentctx = this._ctx;
		const _parentState = this.state;
		let localctx = new NoPointerAbstractDeclaratorContext(this, this._ctx, _parentState);
		let _prevctx = localctx;
		const _startState = 214;
		this.enterRecursionRule(localctx, 214, FeiyanFormulaParser.RULE_noPointerAbstractDeclarator, _p);
		var _la = 0; // Token type
		try {
			this.enterOuterAlt(localctx, 1);
			this.state = 1176;
			this._errHandler.sync(this);
			var la_ = this._interp.adaptivePredict(this._input, 163, this._ctx);
			switch (la_) {
				case 1:
					this.state = 1163;
					this.parametersAndQualifiers();
					break;

				case 2:
					this.state = 1164;
					this.match(FeiyanFormulaParser.LeftBracket);
					this.state = 1166;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if ((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << FeiyanFormulaParser.IntegerLiteral) | (1 << FeiyanFormulaParser.CharacterLiteral) | (1 << FeiyanFormulaParser.FloatingLiteral) | (1 << FeiyanFormulaParser.StringLiteral) | (1 << FeiyanFormulaParser.BooleanLiteral) | (1 << FeiyanFormulaParser.PointerLiteral) | (1 << FeiyanFormulaParser.UserDefinedLiteral) | (1 << FeiyanFormulaParser.Auto) | (1 << FeiyanFormulaParser.Bool) | (1 << FeiyanFormulaParser.Char) | (1 << FeiyanFormulaParser.Char16) | (1 << FeiyanFormulaParser.Char32) | (1 << FeiyanFormulaParser.Const_cast) | (1 << FeiyanFormulaParser.Decltype) | (1 << FeiyanFormulaParser.Double) | (1 << FeiyanFormulaParser.Dynamic_cast))) !== 0) || ((((_la - 39)) & ~0x1f) == 0 && ((1 << (_la - 39)) & ((1 << (FeiyanFormulaParser.Float - 39)) | (1 << (FeiyanFormulaParser.Int - 39)) | (1 << (FeiyanFormulaParser.Long - 39)) | (1 << (FeiyanFormulaParser.New - 39)) | (1 << (FeiyanFormulaParser.Operator - 39)) | (1 << (FeiyanFormulaParser.Reinterpret_cast - 39)) | (1 << (FeiyanFormulaParser.Short - 39)) | (1 << (FeiyanFormulaParser.Signed - 39)) | (1 << (FeiyanFormulaParser.Static_cast - 39)) | (1 << (FeiyanFormulaParser.This - 39)))) !== 0) || ((((_la - 78)) & ~0x1f) == 0 && ((1 << (_la - 78)) & ((1 << (FeiyanFormulaParser.Unsigned - 78)) | (1 << (FeiyanFormulaParser.Void - 78)) | (1 << (FeiyanFormulaParser.Wchar - 78)) | (1 << (FeiyanFormulaParser.LeftParen - 78)) | (1 << (FeiyanFormulaParser.LeftBracket - 78)) | (1 << (FeiyanFormulaParser.Plus - 78)) | (1 << (FeiyanFormulaParser.Minus - 78)) | (1 << (FeiyanFormulaParser.Star - 78)) | (1 << (FeiyanFormulaParser.And - 78)) | (1 << (FeiyanFormulaParser.Or - 78)) | (1 << (FeiyanFormulaParser.Tilde - 78)) | (1 << (FeiyanFormulaParser.Not - 78)))) !== 0) || ((((_la - 120)) & ~0x1f) == 0 && ((1 << (_la - 120)) & ((1 << (FeiyanFormulaParser.PlusPlus - 120)) | (1 << (FeiyanFormulaParser.MinusMinus - 120)) | (1 << (FeiyanFormulaParser.Doublecolon - 120)) | (1 << (FeiyanFormulaParser.Identifier - 120)))) !== 0)) {
						this.state = 1165;
						this.constantExpression();
					}

					this.state = 1168;
					this.match(FeiyanFormulaParser.RightBracket);
					this.state = 1170;
					this._errHandler.sync(this);
					var la_ = this._interp.adaptivePredict(this._input, 162, this._ctx);
					if (la_ === 1) {
						this.state = 1169;
						this.attributeSpecifierSeq();

					}
					break;

				case 3:
					this.state = 1172;
					this.match(FeiyanFormulaParser.LeftParen);
					this.state = 1173;
					this.pointerAbstractDeclarator();
					this.state = 1174;
					this.match(FeiyanFormulaParser.RightParen);
					break;

			}
			this._ctx.stop = this._input.LT(-1);
			this.state = 1193;
			this._errHandler.sync(this);
			var _alt = this._interp.adaptivePredict(this._input, 167, this._ctx)
			while (_alt != 2 && _alt != antlr4.atn.ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					if (this._parseListeners !== null) {
						this.triggerExitRuleEvent();
					}
					_prevctx = localctx;
					localctx = new NoPointerAbstractDeclaratorContext(this, _parentctx, _parentState);
					this.pushNewRecursionContext(localctx, _startState, FeiyanFormulaParser.RULE_noPointerAbstractDeclarator);
					this.state = 1178;
					if (!(this.precpred(this._ctx, 4))) {
						throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 4)");
					}
					this.state = 1189;
					this._errHandler.sync(this);
					var la_ = this._interp.adaptivePredict(this._input, 166, this._ctx);
					switch (la_) {
						case 1:
							this.state = 1179;
							this.parametersAndQualifiers();
							break;

						case 2:
							this.state = 1180;
							this.noPointerAbstractDeclarator(0);
							this.state = 1181;
							this.match(FeiyanFormulaParser.LeftBracket);
							this.state = 1183;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
							if ((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << FeiyanFormulaParser.IntegerLiteral) | (1 << FeiyanFormulaParser.CharacterLiteral) | (1 << FeiyanFormulaParser.FloatingLiteral) | (1 << FeiyanFormulaParser.StringLiteral) | (1 << FeiyanFormulaParser.BooleanLiteral) | (1 << FeiyanFormulaParser.PointerLiteral) | (1 << FeiyanFormulaParser.UserDefinedLiteral) | (1 << FeiyanFormulaParser.Auto) | (1 << FeiyanFormulaParser.Bool) | (1 << FeiyanFormulaParser.Char) | (1 << FeiyanFormulaParser.Char16) | (1 << FeiyanFormulaParser.Char32) | (1 << FeiyanFormulaParser.Const_cast) | (1 << FeiyanFormulaParser.Decltype) | (1 << FeiyanFormulaParser.Double) | (1 << FeiyanFormulaParser.Dynamic_cast))) !== 0) || ((((_la - 39)) & ~0x1f) == 0 && ((1 << (_la - 39)) & ((1 << (FeiyanFormulaParser.Float - 39)) | (1 << (FeiyanFormulaParser.Int - 39)) | (1 << (FeiyanFormulaParser.Long - 39)) | (1 << (FeiyanFormulaParser.New - 39)) | (1 << (FeiyanFormulaParser.Operator - 39)) | (1 << (FeiyanFormulaParser.Reinterpret_cast - 39)) | (1 << (FeiyanFormulaParser.Short - 39)) | (1 << (FeiyanFormulaParser.Signed - 39)) | (1 << (FeiyanFormulaParser.Static_cast - 39)) | (1 << (FeiyanFormulaParser.This - 39)))) !== 0) || ((((_la - 78)) & ~0x1f) == 0 && ((1 << (_la - 78)) & ((1 << (FeiyanFormulaParser.Unsigned - 78)) | (1 << (FeiyanFormulaParser.Void - 78)) | (1 << (FeiyanFormulaParser.Wchar - 78)) | (1 << (FeiyanFormulaParser.LeftParen - 78)) | (1 << (FeiyanFormulaParser.LeftBracket - 78)) | (1 << (FeiyanFormulaParser.Plus - 78)) | (1 << (FeiyanFormulaParser.Minus - 78)) | (1 << (FeiyanFormulaParser.Star - 78)) | (1 << (FeiyanFormulaParser.And - 78)) | (1 << (FeiyanFormulaParser.Or - 78)) | (1 << (FeiyanFormulaParser.Tilde - 78)) | (1 << (FeiyanFormulaParser.Not - 78)))) !== 0) || ((((_la - 120)) & ~0x1f) == 0 && ((1 << (_la - 120)) & ((1 << (FeiyanFormulaParser.PlusPlus - 120)) | (1 << (FeiyanFormulaParser.MinusMinus - 120)) | (1 << (FeiyanFormulaParser.Doublecolon - 120)) | (1 << (FeiyanFormulaParser.Identifier - 120)))) !== 0)) {
								this.state = 1182;
								this.constantExpression();
							}

							this.state = 1185;
							this.match(FeiyanFormulaParser.RightBracket);
							this.state = 1187;
							this._errHandler.sync(this);
							var la_ = this._interp.adaptivePredict(this._input, 165, this._ctx);
							if (la_ === 1) {
								this.state = 1186;
								this.attributeSpecifierSeq();

							}
							break;

					}
				}
				this.state = 1195;
				this._errHandler.sync(this);
				_alt = this._interp.adaptivePredict(this._input, 167, this._ctx);
			}

		} catch (error) {
			if (error instanceof antlr4.error.RecognitionException) {
				localctx.exception = error;
				this._errHandler.reportError(this, error);
				this._errHandler.recover(this, error);
			} else {
				throw error;
			}
		} finally {
			this.unrollRecursionContexts(_parentctx)
		}
		return localctx;
	}



	abstractPackDeclarator() {
		let localctx = new AbstractPackDeclaratorContext(this, this._ctx, this.state);
		this.enterRule(localctx, 216, FeiyanFormulaParser.RULE_abstractPackDeclarator);
		var _la = 0; // Token type
		try {
			this.enterOuterAlt(localctx, 1);
			this.state = 1199;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (((((_la - 93)) & ~0x1f) == 0 && ((1 << (_la - 93)) & ((1 << (FeiyanFormulaParser.Star - 93)) | (1 << (FeiyanFormulaParser.And - 93)) | (1 << (FeiyanFormulaParser.AndAnd - 93)))) !== 0)) {
				this.state = 1196;
				this.pointerOperator();
				this.state = 1201;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 1202;
			this.noPointerAbstractPackDeclarator(0);
		} catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		} finally {
			this.exitRule();
		}
		return localctx;
	}


	noPointerAbstractPackDeclarator(_p) {
		if (_p === undefined) {
			_p = 0;
		}
		const _parentctx = this._ctx;
		const _parentState = this.state;
		let localctx = new NoPointerAbstractPackDeclaratorContext(this, this._ctx, _parentState);
		let _prevctx = localctx;
		const _startState = 218;
		this.enterRecursionRule(localctx, 218, FeiyanFormulaParser.RULE_noPointerAbstractPackDeclarator, _p);
		var _la = 0; // Token type
		try {
			this.enterOuterAlt(localctx, 1);
			this.state = 1205;
			this.match(FeiyanFormulaParser.Ellipsis);
			this._ctx.stop = this._input.LT(-1);
			this.state = 1221;
			this._errHandler.sync(this);
			var _alt = this._interp.adaptivePredict(this._input, 172, this._ctx)
			while (_alt != 2 && _alt != antlr4.atn.ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					if (this._parseListeners !== null) {
						this.triggerExitRuleEvent();
					}
					_prevctx = localctx;
					localctx = new NoPointerAbstractPackDeclaratorContext(this, _parentctx, _parentState);
					this.pushNewRecursionContext(localctx, _startState, FeiyanFormulaParser.RULE_noPointerAbstractPackDeclarator);
					this.state = 1207;
					if (!(this.precpred(this._ctx, 2))) {
						throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 2)");
					}
					this.state = 1217;
					this._errHandler.sync(this);
					switch (this._input.LA(1)) {
						case FeiyanFormulaParser.LeftParen:
							this.state = 1208;
							this.parametersAndQualifiers();
							break;
						case FeiyanFormulaParser.LeftBracket:
							this.state = 1209;
							this.match(FeiyanFormulaParser.LeftBracket);
							this.state = 1211;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
							if ((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << FeiyanFormulaParser.IntegerLiteral) | (1 << FeiyanFormulaParser.CharacterLiteral) | (1 << FeiyanFormulaParser.FloatingLiteral) | (1 << FeiyanFormulaParser.StringLiteral) | (1 << FeiyanFormulaParser.BooleanLiteral) | (1 << FeiyanFormulaParser.PointerLiteral) | (1 << FeiyanFormulaParser.UserDefinedLiteral) | (1 << FeiyanFormulaParser.Auto) | (1 << FeiyanFormulaParser.Bool) | (1 << FeiyanFormulaParser.Char) | (1 << FeiyanFormulaParser.Char16) | (1 << FeiyanFormulaParser.Char32) | (1 << FeiyanFormulaParser.Const_cast) | (1 << FeiyanFormulaParser.Decltype) | (1 << FeiyanFormulaParser.Double) | (1 << FeiyanFormulaParser.Dynamic_cast))) !== 0) || ((((_la - 39)) & ~0x1f) == 0 && ((1 << (_la - 39)) & ((1 << (FeiyanFormulaParser.Float - 39)) | (1 << (FeiyanFormulaParser.Int - 39)) | (1 << (FeiyanFormulaParser.Long - 39)) | (1 << (FeiyanFormulaParser.New - 39)) | (1 << (FeiyanFormulaParser.Operator - 39)) | (1 << (FeiyanFormulaParser.Reinterpret_cast - 39)) | (1 << (FeiyanFormulaParser.Short - 39)) | (1 << (FeiyanFormulaParser.Signed - 39)) | (1 << (FeiyanFormulaParser.Static_cast - 39)) | (1 << (FeiyanFormulaParser.This - 39)))) !== 0) || ((((_la - 78)) & ~0x1f) == 0 && ((1 << (_la - 78)) & ((1 << (FeiyanFormulaParser.Unsigned - 78)) | (1 << (FeiyanFormulaParser.Void - 78)) | (1 << (FeiyanFormulaParser.Wchar - 78)) | (1 << (FeiyanFormulaParser.LeftParen - 78)) | (1 << (FeiyanFormulaParser.LeftBracket - 78)) | (1 << (FeiyanFormulaParser.Plus - 78)) | (1 << (FeiyanFormulaParser.Minus - 78)) | (1 << (FeiyanFormulaParser.Star - 78)) | (1 << (FeiyanFormulaParser.And - 78)) | (1 << (FeiyanFormulaParser.Or - 78)) | (1 << (FeiyanFormulaParser.Tilde - 78)) | (1 << (FeiyanFormulaParser.Not - 78)))) !== 0) || ((((_la - 120)) & ~0x1f) == 0 && ((1 << (_la - 120)) & ((1 << (FeiyanFormulaParser.PlusPlus - 120)) | (1 << (FeiyanFormulaParser.MinusMinus - 120)) | (1 << (FeiyanFormulaParser.Doublecolon - 120)) | (1 << (FeiyanFormulaParser.Identifier - 120)))) !== 0)) {
								this.state = 1210;
								this.constantExpression();
							}

							this.state = 1213;
							this.match(FeiyanFormulaParser.RightBracket);
							this.state = 1215;
							this._errHandler.sync(this);
							var la_ = this._interp.adaptivePredict(this._input, 170, this._ctx);
							if (la_ === 1) {
								this.state = 1214;
								this.attributeSpecifierSeq();

							}
							break;
						default:
							throw new antlr4.error.NoViableAltException(this);
					}
				}
				this.state = 1223;
				this._errHandler.sync(this);
				_alt = this._interp.adaptivePredict(this._input, 172, this._ctx);
			}

		} catch (error) {
			if (error instanceof antlr4.error.RecognitionException) {
				localctx.exception = error;
				this._errHandler.reportError(this, error);
				this._errHandler.recover(this, error);
			} else {
				throw error;
			}
		} finally {
			this.unrollRecursionContexts(_parentctx)
		}
		return localctx;
	}



	parameterDeclarationClause() {
		let localctx = new ParameterDeclarationClauseContext(this, this._ctx, this.state);
		this.enterRule(localctx, 220, FeiyanFormulaParser.RULE_parameterDeclarationClause);
		var _la = 0; // Token type
		try {
			this.enterOuterAlt(localctx, 1);
			this.state = 1224;
			this.parameterDeclarationList();
			this.state = 1229;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === FeiyanFormulaParser.Comma || _la === FeiyanFormulaParser.Ellipsis) {
				this.state = 1226;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === FeiyanFormulaParser.Comma) {
					this.state = 1225;
					this.match(FeiyanFormulaParser.Comma);
				}

				this.state = 1228;
				this.match(FeiyanFormulaParser.Ellipsis);
			}

		} catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		} finally {
			this.exitRule();
		}
		return localctx;
	}



	parameterDeclarationList() {
		let localctx = new ParameterDeclarationListContext(this, this._ctx, this.state);
		this.enterRule(localctx, 222, FeiyanFormulaParser.RULE_parameterDeclarationList);
		try {
			this.enterOuterAlt(localctx, 1);
			this.state = 1231;
			this.parameterDeclaration();
			this.state = 1236;
			this._errHandler.sync(this);
			var _alt = this._interp.adaptivePredict(this._input, 175, this._ctx)
			while (_alt != 2 && _alt != antlr4.atn.ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					this.state = 1232;
					this.match(FeiyanFormulaParser.Comma);
					this.state = 1233;
					this.parameterDeclaration();
				}
				this.state = 1238;
				this._errHandler.sync(this);
				_alt = this._interp.adaptivePredict(this._input, 175, this._ctx);
			}

		} catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		} finally {
			this.exitRule();
		}
		return localctx;
	}



	parameterDeclaration() {
		let localctx = new ParameterDeclarationContext(this, this._ctx, this.state);
		this.enterRule(localctx, 224, FeiyanFormulaParser.RULE_parameterDeclaration);
		var _la = 0; // Token type
		try {
			this.enterOuterAlt(localctx, 1);
			this.state = 1240;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === FeiyanFormulaParser.Alignas || _la === FeiyanFormulaParser.LeftBracket) {
				this.state = 1239;
				this.attributeSpecifierSeq();
			}

			this.state = 1242;
			this.declSpecifierSeq();

			this.state = 1247;
			this._errHandler.sync(this);
			var la_ = this._interp.adaptivePredict(this._input, 178, this._ctx);
			switch (la_) {
				case 1:
					this.state = 1243;
					this.declarator();
					break;

				case 2:
					this.state = 1245;
					this._errHandler.sync(this);
					var la_ = this._interp.adaptivePredict(this._input, 177, this._ctx);
					if (la_ === 1) {
						this.state = 1244;
						this.abstractDeclarator();

					}
					break;

			}
			this.state = 1251;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === FeiyanFormulaParser.Assign) {
				this.state = 1249;
				this.match(FeiyanFormulaParser.Assign);
				this.state = 1250;
				this.initializerClause();
			}

		} catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		} finally {
			this.exitRule();
		}
		return localctx;
	}



	initializer() {
		let localctx = new InitializerContext(this, this._ctx, this.state);
		this.enterRule(localctx, 226, FeiyanFormulaParser.RULE_initializer);
		try {
			this.state = 1258;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
				case FeiyanFormulaParser.LeftBrace:
				case FeiyanFormulaParser.Assign:
					this.enterOuterAlt(localctx, 1);
					this.state = 1253;
					this.braceOrEqualInitializer();
					break;
				case FeiyanFormulaParser.LeftParen:
					this.enterOuterAlt(localctx, 2);
					this.state = 1254;
					this.match(FeiyanFormulaParser.LeftParen);
					this.state = 1255;
					this.expressionList();
					this.state = 1256;
					this.match(FeiyanFormulaParser.RightParen);
					break;
				default:
					throw new antlr4.error.NoViableAltException(this);
			}
		} catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		} finally {
			this.exitRule();
		}
		return localctx;
	}



	braceOrEqualInitializer() {
		let localctx = new BraceOrEqualInitializerContext(this, this._ctx, this.state);
		this.enterRule(localctx, 228, FeiyanFormulaParser.RULE_braceOrEqualInitializer);
		try {
			this.state = 1263;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
				case FeiyanFormulaParser.Assign:
					this.enterOuterAlt(localctx, 1);
					this.state = 1260;
					this.match(FeiyanFormulaParser.Assign);
					this.state = 1261;
					this.initializerClause();
					break;
				case FeiyanFormulaParser.LeftBrace:
					this.enterOuterAlt(localctx, 2);
					this.state = 1262;
					this.bracedInitList();
					break;
				default:
					throw new antlr4.error.NoViableAltException(this);
			}
		} catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		} finally {
			this.exitRule();
		}
		return localctx;
	}



	initializerClause() {
		let localctx = new InitializerClauseContext(this, this._ctx, this.state);
		this.enterRule(localctx, 230, FeiyanFormulaParser.RULE_initializerClause);
		try {
			this.state = 1267;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
				case FeiyanFormulaParser.IntegerLiteral:
				case FeiyanFormulaParser.CharacterLiteral:
				case FeiyanFormulaParser.FloatingLiteral:
				case FeiyanFormulaParser.StringLiteral:
				case FeiyanFormulaParser.BooleanLiteral:
				case FeiyanFormulaParser.PointerLiteral:
				case FeiyanFormulaParser.UserDefinedLiteral:
				case FeiyanFormulaParser.Auto:
				case FeiyanFormulaParser.Bool:
				case FeiyanFormulaParser.Char:
				case FeiyanFormulaParser.Char16:
				case FeiyanFormulaParser.Char32:
				case FeiyanFormulaParser.Const_cast:
				case FeiyanFormulaParser.Decltype:
				case FeiyanFormulaParser.Double:
				case FeiyanFormulaParser.Dynamic_cast:
				case FeiyanFormulaParser.Float:
				case FeiyanFormulaParser.Int:
				case FeiyanFormulaParser.Long:
				case FeiyanFormulaParser.New:
				case FeiyanFormulaParser.Operator:
				case FeiyanFormulaParser.Reinterpret_cast:
				case FeiyanFormulaParser.Short:
				case FeiyanFormulaParser.Signed:
				case FeiyanFormulaParser.Static_cast:
				case FeiyanFormulaParser.This:
				case FeiyanFormulaParser.Throw:
				case FeiyanFormulaParser.Unsigned:
				case FeiyanFormulaParser.Void:
				case FeiyanFormulaParser.Wchar:
				case FeiyanFormulaParser.LeftParen:
				case FeiyanFormulaParser.LeftBracket:
				case FeiyanFormulaParser.Plus:
				case FeiyanFormulaParser.Minus:
				case FeiyanFormulaParser.Star:
				case FeiyanFormulaParser.And:
				case FeiyanFormulaParser.Or:
				case FeiyanFormulaParser.Tilde:
				case FeiyanFormulaParser.Not:
				case FeiyanFormulaParser.PlusPlus:
				case FeiyanFormulaParser.MinusMinus:
				case FeiyanFormulaParser.Doublecolon:
				case FeiyanFormulaParser.Identifier:
					this.enterOuterAlt(localctx, 1);
					this.state = 1265;
					this.assignmentExpression();
					break;
				case FeiyanFormulaParser.LeftBrace:
					this.enterOuterAlt(localctx, 2);
					this.state = 1266;
					this.bracedInitList();
					break;
				default:
					throw new antlr4.error.NoViableAltException(this);
			}
		} catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		} finally {
			this.exitRule();
		}
		return localctx;
	}



	initializerList() {
		let localctx = new InitializerListContext(this, this._ctx, this.state);
		this.enterRule(localctx, 232, FeiyanFormulaParser.RULE_initializerList);
		var _la = 0; // Token type
		try {
			this.enterOuterAlt(localctx, 1);
			this.state = 1269;
			this.initializerClause();
			this.state = 1271;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === FeiyanFormulaParser.Ellipsis) {
				this.state = 1270;
				this.match(FeiyanFormulaParser.Ellipsis);
			}

			this.state = 1280;
			this._errHandler.sync(this);
			var _alt = this._interp.adaptivePredict(this._input, 185, this._ctx)
			while (_alt != 2 && _alt != antlr4.atn.ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					this.state = 1273;
					this.match(FeiyanFormulaParser.Comma);
					this.state = 1274;
					this.initializerClause();
					this.state = 1276;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === FeiyanFormulaParser.Ellipsis) {
						this.state = 1275;
						this.match(FeiyanFormulaParser.Ellipsis);
					}

				}
				this.state = 1282;
				this._errHandler.sync(this);
				_alt = this._interp.adaptivePredict(this._input, 185, this._ctx);
			}

		} catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		} finally {
			this.exitRule();
		}
		return localctx;
	}



	bracedInitList() {
		let localctx = new BracedInitListContext(this, this._ctx, this.state);
		this.enterRule(localctx, 234, FeiyanFormulaParser.RULE_bracedInitList);
		var _la = 0; // Token type
		try {
			this.enterOuterAlt(localctx, 1);
			this.state = 1283;
			this.match(FeiyanFormulaParser.LeftBrace);
			this.state = 1288;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if ((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << FeiyanFormulaParser.IntegerLiteral) | (1 << FeiyanFormulaParser.CharacterLiteral) | (1 << FeiyanFormulaParser.FloatingLiteral) | (1 << FeiyanFormulaParser.StringLiteral) | (1 << FeiyanFormulaParser.BooleanLiteral) | (1 << FeiyanFormulaParser.PointerLiteral) | (1 << FeiyanFormulaParser.UserDefinedLiteral) | (1 << FeiyanFormulaParser.Auto) | (1 << FeiyanFormulaParser.Bool) | (1 << FeiyanFormulaParser.Char) | (1 << FeiyanFormulaParser.Char16) | (1 << FeiyanFormulaParser.Char32) | (1 << FeiyanFormulaParser.Const_cast) | (1 << FeiyanFormulaParser.Decltype) | (1 << FeiyanFormulaParser.Double) | (1 << FeiyanFormulaParser.Dynamic_cast))) !== 0) || ((((_la - 39)) & ~0x1f) == 0 && ((1 << (_la - 39)) & ((1 << (FeiyanFormulaParser.Float - 39)) | (1 << (FeiyanFormulaParser.Int - 39)) | (1 << (FeiyanFormulaParser.Long - 39)) | (1 << (FeiyanFormulaParser.New - 39)) | (1 << (FeiyanFormulaParser.Operator - 39)) | (1 << (FeiyanFormulaParser.Reinterpret_cast - 39)) | (1 << (FeiyanFormulaParser.Short - 39)) | (1 << (FeiyanFormulaParser.Signed - 39)) | (1 << (FeiyanFormulaParser.Static_cast - 39)) | (1 << (FeiyanFormulaParser.This - 39)))) !== 0) || ((((_la - 71)) & ~0x1f) == 0 && ((1 << (_la - 71)) & ((1 << (FeiyanFormulaParser.Throw - 71)) | (1 << (FeiyanFormulaParser.Unsigned - 71)) | (1 << (FeiyanFormulaParser.Void - 71)) | (1 << (FeiyanFormulaParser.Wchar - 71)) | (1 << (FeiyanFormulaParser.LeftParen - 71)) | (1 << (FeiyanFormulaParser.LeftBracket - 71)) | (1 << (FeiyanFormulaParser.LeftBrace - 71)) | (1 << (FeiyanFormulaParser.Plus - 71)) | (1 << (FeiyanFormulaParser.Minus - 71)) | (1 << (FeiyanFormulaParser.Star - 71)) | (1 << (FeiyanFormulaParser.And - 71)) | (1 << (FeiyanFormulaParser.Or - 71)) | (1 << (FeiyanFormulaParser.Tilde - 71)) | (1 << (FeiyanFormulaParser.Not - 71)))) !== 0) || ((((_la - 120)) & ~0x1f) == 0 && ((1 << (_la - 120)) & ((1 << (FeiyanFormulaParser.PlusPlus - 120)) | (1 << (FeiyanFormulaParser.MinusMinus - 120)) | (1 << (FeiyanFormulaParser.Doublecolon - 120)) | (1 << (FeiyanFormulaParser.Identifier - 120)))) !== 0)) {
				this.state = 1284;
				this.initializerList();
				this.state = 1286;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === FeiyanFormulaParser.Comma) {
					this.state = 1285;
					this.match(FeiyanFormulaParser.Comma);
				}

			}

			this.state = 1290;
			this.match(FeiyanFormulaParser.RightBrace);
		} catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		} finally {
			this.exitRule();
		}
		return localctx;
	}



	className() {
		let localctx = new ClassNameContext(this, this._ctx, this.state);
		this.enterRule(localctx, 236, FeiyanFormulaParser.RULE_className);
		try {
			this.state = 1294;
			this._errHandler.sync(this);
			var la_ = this._interp.adaptivePredict(this._input, 188, this._ctx);
			switch (la_) {
				case 1:
					this.enterOuterAlt(localctx, 1);
					this.state = 1292;
					this.match(FeiyanFormulaParser.Identifier);
					break;

				case 2:
					this.enterOuterAlt(localctx, 2);
					this.state = 1293;
					this.simpleTemplateId();
					break;

			}
		} catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		} finally {
			this.exitRule();
		}
		return localctx;
	}



	operatorFunctionId() {
		let localctx = new OperatorFunctionIdContext(this, this._ctx, this.state);
		this.enterRule(localctx, 238, FeiyanFormulaParser.RULE_operatorFunctionId);
		try {
			this.enterOuterAlt(localctx, 1);
			this.state = 1296;
			this.match(FeiyanFormulaParser.Operator);
			this.state = 1297;
			this.theOperator();
		} catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		} finally {
			this.exitRule();
		}
		return localctx;
	}



	literalOperatorId() {
		let localctx = new LiteralOperatorIdContext(this, this._ctx, this.state);
		this.enterRule(localctx, 240, FeiyanFormulaParser.RULE_literalOperatorId);
		try {
			this.enterOuterAlt(localctx, 1);
			this.state = 1299;
			this.match(FeiyanFormulaParser.Operator);
			this.state = 1303;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
				case FeiyanFormulaParser.StringLiteral:
					this.state = 1300;
					this.match(FeiyanFormulaParser.StringLiteral);
					this.state = 1301;
					this.match(FeiyanFormulaParser.Identifier);
					break;
				case FeiyanFormulaParser.UserDefinedStringLiteral:
					this.state = 1302;
					this.match(FeiyanFormulaParser.UserDefinedStringLiteral);
					break;
				default:
					throw new antlr4.error.NoViableAltException(this);
			}
		} catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		} finally {
			this.exitRule();
		}
		return localctx;
	}



	simpleTemplateId() {
		let localctx = new SimpleTemplateIdContext(this, this._ctx, this.state);
		this.enterRule(localctx, 242, FeiyanFormulaParser.RULE_simpleTemplateId);
		var _la = 0; // Token type
		try {
			this.enterOuterAlt(localctx, 1);
			this.state = 1305;
			this.templateName();
			this.state = 1306;
			this.match(FeiyanFormulaParser.Less);
			this.state = 1308;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if ((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << FeiyanFormulaParser.IntegerLiteral) | (1 << FeiyanFormulaParser.CharacterLiteral) | (1 << FeiyanFormulaParser.FloatingLiteral) | (1 << FeiyanFormulaParser.StringLiteral) | (1 << FeiyanFormulaParser.BooleanLiteral) | (1 << FeiyanFormulaParser.PointerLiteral) | (1 << FeiyanFormulaParser.UserDefinedLiteral) | (1 << FeiyanFormulaParser.Auto) | (1 << FeiyanFormulaParser.Bool) | (1 << FeiyanFormulaParser.Char) | (1 << FeiyanFormulaParser.Char16) | (1 << FeiyanFormulaParser.Char32) | (1 << FeiyanFormulaParser.Const) | (1 << FeiyanFormulaParser.Const_cast) | (1 << FeiyanFormulaParser.Decltype) | (1 << FeiyanFormulaParser.Double) | (1 << FeiyanFormulaParser.Dynamic_cast))) !== 0) || ((((_la - 33)) & ~0x1f) == 0 && ((1 << (_la - 33)) & ((1 << (FeiyanFormulaParser.Enum - 33)) | (1 << (FeiyanFormulaParser.Float - 33)) | (1 << (FeiyanFormulaParser.Int - 33)) | (1 << (FeiyanFormulaParser.Long - 33)) | (1 << (FeiyanFormulaParser.New - 33)) | (1 << (FeiyanFormulaParser.Operator - 33)) | (1 << (FeiyanFormulaParser.Reinterpret_cast - 33)) | (1 << (FeiyanFormulaParser.Short - 33)) | (1 << (FeiyanFormulaParser.Signed - 33)))) !== 0) || ((((_la - 65)) & ~0x1f) == 0 && ((1 << (_la - 65)) & ((1 << (FeiyanFormulaParser.Static_cast - 65)) | (1 << (FeiyanFormulaParser.This - 65)) | (1 << (FeiyanFormulaParser.Unsigned - 65)) | (1 << (FeiyanFormulaParser.Void - 65)) | (1 << (FeiyanFormulaParser.Volatile - 65)) | (1 << (FeiyanFormulaParser.Wchar - 65)) | (1 << (FeiyanFormulaParser.LeftParen - 65)) | (1 << (FeiyanFormulaParser.LeftBracket - 65)) | (1 << (FeiyanFormulaParser.Plus - 65)) | (1 << (FeiyanFormulaParser.Minus - 65)) | (1 << (FeiyanFormulaParser.Star - 65)))) !== 0) || ((((_la - 97)) & ~0x1f) == 0 && ((1 << (_la - 97)) & ((1 << (FeiyanFormulaParser.And - 97)) | (1 << (FeiyanFormulaParser.Or - 97)) | (1 << (FeiyanFormulaParser.Tilde - 97)) | (1 << (FeiyanFormulaParser.Not - 97)) | (1 << (FeiyanFormulaParser.PlusPlus - 97)) | (1 << (FeiyanFormulaParser.MinusMinus - 97)) | (1 << (FeiyanFormulaParser.Doublecolon - 97)))) !== 0) || _la === FeiyanFormulaParser.Identifier) {
				this.state = 1307;
				this.templateArgumentList();
			}

			this.state = 1310;
			this.match(FeiyanFormulaParser.Greater);
		} catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		} finally {
			this.exitRule();
		}
		return localctx;
	}



	templateName() {
		let localctx = new TemplateNameContext(this, this._ctx, this.state);
		this.enterRule(localctx, 244, FeiyanFormulaParser.RULE_templateName);
		try {
			this.enterOuterAlt(localctx, 1);
			this.state = 1312;
			this.match(FeiyanFormulaParser.Identifier);
		} catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		} finally {
			this.exitRule();
		}
		return localctx;
	}



	templateArgumentList() {
		let localctx = new TemplateArgumentListContext(this, this._ctx, this.state);
		this.enterRule(localctx, 246, FeiyanFormulaParser.RULE_templateArgumentList);
		var _la = 0; // Token type
		try {
			this.enterOuterAlt(localctx, 1);
			this.state = 1314;
			this.templateArgument();
			this.state = 1316;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === FeiyanFormulaParser.Ellipsis) {
				this.state = 1315;
				this.match(FeiyanFormulaParser.Ellipsis);
			}

			this.state = 1325;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === FeiyanFormulaParser.Comma) {
				this.state = 1318;
				this.match(FeiyanFormulaParser.Comma);
				this.state = 1319;
				this.templateArgument();
				this.state = 1321;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === FeiyanFormulaParser.Ellipsis) {
					this.state = 1320;
					this.match(FeiyanFormulaParser.Ellipsis);
				}

				this.state = 1327;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
		} catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		} finally {
			this.exitRule();
		}
		return localctx;
	}



	templateArgument() {
		let localctx = new TemplateArgumentContext(this, this._ctx, this.state);
		this.enterRule(localctx, 248, FeiyanFormulaParser.RULE_templateArgument);
		try {
			this.state = 1331;
			this._errHandler.sync(this);
			var la_ = this._interp.adaptivePredict(this._input, 194, this._ctx);
			switch (la_) {
				case 1:
					this.enterOuterAlt(localctx, 1);
					this.state = 1328;
					this.theTypeId();
					break;

				case 2:
					this.enterOuterAlt(localctx, 2);
					this.state = 1329;
					this.constantExpression();
					break;

				case 3:
					this.enterOuterAlt(localctx, 3);
					this.state = 1330;
					this.idExpression();
					break;

			}
		} catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		} finally {
			this.exitRule();
		}
		return localctx;
	}



	throwExpression() {
		let localctx = new ThrowExpressionContext(this, this._ctx, this.state);
		this.enterRule(localctx, 250, FeiyanFormulaParser.RULE_throwExpression);
		var _la = 0; // Token type
		try {
			this.enterOuterAlt(localctx, 1);
			this.state = 1333;
			this.match(FeiyanFormulaParser.Throw);
			this.state = 1335;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if ((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << FeiyanFormulaParser.IntegerLiteral) | (1 << FeiyanFormulaParser.CharacterLiteral) | (1 << FeiyanFormulaParser.FloatingLiteral) | (1 << FeiyanFormulaParser.StringLiteral) | (1 << FeiyanFormulaParser.BooleanLiteral) | (1 << FeiyanFormulaParser.PointerLiteral) | (1 << FeiyanFormulaParser.UserDefinedLiteral) | (1 << FeiyanFormulaParser.Auto) | (1 << FeiyanFormulaParser.Bool) | (1 << FeiyanFormulaParser.Char) | (1 << FeiyanFormulaParser.Char16) | (1 << FeiyanFormulaParser.Char32) | (1 << FeiyanFormulaParser.Const_cast) | (1 << FeiyanFormulaParser.Decltype) | (1 << FeiyanFormulaParser.Double) | (1 << FeiyanFormulaParser.Dynamic_cast))) !== 0) || ((((_la - 39)) & ~0x1f) == 0 && ((1 << (_la - 39)) & ((1 << (FeiyanFormulaParser.Float - 39)) | (1 << (FeiyanFormulaParser.Int - 39)) | (1 << (FeiyanFormulaParser.Long - 39)) | (1 << (FeiyanFormulaParser.New - 39)) | (1 << (FeiyanFormulaParser.Operator - 39)) | (1 << (FeiyanFormulaParser.Reinterpret_cast - 39)) | (1 << (FeiyanFormulaParser.Short - 39)) | (1 << (FeiyanFormulaParser.Signed - 39)) | (1 << (FeiyanFormulaParser.Static_cast - 39)) | (1 << (FeiyanFormulaParser.This - 39)))) !== 0) || ((((_la - 71)) & ~0x1f) == 0 && ((1 << (_la - 71)) & ((1 << (FeiyanFormulaParser.Throw - 71)) | (1 << (FeiyanFormulaParser.Unsigned - 71)) | (1 << (FeiyanFormulaParser.Void - 71)) | (1 << (FeiyanFormulaParser.Wchar - 71)) | (1 << (FeiyanFormulaParser.LeftParen - 71)) | (1 << (FeiyanFormulaParser.LeftBracket - 71)) | (1 << (FeiyanFormulaParser.Plus - 71)) | (1 << (FeiyanFormulaParser.Minus - 71)) | (1 << (FeiyanFormulaParser.Star - 71)) | (1 << (FeiyanFormulaParser.And - 71)) | (1 << (FeiyanFormulaParser.Or - 71)) | (1 << (FeiyanFormulaParser.Tilde - 71)) | (1 << (FeiyanFormulaParser.Not - 71)))) !== 0) || ((((_la - 120)) & ~0x1f) == 0 && ((1 << (_la - 120)) & ((1 << (FeiyanFormulaParser.PlusPlus - 120)) | (1 << (FeiyanFormulaParser.MinusMinus - 120)) | (1 << (FeiyanFormulaParser.Doublecolon - 120)) | (1 << (FeiyanFormulaParser.Identifier - 120)))) !== 0)) {
				this.state = 1334;
				this.assignmentExpression();
			}

		} catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		} finally {
			this.exitRule();
		}
		return localctx;
	}



	exceptionSpecification() {
		let localctx = new ExceptionSpecificationContext(this, this._ctx, this.state);
		this.enterRule(localctx, 252, FeiyanFormulaParser.RULE_exceptionSpecification);
		try {
			this.state = 1339;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
				case FeiyanFormulaParser.Throw:
					this.enterOuterAlt(localctx, 1);
					this.state = 1337;
					this.dynamicExceptionSpecification();
					break;
				case FeiyanFormulaParser.Noexcept:
					this.enterOuterAlt(localctx, 2);
					this.state = 1338;
					this.noeExceptSpecification();
					break;
				default:
					throw new antlr4.error.NoViableAltException(this);
			}
		} catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		} finally {
			this.exitRule();
		}
		return localctx;
	}



	dynamicExceptionSpecification() {
		let localctx = new DynamicExceptionSpecificationContext(this, this._ctx, this.state);
		this.enterRule(localctx, 254, FeiyanFormulaParser.RULE_dynamicExceptionSpecification);
		var _la = 0; // Token type
		try {
			this.enterOuterAlt(localctx, 1);
			this.state = 1341;
			this.match(FeiyanFormulaParser.Throw);
			this.state = 1342;
			this.match(FeiyanFormulaParser.LeftParen);
			this.state = 1344;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if ((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << FeiyanFormulaParser.Auto) | (1 << FeiyanFormulaParser.Bool) | (1 << FeiyanFormulaParser.Char) | (1 << FeiyanFormulaParser.Char16) | (1 << FeiyanFormulaParser.Char32) | (1 << FeiyanFormulaParser.Const) | (1 << FeiyanFormulaParser.Decltype) | (1 << FeiyanFormulaParser.Double))) !== 0) || ((((_la - 33)) & ~0x1f) == 0 && ((1 << (_la - 33)) & ((1 << (FeiyanFormulaParser.Enum - 33)) | (1 << (FeiyanFormulaParser.Float - 33)) | (1 << (FeiyanFormulaParser.Int - 33)) | (1 << (FeiyanFormulaParser.Long - 33)) | (1 << (FeiyanFormulaParser.Short - 33)) | (1 << (FeiyanFormulaParser.Signed - 33)))) !== 0) || ((((_la - 78)) & ~0x1f) == 0 && ((1 << (_la - 78)) & ((1 << (FeiyanFormulaParser.Unsigned - 78)) | (1 << (FeiyanFormulaParser.Void - 78)) | (1 << (FeiyanFormulaParser.Volatile - 78)) | (1 << (FeiyanFormulaParser.Wchar - 78)))) !== 0) || _la === FeiyanFormulaParser.Doublecolon || _la === FeiyanFormulaParser.Identifier) {
				this.state = 1343;
				this.typeIdList();
			}

			this.state = 1346;
			this.match(FeiyanFormulaParser.RightParen);
		} catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		} finally {
			this.exitRule();
		}
		return localctx;
	}



	typeIdList() {
		let localctx = new TypeIdListContext(this, this._ctx, this.state);
		this.enterRule(localctx, 256, FeiyanFormulaParser.RULE_typeIdList);
		var _la = 0; // Token type
		try {
			this.enterOuterAlt(localctx, 1);
			this.state = 1348;
			this.theTypeId();
			this.state = 1350;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === FeiyanFormulaParser.Ellipsis) {
				this.state = 1349;
				this.match(FeiyanFormulaParser.Ellipsis);
			}

			this.state = 1359;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === FeiyanFormulaParser.Comma) {
				this.state = 1352;
				this.match(FeiyanFormulaParser.Comma);
				this.state = 1353;
				this.theTypeId();
				this.state = 1355;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === FeiyanFormulaParser.Ellipsis) {
					this.state = 1354;
					this.match(FeiyanFormulaParser.Ellipsis);
				}

				this.state = 1361;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
		} catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		} finally {
			this.exitRule();
		}
		return localctx;
	}



	noeExceptSpecification() {
		let localctx = new NoeExceptSpecificationContext(this, this._ctx, this.state);
		this.enterRule(localctx, 258, FeiyanFormulaParser.RULE_noeExceptSpecification);
		try {
			this.state = 1368;
			this._errHandler.sync(this);
			var la_ = this._interp.adaptivePredict(this._input, 201, this._ctx);
			switch (la_) {
				case 1:
					this.enterOuterAlt(localctx, 1);
					this.state = 1362;
					this.match(FeiyanFormulaParser.Noexcept);
					this.state = 1363;
					this.match(FeiyanFormulaParser.LeftParen);
					this.state = 1364;
					this.constantExpression();
					this.state = 1365;
					this.match(FeiyanFormulaParser.RightParen);
					break;

				case 2:
					this.enterOuterAlt(localctx, 2);
					this.state = 1367;
					this.match(FeiyanFormulaParser.Noexcept);
					break;

			}
		} catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		} finally {
			this.exitRule();
		}
		return localctx;
	}



	theOperator() {
		let localctx = new TheOperatorContext(this, this._ctx, this.state);
		this.enterRule(localctx, 260, FeiyanFormulaParser.RULE_theOperator);
		try {
			this.state = 1421;
			this._errHandler.sync(this);
			var la_ = this._interp.adaptivePredict(this._input, 204, this._ctx);
			switch (la_) {
				case 1:
					this.enterOuterAlt(localctx, 1);
					this.state = 1370;
					this.match(FeiyanFormulaParser.New);
					this.state = 1373;
					this._errHandler.sync(this);
					var la_ = this._interp.adaptivePredict(this._input, 202, this._ctx);
					if (la_ === 1) {
						this.state = 1371;
						this.match(FeiyanFormulaParser.LeftBracket);
						this.state = 1372;
						this.match(FeiyanFormulaParser.RightBracket);

					}
					break;

				case 2:
					this.enterOuterAlt(localctx, 2);
					this.state = 1375;
					this.match(FeiyanFormulaParser.Delete);
					this.state = 1378;
					this._errHandler.sync(this);
					var la_ = this._interp.adaptivePredict(this._input, 203, this._ctx);
					if (la_ === 1) {
						this.state = 1376;
						this.match(FeiyanFormulaParser.LeftBracket);
						this.state = 1377;
						this.match(FeiyanFormulaParser.RightBracket);

					}
					break;

				case 3:
					this.enterOuterAlt(localctx, 3);
					this.state = 1380;
					this.match(FeiyanFormulaParser.Plus);
					break;

				case 4:
					this.enterOuterAlt(localctx, 4);
					this.state = 1381;
					this.match(FeiyanFormulaParser.Minus);
					break;

				case 5:
					this.enterOuterAlt(localctx, 5);
					this.state = 1382;
					this.match(FeiyanFormulaParser.Star);
					break;

				case 6:
					this.enterOuterAlt(localctx, 6);
					this.state = 1383;
					this.match(FeiyanFormulaParser.Div);
					break;

				case 7:
					this.enterOuterAlt(localctx, 7);
					this.state = 1384;
					this.match(FeiyanFormulaParser.Mod);
					break;

				case 8:
					this.enterOuterAlt(localctx, 8);
					this.state = 1385;
					this.match(FeiyanFormulaParser.Caret);
					break;

				case 9:
					this.enterOuterAlt(localctx, 9);
					this.state = 1386;
					this.match(FeiyanFormulaParser.And);
					break;

				case 10:
					this.enterOuterAlt(localctx, 10);
					this.state = 1387;
					this.match(FeiyanFormulaParser.Or);
					break;

				case 11:
					this.enterOuterAlt(localctx, 11);
					this.state = 1388;
					this.match(FeiyanFormulaParser.Tilde);
					break;

				case 12:
					this.enterOuterAlt(localctx, 12);
					this.state = 1389;
					this.match(FeiyanFormulaParser.Not);
					break;

				case 13:
					this.enterOuterAlt(localctx, 13);
					this.state = 1390;
					this.match(FeiyanFormulaParser.Assign);
					break;

				case 14:
					this.enterOuterAlt(localctx, 14);
					this.state = 1391;
					this.match(FeiyanFormulaParser.Greater);
					break;

				case 15:
					this.enterOuterAlt(localctx, 15);
					this.state = 1392;
					this.match(FeiyanFormulaParser.Less);
					break;

				case 16:
					this.enterOuterAlt(localctx, 16);
					this.state = 1393;
					this.match(FeiyanFormulaParser.GreaterEqual);
					break;

				case 17:
					this.enterOuterAlt(localctx, 17);
					this.state = 1394;
					this.match(FeiyanFormulaParser.PlusAssign);
					break;

				case 18:
					this.enterOuterAlt(localctx, 18);
					this.state = 1395;
					this.match(FeiyanFormulaParser.MinusAssign);
					break;

				case 19:
					this.enterOuterAlt(localctx, 19);
					this.state = 1396;
					this.match(FeiyanFormulaParser.StarAssign);
					break;

				case 20:
					this.enterOuterAlt(localctx, 20);
					this.state = 1397;
					this.match(FeiyanFormulaParser.ModAssign);
					break;

				case 21:
					this.enterOuterAlt(localctx, 21);
					this.state = 1398;
					this.match(FeiyanFormulaParser.XorAssign);
					break;

				case 22:
					this.enterOuterAlt(localctx, 22);
					this.state = 1399;
					this.match(FeiyanFormulaParser.AndAssign);
					break;

				case 23:
					this.enterOuterAlt(localctx, 23);
					this.state = 1400;
					this.match(FeiyanFormulaParser.OrAssign);
					break;

				case 24:
					this.enterOuterAlt(localctx, 24);
					this.state = 1401;
					this.match(FeiyanFormulaParser.Less);
					this.state = 1402;
					this.match(FeiyanFormulaParser.Less);
					break;

				case 25:
					this.enterOuterAlt(localctx, 25);
					this.state = 1403;
					this.match(FeiyanFormulaParser.Greater);
					this.state = 1404;
					this.match(FeiyanFormulaParser.Greater);
					break;

				case 26:
					this.enterOuterAlt(localctx, 26);
					this.state = 1405;
					this.match(FeiyanFormulaParser.RightShiftAssign);
					break;

				case 27:
					this.enterOuterAlt(localctx, 27);
					this.state = 1406;
					this.match(FeiyanFormulaParser.LeftShiftAssign);
					break;

				case 28:
					this.enterOuterAlt(localctx, 28);
					this.state = 1407;
					this.match(FeiyanFormulaParser.Equal);
					break;

				case 29:
					this.enterOuterAlt(localctx, 29);
					this.state = 1408;
					this.match(FeiyanFormulaParser.NotEqual);
					break;

				case 30:
					this.enterOuterAlt(localctx, 30);
					this.state = 1409;
					this.match(FeiyanFormulaParser.LessEqual);
					break;

				case 31:
					this.enterOuterAlt(localctx, 31);
					this.state = 1410;
					this.match(FeiyanFormulaParser.AndAnd);
					break;

				case 32:
					this.enterOuterAlt(localctx, 32);
					this.state = 1411;
					this.match(FeiyanFormulaParser.OrOr);
					break;

				case 33:
					this.enterOuterAlt(localctx, 33);
					this.state = 1412;
					this.match(FeiyanFormulaParser.PlusPlus);
					break;

				case 34:
					this.enterOuterAlt(localctx, 34);
					this.state = 1413;
					this.match(FeiyanFormulaParser.MinusMinus);
					break;

				case 35:
					this.enterOuterAlt(localctx, 35);
					this.state = 1414;
					this.match(FeiyanFormulaParser.Comma);
					break;

				case 36:
					this.enterOuterAlt(localctx, 36);
					this.state = 1415;
					this.match(FeiyanFormulaParser.ArrowStar);
					break;

				case 37:
					this.enterOuterAlt(localctx, 37);
					this.state = 1416;
					this.match(FeiyanFormulaParser.Arrow);
					break;

				case 38:
					this.enterOuterAlt(localctx, 38);
					this.state = 1417;
					this.match(FeiyanFormulaParser.LeftParen);
					this.state = 1418;
					this.match(FeiyanFormulaParser.RightParen);
					break;

				case 39:
					this.enterOuterAlt(localctx, 39);
					this.state = 1419;
					this.match(FeiyanFormulaParser.LeftBracket);
					this.state = 1420;
					this.match(FeiyanFormulaParser.RightBracket);
					break;

			}
		} catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		} finally {
			this.exitRule();
		}
		return localctx;
	}



	literal() {
		let localctx = new LiteralContext(this, this._ctx, this.state);
		this.enterRule(localctx, 262, FeiyanFormulaParser.RULE_literal);
		var _la = 0; // Token type
		try {
			this.enterOuterAlt(localctx, 1);
			this.state = 1423;
			_la = this._input.LA(1);
			if (!((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << FeiyanFormulaParser.IntegerLiteral) | (1 << FeiyanFormulaParser.CharacterLiteral) | (1 << FeiyanFormulaParser.FloatingLiteral) | (1 << FeiyanFormulaParser.StringLiteral) | (1 << FeiyanFormulaParser.BooleanLiteral) | (1 << FeiyanFormulaParser.PointerLiteral) | (1 << FeiyanFormulaParser.UserDefinedLiteral))) !== 0))) {
				this._errHandler.recoverInline(this);
			}
			else {
				this._errHandler.reportMatch(this);
				this.consume();
			}
		} catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		} finally {
			this.exitRule();
		}
		return localctx;
	}


}

FeiyanFormulaParser.EOF = antlr4.Token.EOF;
FeiyanFormulaParser.IntegerLiteral = 1;
FeiyanFormulaParser.CharacterLiteral = 2;
FeiyanFormulaParser.FloatingLiteral = 3;
FeiyanFormulaParser.StringLiteral = 4;
FeiyanFormulaParser.BooleanLiteral = 5;
FeiyanFormulaParser.PointerLiteral = 6;
FeiyanFormulaParser.UserDefinedLiteral = 7;
FeiyanFormulaParser.MultiLineMacro = 8;
FeiyanFormulaParser.Directive = 9;
FeiyanFormulaParser.Alignas = 10;
FeiyanFormulaParser.Alignof = 11;
FeiyanFormulaParser.Asm = 12;
FeiyanFormulaParser.Auto = 13;
FeiyanFormulaParser.Bool = 14;
FeiyanFormulaParser.Break = 15;
FeiyanFormulaParser.Case = 16;
FeiyanFormulaParser.Catch = 17;
FeiyanFormulaParser.Char = 18;
FeiyanFormulaParser.Char16 = 19;
FeiyanFormulaParser.Char32 = 20;
FeiyanFormulaParser.Class = 21;
FeiyanFormulaParser.Const = 22;
FeiyanFormulaParser.Constexpr = 23;
FeiyanFormulaParser.Const_cast = 24;
FeiyanFormulaParser.Continue = 25;
FeiyanFormulaParser.Decltype = 26;
FeiyanFormulaParser.Default = 27;
FeiyanFormulaParser.Delete = 28;
FeiyanFormulaParser.Do = 29;
FeiyanFormulaParser.Double = 30;
FeiyanFormulaParser.Dynamic_cast = 31;
FeiyanFormulaParser.Else = 32;
FeiyanFormulaParser.Enum = 33;
FeiyanFormulaParser.Explicit = 34;
FeiyanFormulaParser.Export = 35;
FeiyanFormulaParser.Extern = 36;
FeiyanFormulaParser.False_ = 37;
FeiyanFormulaParser.Final = 38;
FeiyanFormulaParser.Float = 39;
FeiyanFormulaParser.For = 40;
FeiyanFormulaParser.Friend = 41;
FeiyanFormulaParser.Goto = 42;
FeiyanFormulaParser.If = 43;
FeiyanFormulaParser.Inline = 44;
FeiyanFormulaParser.Int = 45;
FeiyanFormulaParser.Long = 46;
FeiyanFormulaParser.Mutable = 47;
FeiyanFormulaParser.Namespace = 48;
FeiyanFormulaParser.New = 49;
FeiyanFormulaParser.Noexcept = 50;
FeiyanFormulaParser.Nullptr = 51;
FeiyanFormulaParser.Operator = 52;
FeiyanFormulaParser.Override = 53;
FeiyanFormulaParser.Private = 54;
FeiyanFormulaParser.Protected = 55;
FeiyanFormulaParser.Public = 56;
FeiyanFormulaParser.Register = 57;
FeiyanFormulaParser.Reinterpret_cast = 58;
FeiyanFormulaParser.Return = 59;
FeiyanFormulaParser.Short = 60;
FeiyanFormulaParser.Signed = 61;
FeiyanFormulaParser.Sizeof = 62;
FeiyanFormulaParser.Static = 63;
FeiyanFormulaParser.Static_assert = 64;
FeiyanFormulaParser.Static_cast = 65;
FeiyanFormulaParser.Struct = 66;
FeiyanFormulaParser.Switch = 67;
FeiyanFormulaParser.Template = 68;
FeiyanFormulaParser.This = 69;
FeiyanFormulaParser.Thread_local = 70;
FeiyanFormulaParser.Throw = 71;
FeiyanFormulaParser.True_ = 72;
FeiyanFormulaParser.Try = 73;
FeiyanFormulaParser.Typedef = 74;
FeiyanFormulaParser.Typeid_ = 75;
FeiyanFormulaParser.Typename_ = 76;
FeiyanFormulaParser.Union = 77;
FeiyanFormulaParser.Unsigned = 78;
FeiyanFormulaParser.Using = 79;
FeiyanFormulaParser.Virtual = 80;
FeiyanFormulaParser.Void = 81;
FeiyanFormulaParser.Volatile = 82;
FeiyanFormulaParser.Wchar = 83;
FeiyanFormulaParser.While = 84;
FeiyanFormulaParser.LeftParen = 85;
FeiyanFormulaParser.RightParen = 86;
FeiyanFormulaParser.LeftBracket = 87;
FeiyanFormulaParser.RightBracket = 88;
FeiyanFormulaParser.LeftBrace = 89;
FeiyanFormulaParser.RightBrace = 90;
FeiyanFormulaParser.Plus = 91;
FeiyanFormulaParser.Minus = 92;
FeiyanFormulaParser.Star = 93;
FeiyanFormulaParser.Div = 94;
FeiyanFormulaParser.Mod = 95;
FeiyanFormulaParser.Caret = 96;
FeiyanFormulaParser.And = 97;
FeiyanFormulaParser.Or = 98;
FeiyanFormulaParser.Tilde = 99;
FeiyanFormulaParser.Not = 100;
FeiyanFormulaParser.Assign = 101;
FeiyanFormulaParser.Less = 102;
FeiyanFormulaParser.Greater = 103;
FeiyanFormulaParser.PlusAssign = 104;
FeiyanFormulaParser.MinusAssign = 105;
FeiyanFormulaParser.StarAssign = 106;
FeiyanFormulaParser.DivAssign = 107;
FeiyanFormulaParser.ModAssign = 108;
FeiyanFormulaParser.XorAssign = 109;
FeiyanFormulaParser.AndAssign = 110;
FeiyanFormulaParser.OrAssign = 111;
FeiyanFormulaParser.LeftShiftAssign = 112;
FeiyanFormulaParser.RightShiftAssign = 113;
FeiyanFormulaParser.Equal = 114;
FeiyanFormulaParser.NotEqual = 115;
FeiyanFormulaParser.LessEqual = 116;
FeiyanFormulaParser.GreaterEqual = 117;
FeiyanFormulaParser.AndAnd = 118;
FeiyanFormulaParser.OrOr = 119;
FeiyanFormulaParser.PlusPlus = 120;
FeiyanFormulaParser.MinusMinus = 121;
FeiyanFormulaParser.Comma = 122;
FeiyanFormulaParser.ArrowStar = 123;
FeiyanFormulaParser.Arrow = 124;
FeiyanFormulaParser.Question = 125;
FeiyanFormulaParser.Colon = 126;
FeiyanFormulaParser.Doublecolon = 127;
FeiyanFormulaParser.Semi = 128;
FeiyanFormulaParser.Dot = 129;
FeiyanFormulaParser.DotStar = 130;
FeiyanFormulaParser.Ellipsis = 131;
FeiyanFormulaParser.Identifier = 132;
FeiyanFormulaParser.DecimalLiteral = 133;
FeiyanFormulaParser.OctalLiteral = 134;
FeiyanFormulaParser.HexadecimalLiteral = 135;
FeiyanFormulaParser.BinaryLiteral = 136;
FeiyanFormulaParser.Integersuffix = 137;
FeiyanFormulaParser.UserDefinedIntegerLiteral = 138;
FeiyanFormulaParser.UserDefinedFloatingLiteral = 139;
FeiyanFormulaParser.UserDefinedStringLiteral = 140;
FeiyanFormulaParser.UserDefinedCharacterLiteral = 141;
FeiyanFormulaParser.Whitespace = 142;
FeiyanFormulaParser.Newline = 143;
FeiyanFormulaParser.BlockComment = 144;
FeiyanFormulaParser.LineComment = 145;

FeiyanFormulaParser.RULE_formulaDefinition = 0;
FeiyanFormulaParser.RULE_primaryExpression = 1;
FeiyanFormulaParser.RULE_idExpression = 2;
FeiyanFormulaParser.RULE_unqualifiedId = 3;
FeiyanFormulaParser.RULE_qualifiedId = 4;
FeiyanFormulaParser.RULE_nestedNameSpecifier = 5;
FeiyanFormulaParser.RULE_lambdaExpression = 6;
FeiyanFormulaParser.RULE_lambdaIntroducer = 7;
FeiyanFormulaParser.RULE_lambdaCapture = 8;
FeiyanFormulaParser.RULE_captureDefault = 9;
FeiyanFormulaParser.RULE_captureList = 10;
FeiyanFormulaParser.RULE_capture = 11;
FeiyanFormulaParser.RULE_simpleCapture = 12;
FeiyanFormulaParser.RULE_initcapture = 13;
FeiyanFormulaParser.RULE_lambdaDeclarator = 14;
FeiyanFormulaParser.RULE_postfixExpression = 15;
FeiyanFormulaParser.RULE_expressionList = 16;
FeiyanFormulaParser.RULE_unaryExpression = 17;
FeiyanFormulaParser.RULE_unaryOperator = 18;
FeiyanFormulaParser.RULE_newExpression = 19;
FeiyanFormulaParser.RULE_newPlacement = 20;
FeiyanFormulaParser.RULE_newTypeId = 21;
FeiyanFormulaParser.RULE_newDeclarator = 22;
FeiyanFormulaParser.RULE_noPointerNewDeclarator = 23;
FeiyanFormulaParser.RULE_newInitializer = 24;
FeiyanFormulaParser.RULE_castExpression = 25;
FeiyanFormulaParser.RULE_pointerMemberExpression = 26;
FeiyanFormulaParser.RULE_multiplicativeExpression = 27;
FeiyanFormulaParser.RULE_additiveExpression = 28;
FeiyanFormulaParser.RULE_shiftExpression = 29;
FeiyanFormulaParser.RULE_shiftOperator = 30;
FeiyanFormulaParser.RULE_relationalExpression = 31;
FeiyanFormulaParser.RULE_equalityExpression = 32;
FeiyanFormulaParser.RULE_andExpression = 33;
FeiyanFormulaParser.RULE_exclusiveOrExpression = 34;
FeiyanFormulaParser.RULE_inclusiveOrExpression = 35;
FeiyanFormulaParser.RULE_logicalAndExpression = 36;
FeiyanFormulaParser.RULE_logicalOrExpression = 37;
FeiyanFormulaParser.RULE_conditionalExpression = 38;
FeiyanFormulaParser.RULE_assignmentExpression = 39;
FeiyanFormulaParser.RULE_assignmentOperator = 40;
FeiyanFormulaParser.RULE_expression = 41;
FeiyanFormulaParser.RULE_constantExpression = 42;
FeiyanFormulaParser.RULE_statement = 43;
FeiyanFormulaParser.RULE_labeledStatement = 44;
FeiyanFormulaParser.RULE_expressionStatement = 45;
FeiyanFormulaParser.RULE_compoundStatement = 46;
FeiyanFormulaParser.RULE_statementSeq = 47;
FeiyanFormulaParser.RULE_selectionStatement = 48;
FeiyanFormulaParser.RULE_condition = 49;
FeiyanFormulaParser.RULE_iterationStatement = 50;
FeiyanFormulaParser.RULE_forInitStatement = 51;
FeiyanFormulaParser.RULE_forRangeDeclaration = 52;
FeiyanFormulaParser.RULE_forRangeInitializer = 53;
FeiyanFormulaParser.RULE_jumpStatement = 54;
FeiyanFormulaParser.RULE_declarationStatement = 55;
FeiyanFormulaParser.RULE_blockDeclaration = 56;
FeiyanFormulaParser.RULE_simpleDeclaration = 57;
FeiyanFormulaParser.RULE_declSpecifier = 58;
FeiyanFormulaParser.RULE_declSpecifierSeq = 59;
FeiyanFormulaParser.RULE_functionSpecifier = 60;
FeiyanFormulaParser.RULE_typedefName = 61;
FeiyanFormulaParser.RULE_typeSpecifier = 62;
FeiyanFormulaParser.RULE_trailingTypeSpecifier = 63;
FeiyanFormulaParser.RULE_typeSpecifierSeq = 64;
FeiyanFormulaParser.RULE_trailingTypeSpecifierSeq = 65;
FeiyanFormulaParser.RULE_simpleTypeLengthModifier = 66;
FeiyanFormulaParser.RULE_simpleTypeSignednessModifier = 67;
FeiyanFormulaParser.RULE_simpleTypeSpecifier = 68;
FeiyanFormulaParser.RULE_theTypeName = 69;
FeiyanFormulaParser.RULE_decltypeSpecifier = 70;
FeiyanFormulaParser.RULE_enumName = 71;
FeiyanFormulaParser.RULE_enumSpecifier = 72;
FeiyanFormulaParser.RULE_enumHead = 73;
FeiyanFormulaParser.RULE_opaqueEnumDeclaration = 74;
FeiyanFormulaParser.RULE_enumkey = 75;
FeiyanFormulaParser.RULE_enumbase = 76;
FeiyanFormulaParser.RULE_enumeratorList = 77;
FeiyanFormulaParser.RULE_enumeratorDefinition = 78;
FeiyanFormulaParser.RULE_enumerator = 79;
FeiyanFormulaParser.RULE_namespaceName = 80;
FeiyanFormulaParser.RULE_originalNamespaceName = 81;
FeiyanFormulaParser.RULE_namespaceAlias = 82;
FeiyanFormulaParser.RULE_attributeSpecifierSeq = 83;
FeiyanFormulaParser.RULE_attributeSpecifier = 84;
FeiyanFormulaParser.RULE_alignmentspecifier = 85;
FeiyanFormulaParser.RULE_attributeList = 86;
FeiyanFormulaParser.RULE_attribute = 87;
FeiyanFormulaParser.RULE_attributeNamespace = 88;
FeiyanFormulaParser.RULE_attributeArgumentClause = 89;
FeiyanFormulaParser.RULE_balancedTokenSeq = 90;
FeiyanFormulaParser.RULE_balancedtoken = 91;
FeiyanFormulaParser.RULE_initDeclaratorList = 92;
FeiyanFormulaParser.RULE_initDeclarator = 93;
FeiyanFormulaParser.RULE_declarator = 94;
FeiyanFormulaParser.RULE_pointerDeclarator = 95;
FeiyanFormulaParser.RULE_noPointerDeclarator = 96;
FeiyanFormulaParser.RULE_parametersAndQualifiers = 97;
FeiyanFormulaParser.RULE_trailingReturnType = 98;
FeiyanFormulaParser.RULE_pointerOperator = 99;
FeiyanFormulaParser.RULE_cvqualifierseq = 100;
FeiyanFormulaParser.RULE_cvQualifier = 101;
FeiyanFormulaParser.RULE_refqualifier = 102;
FeiyanFormulaParser.RULE_declaratorid = 103;
FeiyanFormulaParser.RULE_theTypeId = 104;
FeiyanFormulaParser.RULE_abstractDeclarator = 105;
FeiyanFormulaParser.RULE_pointerAbstractDeclarator = 106;
FeiyanFormulaParser.RULE_noPointerAbstractDeclarator = 107;
FeiyanFormulaParser.RULE_abstractPackDeclarator = 108;
FeiyanFormulaParser.RULE_noPointerAbstractPackDeclarator = 109;
FeiyanFormulaParser.RULE_parameterDeclarationClause = 110;
FeiyanFormulaParser.RULE_parameterDeclarationList = 111;
FeiyanFormulaParser.RULE_parameterDeclaration = 112;
FeiyanFormulaParser.RULE_initializer = 113;
FeiyanFormulaParser.RULE_braceOrEqualInitializer = 114;
FeiyanFormulaParser.RULE_initializerClause = 115;
FeiyanFormulaParser.RULE_initializerList = 116;
FeiyanFormulaParser.RULE_bracedInitList = 117;
FeiyanFormulaParser.RULE_className = 118;
FeiyanFormulaParser.RULE_operatorFunctionId = 119;
FeiyanFormulaParser.RULE_literalOperatorId = 120;
FeiyanFormulaParser.RULE_simpleTemplateId = 121;
FeiyanFormulaParser.RULE_templateName = 122;
FeiyanFormulaParser.RULE_templateArgumentList = 123;
FeiyanFormulaParser.RULE_templateArgument = 124;
FeiyanFormulaParser.RULE_throwExpression = 125;
FeiyanFormulaParser.RULE_exceptionSpecification = 126;
FeiyanFormulaParser.RULE_dynamicExceptionSpecification = 127;
FeiyanFormulaParser.RULE_typeIdList = 128;
FeiyanFormulaParser.RULE_noeExceptSpecification = 129;
FeiyanFormulaParser.RULE_theOperator = 130;
FeiyanFormulaParser.RULE_literal = 131;

class FormulaDefinitionContext extends antlr4.ParserRuleContext {

	constructor(parser, parent, invokingState) {
		if (parent === undefined) {
			parent = null;
		}
		if (invokingState === undefined || invokingState === null) {
			invokingState = -1;
		}
		super(parent, invokingState);
		this.parser = parser;
		this.ruleIndex = FeiyanFormulaParser.RULE_formulaDefinition;
	}

	statementSeq() {
		return this.getTypedRuleContext(StatementSeqContext, 0);
	};

	enterRule(listener) {
		if (listener instanceof FeiyanFormulaParserListener) {
			listener.enterFormulaDefinition(this);
		}
	}

	exitRule(listener) {
		if (listener instanceof FeiyanFormulaParserListener) {
			listener.exitFormulaDefinition(this);
		}
	}

	accept(visitor) {
		if (visitor instanceof FeiyanFormulaParserVisitor) {
			return visitor.visitFormulaDefinition(this);
		} else {
			return visitor.visitChildren(this);
		}
	}


}



class PrimaryExpressionContext extends antlr4.ParserRuleContext {

	constructor(parser, parent, invokingState) {
		if (parent === undefined) {
			parent = null;
		}
		if (invokingState === undefined || invokingState === null) {
			invokingState = -1;
		}
		super(parent, invokingState);
		this.parser = parser;
		this.ruleIndex = FeiyanFormulaParser.RULE_primaryExpression;
	}

	literal = function (i) {
		if (i === undefined) {
			i = null;
		}
		if (i === null) {
			return this.getTypedRuleContexts(LiteralContext);
		} else {
			return this.getTypedRuleContext(LiteralContext, i);
		}
	};

	This() {
		return this.getToken(FeiyanFormulaParser.This, 0);
	};

	LeftParen() {
		return this.getToken(FeiyanFormulaParser.LeftParen, 0);
	};

	expression() {
		return this.getTypedRuleContext(ExpressionContext, 0);
	};

	RightParen() {
		return this.getToken(FeiyanFormulaParser.RightParen, 0);
	};

	idExpression() {
		return this.getTypedRuleContext(IdExpressionContext, 0);
	};

	lambdaExpression() {
		return this.getTypedRuleContext(LambdaExpressionContext, 0);
	};

	enterRule(listener) {
		if (listener instanceof FeiyanFormulaParserListener) {
			listener.enterPrimaryExpression(this);
		}
	}

	exitRule(listener) {
		if (listener instanceof FeiyanFormulaParserListener) {
			listener.exitPrimaryExpression(this);
		}
	}

	accept(visitor) {
		if (visitor instanceof FeiyanFormulaParserVisitor) {
			return visitor.visitPrimaryExpression(this);
		} else {
			return visitor.visitChildren(this);
		}
	}


}



class IdExpressionContext extends antlr4.ParserRuleContext {

	constructor(parser, parent, invokingState) {
		if (parent === undefined) {
			parent = null;
		}
		if (invokingState === undefined || invokingState === null) {
			invokingState = -1;
		}
		super(parent, invokingState);
		this.parser = parser;
		this.ruleIndex = FeiyanFormulaParser.RULE_idExpression;
	}

	unqualifiedId() {
		return this.getTypedRuleContext(UnqualifiedIdContext, 0);
	};

	qualifiedId() {
		return this.getTypedRuleContext(QualifiedIdContext, 0);
	};

	enterRule(listener) {
		if (listener instanceof FeiyanFormulaParserListener) {
			listener.enterIdExpression(this);
		}
	}

	exitRule(listener) {
		if (listener instanceof FeiyanFormulaParserListener) {
			listener.exitIdExpression(this);
		}
	}

	accept(visitor) {
		if (visitor instanceof FeiyanFormulaParserVisitor) {
			return visitor.visitIdExpression(this);
		} else {
			return visitor.visitChildren(this);
		}
	}


}



class UnqualifiedIdContext extends antlr4.ParserRuleContext {

	constructor(parser, parent, invokingState) {
		if (parent === undefined) {
			parent = null;
		}
		if (invokingState === undefined || invokingState === null) {
			invokingState = -1;
		}
		super(parent, invokingState);
		this.parser = parser;
		this.ruleIndex = FeiyanFormulaParser.RULE_unqualifiedId;
	}

	Identifier() {
		return this.getToken(FeiyanFormulaParser.Identifier, 0);
	};

	operatorFunctionId() {
		return this.getTypedRuleContext(OperatorFunctionIdContext, 0);
	};

	literalOperatorId() {
		return this.getTypedRuleContext(LiteralOperatorIdContext, 0);
	};

	enterRule(listener) {
		if (listener instanceof FeiyanFormulaParserListener) {
			listener.enterUnqualifiedId(this);
		}
	}

	exitRule(listener) {
		if (listener instanceof FeiyanFormulaParserListener) {
			listener.exitUnqualifiedId(this);
		}
	}

	accept(visitor) {
		if (visitor instanceof FeiyanFormulaParserVisitor) {
			return visitor.visitUnqualifiedId(this);
		} else {
			return visitor.visitChildren(this);
		}
	}


}



class QualifiedIdContext extends antlr4.ParserRuleContext {

	constructor(parser, parent, invokingState) {
		if (parent === undefined) {
			parent = null;
		}
		if (invokingState === undefined || invokingState === null) {
			invokingState = -1;
		}
		super(parent, invokingState);
		this.parser = parser;
		this.ruleIndex = FeiyanFormulaParser.RULE_qualifiedId;
	}

	nestedNameSpecifier() {
		return this.getTypedRuleContext(NestedNameSpecifierContext, 0);
	};

	unqualifiedId() {
		return this.getTypedRuleContext(UnqualifiedIdContext, 0);
	};

	Template() {
		return this.getToken(FeiyanFormulaParser.Template, 0);
	};

	enterRule(listener) {
		if (listener instanceof FeiyanFormulaParserListener) {
			listener.enterQualifiedId(this);
		}
	}

	exitRule(listener) {
		if (listener instanceof FeiyanFormulaParserListener) {
			listener.exitQualifiedId(this);
		}
	}

	accept(visitor) {
		if (visitor instanceof FeiyanFormulaParserVisitor) {
			return visitor.visitQualifiedId(this);
		} else {
			return visitor.visitChildren(this);
		}
	}


}



class NestedNameSpecifierContext extends antlr4.ParserRuleContext {

	constructor(parser, parent, invokingState) {
		if (parent === undefined) {
			parent = null;
		}
		if (invokingState === undefined || invokingState === null) {
			invokingState = -1;
		}
		super(parent, invokingState);
		this.parser = parser;
		this.ruleIndex = FeiyanFormulaParser.RULE_nestedNameSpecifier;
	}

	Doublecolon() {
		return this.getToken(FeiyanFormulaParser.Doublecolon, 0);
	};

	theTypeName() {
		return this.getTypedRuleContext(TheTypeNameContext, 0);
	};

	namespaceName() {
		return this.getTypedRuleContext(NamespaceNameContext, 0);
	};

	decltypeSpecifier() {
		return this.getTypedRuleContext(DecltypeSpecifierContext, 0);
	};

	nestedNameSpecifier() {
		return this.getTypedRuleContext(NestedNameSpecifierContext, 0);
	};

	Identifier() {
		return this.getToken(FeiyanFormulaParser.Identifier, 0);
	};

	simpleTemplateId() {
		return this.getTypedRuleContext(SimpleTemplateIdContext, 0);
	};

	Template() {
		return this.getToken(FeiyanFormulaParser.Template, 0);
	};

	enterRule(listener) {
		if (listener instanceof FeiyanFormulaParserListener) {
			listener.enterNestedNameSpecifier(this);
		}
	}

	exitRule(listener) {
		if (listener instanceof FeiyanFormulaParserListener) {
			listener.exitNestedNameSpecifier(this);
		}
	}

	accept(visitor) {
		if (visitor instanceof FeiyanFormulaParserVisitor) {
			return visitor.visitNestedNameSpecifier(this);
		} else {
			return visitor.visitChildren(this);
		}
	}


}



class LambdaExpressionContext extends antlr4.ParserRuleContext {

	constructor(parser, parent, invokingState) {
		if (parent === undefined) {
			parent = null;
		}
		if (invokingState === undefined || invokingState === null) {
			invokingState = -1;
		}
		super(parent, invokingState);
		this.parser = parser;
		this.ruleIndex = FeiyanFormulaParser.RULE_lambdaExpression;
	}

	lambdaIntroducer() {
		return this.getTypedRuleContext(LambdaIntroducerContext, 0);
	};

	compoundStatement() {
		return this.getTypedRuleContext(CompoundStatementContext, 0);
	};

	lambdaDeclarator() {
		return this.getTypedRuleContext(LambdaDeclaratorContext, 0);
	};

	enterRule(listener) {
		if (listener instanceof FeiyanFormulaParserListener) {
			listener.enterLambdaExpression(this);
		}
	}

	exitRule(listener) {
		if (listener instanceof FeiyanFormulaParserListener) {
			listener.exitLambdaExpression(this);
		}
	}

	accept(visitor) {
		if (visitor instanceof FeiyanFormulaParserVisitor) {
			return visitor.visitLambdaExpression(this);
		} else {
			return visitor.visitChildren(this);
		}
	}


}



class LambdaIntroducerContext extends antlr4.ParserRuleContext {

	constructor(parser, parent, invokingState) {
		if (parent === undefined) {
			parent = null;
		}
		if (invokingState === undefined || invokingState === null) {
			invokingState = -1;
		}
		super(parent, invokingState);
		this.parser = parser;
		this.ruleIndex = FeiyanFormulaParser.RULE_lambdaIntroducer;
	}

	LeftBracket() {
		return this.getToken(FeiyanFormulaParser.LeftBracket, 0);
	};

	RightBracket() {
		return this.getToken(FeiyanFormulaParser.RightBracket, 0);
	};

	lambdaCapture() {
		return this.getTypedRuleContext(LambdaCaptureContext, 0);
	};

	enterRule(listener) {
		if (listener instanceof FeiyanFormulaParserListener) {
			listener.enterLambdaIntroducer(this);
		}
	}

	exitRule(listener) {
		if (listener instanceof FeiyanFormulaParserListener) {
			listener.exitLambdaIntroducer(this);
		}
	}

	accept(visitor) {
		if (visitor instanceof FeiyanFormulaParserVisitor) {
			return visitor.visitLambdaIntroducer(this);
		} else {
			return visitor.visitChildren(this);
		}
	}


}



class LambdaCaptureContext extends antlr4.ParserRuleContext {

	constructor(parser, parent, invokingState) {
		if (parent === undefined) {
			parent = null;
		}
		if (invokingState === undefined || invokingState === null) {
			invokingState = -1;
		}
		super(parent, invokingState);
		this.parser = parser;
		this.ruleIndex = FeiyanFormulaParser.RULE_lambdaCapture;
	}

	captureList() {
		return this.getTypedRuleContext(CaptureListContext, 0);
	};

	captureDefault() {
		return this.getTypedRuleContext(CaptureDefaultContext, 0);
	};

	Comma() {
		return this.getToken(FeiyanFormulaParser.Comma, 0);
	};

	enterRule(listener) {
		if (listener instanceof FeiyanFormulaParserListener) {
			listener.enterLambdaCapture(this);
		}
	}

	exitRule(listener) {
		if (listener instanceof FeiyanFormulaParserListener) {
			listener.exitLambdaCapture(this);
		}
	}

	accept(visitor) {
		if (visitor instanceof FeiyanFormulaParserVisitor) {
			return visitor.visitLambdaCapture(this);
		} else {
			return visitor.visitChildren(this);
		}
	}


}



class CaptureDefaultContext extends antlr4.ParserRuleContext {

	constructor(parser, parent, invokingState) {
		if (parent === undefined) {
			parent = null;
		}
		if (invokingState === undefined || invokingState === null) {
			invokingState = -1;
		}
		super(parent, invokingState);
		this.parser = parser;
		this.ruleIndex = FeiyanFormulaParser.RULE_captureDefault;
	}

	And() {
		return this.getToken(FeiyanFormulaParser.And, 0);
	};

	Assign() {
		return this.getToken(FeiyanFormulaParser.Assign, 0);
	};

	enterRule(listener) {
		if (listener instanceof FeiyanFormulaParserListener) {
			listener.enterCaptureDefault(this);
		}
	}

	exitRule(listener) {
		if (listener instanceof FeiyanFormulaParserListener) {
			listener.exitCaptureDefault(this);
		}
	}

	accept(visitor) {
		if (visitor instanceof FeiyanFormulaParserVisitor) {
			return visitor.visitCaptureDefault(this);
		} else {
			return visitor.visitChildren(this);
		}
	}


}



class CaptureListContext extends antlr4.ParserRuleContext {

	constructor(parser, parent, invokingState) {
		if (parent === undefined) {
			parent = null;
		}
		if (invokingState === undefined || invokingState === null) {
			invokingState = -1;
		}
		super(parent, invokingState);
		this.parser = parser;
		this.ruleIndex = FeiyanFormulaParser.RULE_captureList;
	}

	capture = function (i) {
		if (i === undefined) {
			i = null;
		}
		if (i === null) {
			return this.getTypedRuleContexts(CaptureContext);
		} else {
			return this.getTypedRuleContext(CaptureContext, i);
		}
	};

	Comma = function (i) {
		if (i === undefined) {
			i = null;
		}
		if (i === null) {
			return this.getTokens(FeiyanFormulaParser.Comma);
		} else {
			return this.getToken(FeiyanFormulaParser.Comma, i);
		}
	};


	Ellipsis() {
		return this.getToken(FeiyanFormulaParser.Ellipsis, 0);
	};

	enterRule(listener) {
		if (listener instanceof FeiyanFormulaParserListener) {
			listener.enterCaptureList(this);
		}
	}

	exitRule(listener) {
		if (listener instanceof FeiyanFormulaParserListener) {
			listener.exitCaptureList(this);
		}
	}

	accept(visitor) {
		if (visitor instanceof FeiyanFormulaParserVisitor) {
			return visitor.visitCaptureList(this);
		} else {
			return visitor.visitChildren(this);
		}
	}


}



class CaptureContext extends antlr4.ParserRuleContext {

	constructor(parser, parent, invokingState) {
		if (parent === undefined) {
			parent = null;
		}
		if (invokingState === undefined || invokingState === null) {
			invokingState = -1;
		}
		super(parent, invokingState);
		this.parser = parser;
		this.ruleIndex = FeiyanFormulaParser.RULE_capture;
	}

	simpleCapture() {
		return this.getTypedRuleContext(SimpleCaptureContext, 0);
	};

	initcapture() {
		return this.getTypedRuleContext(InitcaptureContext, 0);
	};

	enterRule(listener) {
		if (listener instanceof FeiyanFormulaParserListener) {
			listener.enterCapture(this);
		}
	}

	exitRule(listener) {
		if (listener instanceof FeiyanFormulaParserListener) {
			listener.exitCapture(this);
		}
	}

	accept(visitor) {
		if (visitor instanceof FeiyanFormulaParserVisitor) {
			return visitor.visitCapture(this);
		} else {
			return visitor.visitChildren(this);
		}
	}


}



class SimpleCaptureContext extends antlr4.ParserRuleContext {

	constructor(parser, parent, invokingState) {
		if (parent === undefined) {
			parent = null;
		}
		if (invokingState === undefined || invokingState === null) {
			invokingState = -1;
		}
		super(parent, invokingState);
		this.parser = parser;
		this.ruleIndex = FeiyanFormulaParser.RULE_simpleCapture;
	}

	Identifier() {
		return this.getToken(FeiyanFormulaParser.Identifier, 0);
	};

	And() {
		return this.getToken(FeiyanFormulaParser.And, 0);
	};

	This() {
		return this.getToken(FeiyanFormulaParser.This, 0);
	};

	enterRule(listener) {
		if (listener instanceof FeiyanFormulaParserListener) {
			listener.enterSimpleCapture(this);
		}
	}

	exitRule(listener) {
		if (listener instanceof FeiyanFormulaParserListener) {
			listener.exitSimpleCapture(this);
		}
	}

	accept(visitor) {
		if (visitor instanceof FeiyanFormulaParserVisitor) {
			return visitor.visitSimpleCapture(this);
		} else {
			return visitor.visitChildren(this);
		}
	}


}



class InitcaptureContext extends antlr4.ParserRuleContext {

	constructor(parser, parent, invokingState) {
		if (parent === undefined) {
			parent = null;
		}
		if (invokingState === undefined || invokingState === null) {
			invokingState = -1;
		}
		super(parent, invokingState);
		this.parser = parser;
		this.ruleIndex = FeiyanFormulaParser.RULE_initcapture;
	}

	Identifier() {
		return this.getToken(FeiyanFormulaParser.Identifier, 0);
	};

	initializer() {
		return this.getTypedRuleContext(InitializerContext, 0);
	};

	And() {
		return this.getToken(FeiyanFormulaParser.And, 0);
	};

	enterRule(listener) {
		if (listener instanceof FeiyanFormulaParserListener) {
			listener.enterInitcapture(this);
		}
	}

	exitRule(listener) {
		if (listener instanceof FeiyanFormulaParserListener) {
			listener.exitInitcapture(this);
		}
	}

	accept(visitor) {
		if (visitor instanceof FeiyanFormulaParserVisitor) {
			return visitor.visitInitcapture(this);
		} else {
			return visitor.visitChildren(this);
		}
	}


}



class LambdaDeclaratorContext extends antlr4.ParserRuleContext {

	constructor(parser, parent, invokingState) {
		if (parent === undefined) {
			parent = null;
		}
		if (invokingState === undefined || invokingState === null) {
			invokingState = -1;
		}
		super(parent, invokingState);
		this.parser = parser;
		this.ruleIndex = FeiyanFormulaParser.RULE_lambdaDeclarator;
	}

	LeftParen() {
		return this.getToken(FeiyanFormulaParser.LeftParen, 0);
	};

	RightParen() {
		return this.getToken(FeiyanFormulaParser.RightParen, 0);
	};

	parameterDeclarationClause() {
		return this.getTypedRuleContext(ParameterDeclarationClauseContext, 0);
	};

	Mutable() {
		return this.getToken(FeiyanFormulaParser.Mutable, 0);
	};

	exceptionSpecification() {
		return this.getTypedRuleContext(ExceptionSpecificationContext, 0);
	};

	attributeSpecifierSeq() {
		return this.getTypedRuleContext(AttributeSpecifierSeqContext, 0);
	};

	trailingReturnType() {
		return this.getTypedRuleContext(TrailingReturnTypeContext, 0);
	};

	enterRule(listener) {
		if (listener instanceof FeiyanFormulaParserListener) {
			listener.enterLambdaDeclarator(this);
		}
	}

	exitRule(listener) {
		if (listener instanceof FeiyanFormulaParserListener) {
			listener.exitLambdaDeclarator(this);
		}
	}

	accept(visitor) {
		if (visitor instanceof FeiyanFormulaParserVisitor) {
			return visitor.visitLambdaDeclarator(this);
		} else {
			return visitor.visitChildren(this);
		}
	}


}



class PostfixExpressionContext extends antlr4.ParserRuleContext {

	constructor(parser, parent, invokingState) {
		if (parent === undefined) {
			parent = null;
		}
		if (invokingState === undefined || invokingState === null) {
			invokingState = -1;
		}
		super(parent, invokingState);
		this.parser = parser;
		this.ruleIndex = FeiyanFormulaParser.RULE_postfixExpression;
	}

	primaryExpression() {
		return this.getTypedRuleContext(PrimaryExpressionContext, 0);
	};

	simpleTypeSpecifier() {
		return this.getTypedRuleContext(SimpleTypeSpecifierContext, 0);
	};

	LeftParen() {
		return this.getToken(FeiyanFormulaParser.LeftParen, 0);
	};

	RightParen() {
		return this.getToken(FeiyanFormulaParser.RightParen, 0);
	};

	bracedInitList() {
		return this.getTypedRuleContext(BracedInitListContext, 0);
	};

	expressionList() {
		return this.getTypedRuleContext(ExpressionListContext, 0);
	};

	Less() {
		return this.getToken(FeiyanFormulaParser.Less, 0);
	};

	theTypeId() {
		return this.getTypedRuleContext(TheTypeIdContext, 0);
	};

	Greater() {
		return this.getToken(FeiyanFormulaParser.Greater, 0);
	};

	expression() {
		return this.getTypedRuleContext(ExpressionContext, 0);
	};

	Dynamic_cast() {
		return this.getToken(FeiyanFormulaParser.Dynamic_cast, 0);
	};

	Static_cast() {
		return this.getToken(FeiyanFormulaParser.Static_cast, 0);
	};

	Reinterpret_cast() {
		return this.getToken(FeiyanFormulaParser.Reinterpret_cast, 0);
	};

	Const_cast() {
		return this.getToken(FeiyanFormulaParser.Const_cast, 0);
	};

	postfixExpression() {
		return this.getTypedRuleContext(PostfixExpressionContext, 0);
	};

	LeftBracket() {
		return this.getToken(FeiyanFormulaParser.LeftBracket, 0);
	};

	RightBracket() {
		return this.getToken(FeiyanFormulaParser.RightBracket, 0);
	};

	idExpression() {
		return this.getTypedRuleContext(IdExpressionContext, 0);
	};

	Dot() {
		return this.getToken(FeiyanFormulaParser.Dot, 0);
	};

	Arrow() {
		return this.getToken(FeiyanFormulaParser.Arrow, 0);
	};

	Template() {
		return this.getToken(FeiyanFormulaParser.Template, 0);
	};

	PlusPlus() {
		return this.getToken(FeiyanFormulaParser.PlusPlus, 0);
	};

	MinusMinus() {
		return this.getToken(FeiyanFormulaParser.MinusMinus, 0);
	};

	enterRule(listener) {
		if (listener instanceof FeiyanFormulaParserListener) {
			listener.enterPostfixExpression(this);
		}
	}

	exitRule(listener) {
		if (listener instanceof FeiyanFormulaParserListener) {
			listener.exitPostfixExpression(this);
		}
	}

	accept(visitor) {
		if (visitor instanceof FeiyanFormulaParserVisitor) {
			return visitor.visitPostfixExpression(this);
		} else {
			return visitor.visitChildren(this);
		}
	}


}



class ExpressionListContext extends antlr4.ParserRuleContext {

	constructor(parser, parent, invokingState) {
		if (parent === undefined) {
			parent = null;
		}
		if (invokingState === undefined || invokingState === null) {
			invokingState = -1;
		}
		super(parent, invokingState);
		this.parser = parser;
		this.ruleIndex = FeiyanFormulaParser.RULE_expressionList;
	}

	initializerList() {
		return this.getTypedRuleContext(InitializerListContext, 0);
	};

	enterRule(listener) {
		if (listener instanceof FeiyanFormulaParserListener) {
			listener.enterExpressionList(this);
		}
	}

	exitRule(listener) {
		if (listener instanceof FeiyanFormulaParserListener) {
			listener.exitExpressionList(this);
		}
	}

	accept(visitor) {
		if (visitor instanceof FeiyanFormulaParserVisitor) {
			return visitor.visitExpressionList(this);
		} else {
			return visitor.visitChildren(this);
		}
	}


}



class UnaryExpressionContext extends antlr4.ParserRuleContext {

	constructor(parser, parent, invokingState) {
		if (parent === undefined) {
			parent = null;
		}
		if (invokingState === undefined || invokingState === null) {
			invokingState = -1;
		}
		super(parent, invokingState);
		this.parser = parser;
		this.ruleIndex = FeiyanFormulaParser.RULE_unaryExpression;
	}

	postfixExpression() {
		return this.getTypedRuleContext(PostfixExpressionContext, 0);
	};

	unaryExpression() {
		return this.getTypedRuleContext(UnaryExpressionContext, 0);
	};

	PlusPlus() {
		return this.getToken(FeiyanFormulaParser.PlusPlus, 0);
	};

	MinusMinus() {
		return this.getToken(FeiyanFormulaParser.MinusMinus, 0);
	};

	unaryOperator() {
		return this.getTypedRuleContext(UnaryOperatorContext, 0);
	};

	newExpression() {
		return this.getTypedRuleContext(NewExpressionContext, 0);
	};

	enterRule(listener) {
		if (listener instanceof FeiyanFormulaParserListener) {
			listener.enterUnaryExpression(this);
		}
	}

	exitRule(listener) {
		if (listener instanceof FeiyanFormulaParserListener) {
			listener.exitUnaryExpression(this);
		}
	}

	accept(visitor) {
		if (visitor instanceof FeiyanFormulaParserVisitor) {
			return visitor.visitUnaryExpression(this);
		} else {
			return visitor.visitChildren(this);
		}
	}


}



class UnaryOperatorContext extends antlr4.ParserRuleContext {

	constructor(parser, parent, invokingState) {
		if (parent === undefined) {
			parent = null;
		}
		if (invokingState === undefined || invokingState === null) {
			invokingState = -1;
		}
		super(parent, invokingState);
		this.parser = parser;
		this.ruleIndex = FeiyanFormulaParser.RULE_unaryOperator;
	}

	Or() {
		return this.getToken(FeiyanFormulaParser.Or, 0);
	};

	Star() {
		return this.getToken(FeiyanFormulaParser.Star, 0);
	};

	And() {
		return this.getToken(FeiyanFormulaParser.And, 0);
	};

	Plus() {
		return this.getToken(FeiyanFormulaParser.Plus, 0);
	};

	Tilde() {
		return this.getToken(FeiyanFormulaParser.Tilde, 0);
	};

	Minus() {
		return this.getToken(FeiyanFormulaParser.Minus, 0);
	};

	Not() {
		return this.getToken(FeiyanFormulaParser.Not, 0);
	};

	enterRule(listener) {
		if (listener instanceof FeiyanFormulaParserListener) {
			listener.enterUnaryOperator(this);
		}
	}

	exitRule(listener) {
		if (listener instanceof FeiyanFormulaParserListener) {
			listener.exitUnaryOperator(this);
		}
	}

	accept(visitor) {
		if (visitor instanceof FeiyanFormulaParserVisitor) {
			return visitor.visitUnaryOperator(this);
		} else {
			return visitor.visitChildren(this);
		}
	}


}



class NewExpressionContext extends antlr4.ParserRuleContext {

	constructor(parser, parent, invokingState) {
		if (parent === undefined) {
			parent = null;
		}
		if (invokingState === undefined || invokingState === null) {
			invokingState = -1;
		}
		super(parent, invokingState);
		this.parser = parser;
		this.ruleIndex = FeiyanFormulaParser.RULE_newExpression;
	}

	New() {
		return this.getToken(FeiyanFormulaParser.New, 0);
	};

	newTypeId() {
		return this.getTypedRuleContext(NewTypeIdContext, 0);
	};

	Doublecolon() {
		return this.getToken(FeiyanFormulaParser.Doublecolon, 0);
	};

	newPlacement() {
		return this.getTypedRuleContext(NewPlacementContext, 0);
	};

	newInitializer() {
		return this.getTypedRuleContext(NewInitializerContext, 0);
	};

	LeftParen() {
		return this.getToken(FeiyanFormulaParser.LeftParen, 0);
	};

	theTypeId() {
		return this.getTypedRuleContext(TheTypeIdContext, 0);
	};

	RightParen() {
		return this.getToken(FeiyanFormulaParser.RightParen, 0);
	};

	enterRule(listener) {
		if (listener instanceof FeiyanFormulaParserListener) {
			listener.enterNewExpression(this);
		}
	}

	exitRule(listener) {
		if (listener instanceof FeiyanFormulaParserListener) {
			listener.exitNewExpression(this);
		}
	}

	accept(visitor) {
		if (visitor instanceof FeiyanFormulaParserVisitor) {
			return visitor.visitNewExpression(this);
		} else {
			return visitor.visitChildren(this);
		}
	}


}



class NewPlacementContext extends antlr4.ParserRuleContext {

	constructor(parser, parent, invokingState) {
		if (parent === undefined) {
			parent = null;
		}
		if (invokingState === undefined || invokingState === null) {
			invokingState = -1;
		}
		super(parent, invokingState);
		this.parser = parser;
		this.ruleIndex = FeiyanFormulaParser.RULE_newPlacement;
	}

	LeftParen() {
		return this.getToken(FeiyanFormulaParser.LeftParen, 0);
	};

	expressionList() {
		return this.getTypedRuleContext(ExpressionListContext, 0);
	};

	RightParen() {
		return this.getToken(FeiyanFormulaParser.RightParen, 0);
	};

	enterRule(listener) {
		if (listener instanceof FeiyanFormulaParserListener) {
			listener.enterNewPlacement(this);
		}
	}

	exitRule(listener) {
		if (listener instanceof FeiyanFormulaParserListener) {
			listener.exitNewPlacement(this);
		}
	}

	accept(visitor) {
		if (visitor instanceof FeiyanFormulaParserVisitor) {
			return visitor.visitNewPlacement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}


}



class NewTypeIdContext extends antlr4.ParserRuleContext {

	constructor(parser, parent, invokingState) {
		if (parent === undefined) {
			parent = null;
		}
		if (invokingState === undefined || invokingState === null) {
			invokingState = -1;
		}
		super(parent, invokingState);
		this.parser = parser;
		this.ruleIndex = FeiyanFormulaParser.RULE_newTypeId;
	}

	typeSpecifierSeq() {
		return this.getTypedRuleContext(TypeSpecifierSeqContext, 0);
	};

	newDeclarator() {
		return this.getTypedRuleContext(NewDeclaratorContext, 0);
	};

	enterRule(listener) {
		if (listener instanceof FeiyanFormulaParserListener) {
			listener.enterNewTypeId(this);
		}
	}

	exitRule(listener) {
		if (listener instanceof FeiyanFormulaParserListener) {
			listener.exitNewTypeId(this);
		}
	}

	accept(visitor) {
		if (visitor instanceof FeiyanFormulaParserVisitor) {
			return visitor.visitNewTypeId(this);
		} else {
			return visitor.visitChildren(this);
		}
	}


}



class NewDeclaratorContext extends antlr4.ParserRuleContext {

	constructor(parser, parent, invokingState) {
		if (parent === undefined) {
			parent = null;
		}
		if (invokingState === undefined || invokingState === null) {
			invokingState = -1;
		}
		super(parent, invokingState);
		this.parser = parser;
		this.ruleIndex = FeiyanFormulaParser.RULE_newDeclarator;
	}

	pointerOperator() {
		return this.getTypedRuleContext(PointerOperatorContext, 0);
	};

	newDeclarator() {
		return this.getTypedRuleContext(NewDeclaratorContext, 0);
	};

	noPointerNewDeclarator() {
		return this.getTypedRuleContext(NoPointerNewDeclaratorContext, 0);
	};

	enterRule(listener) {
		if (listener instanceof FeiyanFormulaParserListener) {
			listener.enterNewDeclarator(this);
		}
	}

	exitRule(listener) {
		if (listener instanceof FeiyanFormulaParserListener) {
			listener.exitNewDeclarator(this);
		}
	}

	accept(visitor) {
		if (visitor instanceof FeiyanFormulaParserVisitor) {
			return visitor.visitNewDeclarator(this);
		} else {
			return visitor.visitChildren(this);
		}
	}


}



class NoPointerNewDeclaratorContext extends antlr4.ParserRuleContext {

	constructor(parser, parent, invokingState) {
		if (parent === undefined) {
			parent = null;
		}
		if (invokingState === undefined || invokingState === null) {
			invokingState = -1;
		}
		super(parent, invokingState);
		this.parser = parser;
		this.ruleIndex = FeiyanFormulaParser.RULE_noPointerNewDeclarator;
	}

	LeftBracket() {
		return this.getToken(FeiyanFormulaParser.LeftBracket, 0);
	};

	expression() {
		return this.getTypedRuleContext(ExpressionContext, 0);
	};

	RightBracket() {
		return this.getToken(FeiyanFormulaParser.RightBracket, 0);
	};

	attributeSpecifierSeq() {
		return this.getTypedRuleContext(AttributeSpecifierSeqContext, 0);
	};

	noPointerNewDeclarator() {
		return this.getTypedRuleContext(NoPointerNewDeclaratorContext, 0);
	};

	constantExpression() {
		return this.getTypedRuleContext(ConstantExpressionContext, 0);
	};

	enterRule(listener) {
		if (listener instanceof FeiyanFormulaParserListener) {
			listener.enterNoPointerNewDeclarator(this);
		}
	}

	exitRule(listener) {
		if (listener instanceof FeiyanFormulaParserListener) {
			listener.exitNoPointerNewDeclarator(this);
		}
	}

	accept(visitor) {
		if (visitor instanceof FeiyanFormulaParserVisitor) {
			return visitor.visitNoPointerNewDeclarator(this);
		} else {
			return visitor.visitChildren(this);
		}
	}


}



class NewInitializerContext extends antlr4.ParserRuleContext {

	constructor(parser, parent, invokingState) {
		if (parent === undefined) {
			parent = null;
		}
		if (invokingState === undefined || invokingState === null) {
			invokingState = -1;
		}
		super(parent, invokingState);
		this.parser = parser;
		this.ruleIndex = FeiyanFormulaParser.RULE_newInitializer;
	}

	LeftParen() {
		return this.getToken(FeiyanFormulaParser.LeftParen, 0);
	};

	RightParen() {
		return this.getToken(FeiyanFormulaParser.RightParen, 0);
	};

	expressionList() {
		return this.getTypedRuleContext(ExpressionListContext, 0);
	};

	bracedInitList() {
		return this.getTypedRuleContext(BracedInitListContext, 0);
	};

	enterRule(listener) {
		if (listener instanceof FeiyanFormulaParserListener) {
			listener.enterNewInitializer(this);
		}
	}

	exitRule(listener) {
		if (listener instanceof FeiyanFormulaParserListener) {
			listener.exitNewInitializer(this);
		}
	}

	accept(visitor) {
		if (visitor instanceof FeiyanFormulaParserVisitor) {
			return visitor.visitNewInitializer(this);
		} else {
			return visitor.visitChildren(this);
		}
	}


}



class CastExpressionContext extends antlr4.ParserRuleContext {

	constructor(parser, parent, invokingState) {
		if (parent === undefined) {
			parent = null;
		}
		if (invokingState === undefined || invokingState === null) {
			invokingState = -1;
		}
		super(parent, invokingState);
		this.parser = parser;
		this.ruleIndex = FeiyanFormulaParser.RULE_castExpression;
	}

	unaryExpression() {
		return this.getTypedRuleContext(UnaryExpressionContext, 0);
	};

	LeftParen() {
		return this.getToken(FeiyanFormulaParser.LeftParen, 0);
	};

	theTypeId() {
		return this.getTypedRuleContext(TheTypeIdContext, 0);
	};

	RightParen() {
		return this.getToken(FeiyanFormulaParser.RightParen, 0);
	};

	castExpression() {
		return this.getTypedRuleContext(CastExpressionContext, 0);
	};

	enterRule(listener) {
		if (listener instanceof FeiyanFormulaParserListener) {
			listener.enterCastExpression(this);
		}
	}

	exitRule(listener) {
		if (listener instanceof FeiyanFormulaParserListener) {
			listener.exitCastExpression(this);
		}
	}

	accept(visitor) {
		if (visitor instanceof FeiyanFormulaParserVisitor) {
			return visitor.visitCastExpression(this);
		} else {
			return visitor.visitChildren(this);
		}
	}


}



class PointerMemberExpressionContext extends antlr4.ParserRuleContext {

	constructor(parser, parent, invokingState) {
		if (parent === undefined) {
			parent = null;
		}
		if (invokingState === undefined || invokingState === null) {
			invokingState = -1;
		}
		super(parent, invokingState);
		this.parser = parser;
		this.ruleIndex = FeiyanFormulaParser.RULE_pointerMemberExpression;
	}

	castExpression = function (i) {
		if (i === undefined) {
			i = null;
		}
		if (i === null) {
			return this.getTypedRuleContexts(CastExpressionContext);
		} else {
			return this.getTypedRuleContext(CastExpressionContext, i);
		}
	};

	DotStar = function (i) {
		if (i === undefined) {
			i = null;
		}
		if (i === null) {
			return this.getTokens(FeiyanFormulaParser.DotStar);
		} else {
			return this.getToken(FeiyanFormulaParser.DotStar, i);
		}
	};


	ArrowStar = function (i) {
		if (i === undefined) {
			i = null;
		}
		if (i === null) {
			return this.getTokens(FeiyanFormulaParser.ArrowStar);
		} else {
			return this.getToken(FeiyanFormulaParser.ArrowStar, i);
		}
	};


	enterRule(listener) {
		if (listener instanceof FeiyanFormulaParserListener) {
			listener.enterPointerMemberExpression(this);
		}
	}

	exitRule(listener) {
		if (listener instanceof FeiyanFormulaParserListener) {
			listener.exitPointerMemberExpression(this);
		}
	}

	accept(visitor) {
		if (visitor instanceof FeiyanFormulaParserVisitor) {
			return visitor.visitPointerMemberExpression(this);
		} else {
			return visitor.visitChildren(this);
		}
	}


}



class MultiplicativeExpressionContext extends antlr4.ParserRuleContext {

	constructor(parser, parent, invokingState) {
		if (parent === undefined) {
			parent = null;
		}
		if (invokingState === undefined || invokingState === null) {
			invokingState = -1;
		}
		super(parent, invokingState);
		this.parser = parser;
		this.ruleIndex = FeiyanFormulaParser.RULE_multiplicativeExpression;
	}

	pointerMemberExpression = function (i) {
		if (i === undefined) {
			i = null;
		}
		if (i === null) {
			return this.getTypedRuleContexts(PointerMemberExpressionContext);
		} else {
			return this.getTypedRuleContext(PointerMemberExpressionContext, i);
		}
	};

	Star = function (i) {
		if (i === undefined) {
			i = null;
		}
		if (i === null) {
			return this.getTokens(FeiyanFormulaParser.Star);
		} else {
			return this.getToken(FeiyanFormulaParser.Star, i);
		}
	};


	Div = function (i) {
		if (i === undefined) {
			i = null;
		}
		if (i === null) {
			return this.getTokens(FeiyanFormulaParser.Div);
		} else {
			return this.getToken(FeiyanFormulaParser.Div, i);
		}
	};


	Mod = function (i) {
		if (i === undefined) {
			i = null;
		}
		if (i === null) {
			return this.getTokens(FeiyanFormulaParser.Mod);
		} else {
			return this.getToken(FeiyanFormulaParser.Mod, i);
		}
	};


	enterRule(listener) {
		if (listener instanceof FeiyanFormulaParserListener) {
			listener.enterMultiplicativeExpression(this);
		}
	}

	exitRule(listener) {
		if (listener instanceof FeiyanFormulaParserListener) {
			listener.exitMultiplicativeExpression(this);
		}
	}

	accept(visitor) {
		if (visitor instanceof FeiyanFormulaParserVisitor) {
			return visitor.visitMultiplicativeExpression(this);
		} else {
			return visitor.visitChildren(this);
		}
	}


}



class AdditiveExpressionContext extends antlr4.ParserRuleContext {

	constructor(parser, parent, invokingState) {
		if (parent === undefined) {
			parent = null;
		}
		if (invokingState === undefined || invokingState === null) {
			invokingState = -1;
		}
		super(parent, invokingState);
		this.parser = parser;
		this.ruleIndex = FeiyanFormulaParser.RULE_additiveExpression;
	}

	multiplicativeExpression = function (i) {
		if (i === undefined) {
			i = null;
		}
		if (i === null) {
			return this.getTypedRuleContexts(MultiplicativeExpressionContext);
		} else {
			return this.getTypedRuleContext(MultiplicativeExpressionContext, i);
		}
	};

	Plus = function (i) {
		if (i === undefined) {
			i = null;
		}
		if (i === null) {
			return this.getTokens(FeiyanFormulaParser.Plus);
		} else {
			return this.getToken(FeiyanFormulaParser.Plus, i);
		}
	};


	Minus = function (i) {
		if (i === undefined) {
			i = null;
		}
		if (i === null) {
			return this.getTokens(FeiyanFormulaParser.Minus);
		} else {
			return this.getToken(FeiyanFormulaParser.Minus, i);
		}
	};


	enterRule(listener) {
		if (listener instanceof FeiyanFormulaParserListener) {
			listener.enterAdditiveExpression(this);
		}
	}

	exitRule(listener) {
		if (listener instanceof FeiyanFormulaParserListener) {
			listener.exitAdditiveExpression(this);
		}
	}

	accept(visitor) {
		if (visitor instanceof FeiyanFormulaParserVisitor) {
			return visitor.visitAdditiveExpression(this);
		} else {
			return visitor.visitChildren(this);
		}
	}


}



class ShiftExpressionContext extends antlr4.ParserRuleContext {

	constructor(parser, parent, invokingState) {
		if (parent === undefined) {
			parent = null;
		}
		if (invokingState === undefined || invokingState === null) {
			invokingState = -1;
		}
		super(parent, invokingState);
		this.parser = parser;
		this.ruleIndex = FeiyanFormulaParser.RULE_shiftExpression;
	}

	additiveExpression = function (i) {
		if (i === undefined) {
			i = null;
		}
		if (i === null) {
			return this.getTypedRuleContexts(AdditiveExpressionContext);
		} else {
			return this.getTypedRuleContext(AdditiveExpressionContext, i);
		}
	};

	shiftOperator = function (i) {
		if (i === undefined) {
			i = null;
		}
		if (i === null) {
			return this.getTypedRuleContexts(ShiftOperatorContext);
		} else {
			return this.getTypedRuleContext(ShiftOperatorContext, i);
		}
	};

	enterRule(listener) {
		if (listener instanceof FeiyanFormulaParserListener) {
			listener.enterShiftExpression(this);
		}
	}

	exitRule(listener) {
		if (listener instanceof FeiyanFormulaParserListener) {
			listener.exitShiftExpression(this);
		}
	}

	accept(visitor) {
		if (visitor instanceof FeiyanFormulaParserVisitor) {
			return visitor.visitShiftExpression(this);
		} else {
			return visitor.visitChildren(this);
		}
	}


}



class ShiftOperatorContext extends antlr4.ParserRuleContext {

	constructor(parser, parent, invokingState) {
		if (parent === undefined) {
			parent = null;
		}
		if (invokingState === undefined || invokingState === null) {
			invokingState = -1;
		}
		super(parent, invokingState);
		this.parser = parser;
		this.ruleIndex = FeiyanFormulaParser.RULE_shiftOperator;
	}

	Greater = function (i) {
		if (i === undefined) {
			i = null;
		}
		if (i === null) {
			return this.getTokens(FeiyanFormulaParser.Greater);
		} else {
			return this.getToken(FeiyanFormulaParser.Greater, i);
		}
	};


	Less = function (i) {
		if (i === undefined) {
			i = null;
		}
		if (i === null) {
			return this.getTokens(FeiyanFormulaParser.Less);
		} else {
			return this.getToken(FeiyanFormulaParser.Less, i);
		}
	};


	enterRule(listener) {
		if (listener instanceof FeiyanFormulaParserListener) {
			listener.enterShiftOperator(this);
		}
	}

	exitRule(listener) {
		if (listener instanceof FeiyanFormulaParserListener) {
			listener.exitShiftOperator(this);
		}
	}

	accept(visitor) {
		if (visitor instanceof FeiyanFormulaParserVisitor) {
			return visitor.visitShiftOperator(this);
		} else {
			return visitor.visitChildren(this);
		}
	}


}



class RelationalExpressionContext extends antlr4.ParserRuleContext {

	constructor(parser, parent, invokingState) {
		if (parent === undefined) {
			parent = null;
		}
		if (invokingState === undefined || invokingState === null) {
			invokingState = -1;
		}
		super(parent, invokingState);
		this.parser = parser;
		this.ruleIndex = FeiyanFormulaParser.RULE_relationalExpression;
	}

	shiftExpression = function (i) {
		if (i === undefined) {
			i = null;
		}
		if (i === null) {
			return this.getTypedRuleContexts(ShiftExpressionContext);
		} else {
			return this.getTypedRuleContext(ShiftExpressionContext, i);
		}
	};

	Less = function (i) {
		if (i === undefined) {
			i = null;
		}
		if (i === null) {
			return this.getTokens(FeiyanFormulaParser.Less);
		} else {
			return this.getToken(FeiyanFormulaParser.Less, i);
		}
	};


	Greater = function (i) {
		if (i === undefined) {
			i = null;
		}
		if (i === null) {
			return this.getTokens(FeiyanFormulaParser.Greater);
		} else {
			return this.getToken(FeiyanFormulaParser.Greater, i);
		}
	};


	LessEqual = function (i) {
		if (i === undefined) {
			i = null;
		}
		if (i === null) {
			return this.getTokens(FeiyanFormulaParser.LessEqual);
		} else {
			return this.getToken(FeiyanFormulaParser.LessEqual, i);
		}
	};


	GreaterEqual = function (i) {
		if (i === undefined) {
			i = null;
		}
		if (i === null) {
			return this.getTokens(FeiyanFormulaParser.GreaterEqual);
		} else {
			return this.getToken(FeiyanFormulaParser.GreaterEqual, i);
		}
	};


	enterRule(listener) {
		if (listener instanceof FeiyanFormulaParserListener) {
			listener.enterRelationalExpression(this);
		}
	}

	exitRule(listener) {
		if (listener instanceof FeiyanFormulaParserListener) {
			listener.exitRelationalExpression(this);
		}
	}

	accept(visitor) {
		if (visitor instanceof FeiyanFormulaParserVisitor) {
			return visitor.visitRelationalExpression(this);
		} else {
			return visitor.visitChildren(this);
		}
	}


}



class EqualityExpressionContext extends antlr4.ParserRuleContext {

	constructor(parser, parent, invokingState) {
		if (parent === undefined) {
			parent = null;
		}
		if (invokingState === undefined || invokingState === null) {
			invokingState = -1;
		}
		super(parent, invokingState);
		this.parser = parser;
		this.ruleIndex = FeiyanFormulaParser.RULE_equalityExpression;
	}

	relationalExpression = function (i) {
		if (i === undefined) {
			i = null;
		}
		if (i === null) {
			return this.getTypedRuleContexts(RelationalExpressionContext);
		} else {
			return this.getTypedRuleContext(RelationalExpressionContext, i);
		}
	};

	Equal = function (i) {
		if (i === undefined) {
			i = null;
		}
		if (i === null) {
			return this.getTokens(FeiyanFormulaParser.Equal);
		} else {
			return this.getToken(FeiyanFormulaParser.Equal, i);
		}
	};


	NotEqual = function (i) {
		if (i === undefined) {
			i = null;
		}
		if (i === null) {
			return this.getTokens(FeiyanFormulaParser.NotEqual);
		} else {
			return this.getToken(FeiyanFormulaParser.NotEqual, i);
		}
	};


	enterRule(listener) {
		if (listener instanceof FeiyanFormulaParserListener) {
			listener.enterEqualityExpression(this);
		}
	}

	exitRule(listener) {
		if (listener instanceof FeiyanFormulaParserListener) {
			listener.exitEqualityExpression(this);
		}
	}

	accept(visitor) {
		if (visitor instanceof FeiyanFormulaParserVisitor) {
			return visitor.visitEqualityExpression(this);
		} else {
			return visitor.visitChildren(this);
		}
	}


}



class AndExpressionContext extends antlr4.ParserRuleContext {

	constructor(parser, parent, invokingState) {
		if (parent === undefined) {
			parent = null;
		}
		if (invokingState === undefined || invokingState === null) {
			invokingState = -1;
		}
		super(parent, invokingState);
		this.parser = parser;
		this.ruleIndex = FeiyanFormulaParser.RULE_andExpression;
	}

	equalityExpression = function (i) {
		if (i === undefined) {
			i = null;
		}
		if (i === null) {
			return this.getTypedRuleContexts(EqualityExpressionContext);
		} else {
			return this.getTypedRuleContext(EqualityExpressionContext, i);
		}
	};

	And = function (i) {
		if (i === undefined) {
			i = null;
		}
		if (i === null) {
			return this.getTokens(FeiyanFormulaParser.And);
		} else {
			return this.getToken(FeiyanFormulaParser.And, i);
		}
	};


	enterRule(listener) {
		if (listener instanceof FeiyanFormulaParserListener) {
			listener.enterAndExpression(this);
		}
	}

	exitRule(listener) {
		if (listener instanceof FeiyanFormulaParserListener) {
			listener.exitAndExpression(this);
		}
	}

	accept(visitor) {
		if (visitor instanceof FeiyanFormulaParserVisitor) {
			return visitor.visitAndExpression(this);
		} else {
			return visitor.visitChildren(this);
		}
	}


}



class ExclusiveOrExpressionContext extends antlr4.ParserRuleContext {

	constructor(parser, parent, invokingState) {
		if (parent === undefined) {
			parent = null;
		}
		if (invokingState === undefined || invokingState === null) {
			invokingState = -1;
		}
		super(parent, invokingState);
		this.parser = parser;
		this.ruleIndex = FeiyanFormulaParser.RULE_exclusiveOrExpression;
	}

	andExpression = function (i) {
		if (i === undefined) {
			i = null;
		}
		if (i === null) {
			return this.getTypedRuleContexts(AndExpressionContext);
		} else {
			return this.getTypedRuleContext(AndExpressionContext, i);
		}
	};

	Caret = function (i) {
		if (i === undefined) {
			i = null;
		}
		if (i === null) {
			return this.getTokens(FeiyanFormulaParser.Caret);
		} else {
			return this.getToken(FeiyanFormulaParser.Caret, i);
		}
	};


	enterRule(listener) {
		if (listener instanceof FeiyanFormulaParserListener) {
			listener.enterExclusiveOrExpression(this);
		}
	}

	exitRule(listener) {
		if (listener instanceof FeiyanFormulaParserListener) {
			listener.exitExclusiveOrExpression(this);
		}
	}

	accept(visitor) {
		if (visitor instanceof FeiyanFormulaParserVisitor) {
			return visitor.visitExclusiveOrExpression(this);
		} else {
			return visitor.visitChildren(this);
		}
	}


}



class InclusiveOrExpressionContext extends antlr4.ParserRuleContext {

	constructor(parser, parent, invokingState) {
		if (parent === undefined) {
			parent = null;
		}
		if (invokingState === undefined || invokingState === null) {
			invokingState = -1;
		}
		super(parent, invokingState);
		this.parser = parser;
		this.ruleIndex = FeiyanFormulaParser.RULE_inclusiveOrExpression;
	}

	exclusiveOrExpression = function (i) {
		if (i === undefined) {
			i = null;
		}
		if (i === null) {
			return this.getTypedRuleContexts(ExclusiveOrExpressionContext);
		} else {
			return this.getTypedRuleContext(ExclusiveOrExpressionContext, i);
		}
	};

	Or = function (i) {
		if (i === undefined) {
			i = null;
		}
		if (i === null) {
			return this.getTokens(FeiyanFormulaParser.Or);
		} else {
			return this.getToken(FeiyanFormulaParser.Or, i);
		}
	};


	enterRule(listener) {
		if (listener instanceof FeiyanFormulaParserListener) {
			listener.enterInclusiveOrExpression(this);
		}
	}

	exitRule(listener) {
		if (listener instanceof FeiyanFormulaParserListener) {
			listener.exitInclusiveOrExpression(this);
		}
	}

	accept(visitor) {
		if (visitor instanceof FeiyanFormulaParserVisitor) {
			return visitor.visitInclusiveOrExpression(this);
		} else {
			return visitor.visitChildren(this);
		}
	}


}



class LogicalAndExpressionContext extends antlr4.ParserRuleContext {

	constructor(parser, parent, invokingState) {
		if (parent === undefined) {
			parent = null;
		}
		if (invokingState === undefined || invokingState === null) {
			invokingState = -1;
		}
		super(parent, invokingState);
		this.parser = parser;
		this.ruleIndex = FeiyanFormulaParser.RULE_logicalAndExpression;
	}

	inclusiveOrExpression = function (i) {
		if (i === undefined) {
			i = null;
		}
		if (i === null) {
			return this.getTypedRuleContexts(InclusiveOrExpressionContext);
		} else {
			return this.getTypedRuleContext(InclusiveOrExpressionContext, i);
		}
	};

	AndAnd = function (i) {
		if (i === undefined) {
			i = null;
		}
		if (i === null) {
			return this.getTokens(FeiyanFormulaParser.AndAnd);
		} else {
			return this.getToken(FeiyanFormulaParser.AndAnd, i);
		}
	};


	enterRule(listener) {
		if (listener instanceof FeiyanFormulaParserListener) {
			listener.enterLogicalAndExpression(this);
		}
	}

	exitRule(listener) {
		if (listener instanceof FeiyanFormulaParserListener) {
			listener.exitLogicalAndExpression(this);
		}
	}

	accept(visitor) {
		if (visitor instanceof FeiyanFormulaParserVisitor) {
			return visitor.visitLogicalAndExpression(this);
		} else {
			return visitor.visitChildren(this);
		}
	}


}



class LogicalOrExpressionContext extends antlr4.ParserRuleContext {

	constructor(parser, parent, invokingState) {
		if (parent === undefined) {
			parent = null;
		}
		if (invokingState === undefined || invokingState === null) {
			invokingState = -1;
		}
		super(parent, invokingState);
		this.parser = parser;
		this.ruleIndex = FeiyanFormulaParser.RULE_logicalOrExpression;
	}

	logicalAndExpression = function (i) {
		if (i === undefined) {
			i = null;
		}
		if (i === null) {
			return this.getTypedRuleContexts(LogicalAndExpressionContext);
		} else {
			return this.getTypedRuleContext(LogicalAndExpressionContext, i);
		}
	};

	OrOr = function (i) {
		if (i === undefined) {
			i = null;
		}
		if (i === null) {
			return this.getTokens(FeiyanFormulaParser.OrOr);
		} else {
			return this.getToken(FeiyanFormulaParser.OrOr, i);
		}
	};


	enterRule(listener) {
		if (listener instanceof FeiyanFormulaParserListener) {
			listener.enterLogicalOrExpression(this);
		}
	}

	exitRule(listener) {
		if (listener instanceof FeiyanFormulaParserListener) {
			listener.exitLogicalOrExpression(this);
		}
	}

	accept(visitor) {
		if (visitor instanceof FeiyanFormulaParserVisitor) {
			return visitor.visitLogicalOrExpression(this);
		} else {
			return visitor.visitChildren(this);
		}
	}


}



class ConditionalExpressionContext extends antlr4.ParserRuleContext {

	constructor(parser, parent, invokingState) {
		if (parent === undefined) {
			parent = null;
		}
		if (invokingState === undefined || invokingState === null) {
			invokingState = -1;
		}
		super(parent, invokingState);
		this.parser = parser;
		this.ruleIndex = FeiyanFormulaParser.RULE_conditionalExpression;
	}

	logicalOrExpression() {
		return this.getTypedRuleContext(LogicalOrExpressionContext, 0);
	};

	Question() {
		return this.getToken(FeiyanFormulaParser.Question, 0);
	};

	expression() {
		return this.getTypedRuleContext(ExpressionContext, 0);
	};

	Colon() {
		return this.getToken(FeiyanFormulaParser.Colon, 0);
	};

	assignmentExpression() {
		return this.getTypedRuleContext(AssignmentExpressionContext, 0);
	};

	enterRule(listener) {
		if (listener instanceof FeiyanFormulaParserListener) {
			listener.enterConditionalExpression(this);
		}
	}

	exitRule(listener) {
		if (listener instanceof FeiyanFormulaParserListener) {
			listener.exitConditionalExpression(this);
		}
	}

	accept(visitor) {
		if (visitor instanceof FeiyanFormulaParserVisitor) {
			return visitor.visitConditionalExpression(this);
		} else {
			return visitor.visitChildren(this);
		}
	}


}



class AssignmentExpressionContext extends antlr4.ParserRuleContext {

	constructor(parser, parent, invokingState) {
		if (parent === undefined) {
			parent = null;
		}
		if (invokingState === undefined || invokingState === null) {
			invokingState = -1;
		}
		super(parent, invokingState);
		this.parser = parser;
		this.ruleIndex = FeiyanFormulaParser.RULE_assignmentExpression;
	}

	conditionalExpression() {
		return this.getTypedRuleContext(ConditionalExpressionContext, 0);
	};

	logicalOrExpression() {
		return this.getTypedRuleContext(LogicalOrExpressionContext, 0);
	};

	assignmentOperator() {
		return this.getTypedRuleContext(AssignmentOperatorContext, 0);
	};

	initializerClause() {
		return this.getTypedRuleContext(InitializerClauseContext, 0);
	};

	throwExpression() {
		return this.getTypedRuleContext(ThrowExpressionContext, 0);
	};

	enterRule(listener) {
		if (listener instanceof FeiyanFormulaParserListener) {
			listener.enterAssignmentExpression(this);
		}
	}

	exitRule(listener) {
		if (listener instanceof FeiyanFormulaParserListener) {
			listener.exitAssignmentExpression(this);
		}
	}

	accept(visitor) {
		if (visitor instanceof FeiyanFormulaParserVisitor) {
			return visitor.visitAssignmentExpression(this);
		} else {
			return visitor.visitChildren(this);
		}
	}


}



class AssignmentOperatorContext extends antlr4.ParserRuleContext {

	constructor(parser, parent, invokingState) {
		if (parent === undefined) {
			parent = null;
		}
		if (invokingState === undefined || invokingState === null) {
			invokingState = -1;
		}
		super(parent, invokingState);
		this.parser = parser;
		this.ruleIndex = FeiyanFormulaParser.RULE_assignmentOperator;
	}

	Assign() {
		return this.getToken(FeiyanFormulaParser.Assign, 0);
	};

	StarAssign() {
		return this.getToken(FeiyanFormulaParser.StarAssign, 0);
	};

	DivAssign() {
		return this.getToken(FeiyanFormulaParser.DivAssign, 0);
	};

	ModAssign() {
		return this.getToken(FeiyanFormulaParser.ModAssign, 0);
	};

	PlusAssign() {
		return this.getToken(FeiyanFormulaParser.PlusAssign, 0);
	};

	MinusAssign() {
		return this.getToken(FeiyanFormulaParser.MinusAssign, 0);
	};

	RightShiftAssign() {
		return this.getToken(FeiyanFormulaParser.RightShiftAssign, 0);
	};

	LeftShiftAssign() {
		return this.getToken(FeiyanFormulaParser.LeftShiftAssign, 0);
	};

	AndAssign() {
		return this.getToken(FeiyanFormulaParser.AndAssign, 0);
	};

	XorAssign() {
		return this.getToken(FeiyanFormulaParser.XorAssign, 0);
	};

	OrAssign() {
		return this.getToken(FeiyanFormulaParser.OrAssign, 0);
	};

	enterRule(listener) {
		if (listener instanceof FeiyanFormulaParserListener) {
			listener.enterAssignmentOperator(this);
		}
	}

	exitRule(listener) {
		if (listener instanceof FeiyanFormulaParserListener) {
			listener.exitAssignmentOperator(this);
		}
	}

	accept(visitor) {
		if (visitor instanceof FeiyanFormulaParserVisitor) {
			return visitor.visitAssignmentOperator(this);
		} else {
			return visitor.visitChildren(this);
		}
	}


}



class ExpressionContext extends antlr4.ParserRuleContext {

	constructor(parser, parent, invokingState) {
		if (parent === undefined) {
			parent = null;
		}
		if (invokingState === undefined || invokingState === null) {
			invokingState = -1;
		}
		super(parent, invokingState);
		this.parser = parser;
		this.ruleIndex = FeiyanFormulaParser.RULE_expression;
	}

	assignmentExpression = function (i) {
		if (i === undefined) {
			i = null;
		}
		if (i === null) {
			return this.getTypedRuleContexts(AssignmentExpressionContext);
		} else {
			return this.getTypedRuleContext(AssignmentExpressionContext, i);
		}
	};

	Comma = function (i) {
		if (i === undefined) {
			i = null;
		}
		if (i === null) {
			return this.getTokens(FeiyanFormulaParser.Comma);
		} else {
			return this.getToken(FeiyanFormulaParser.Comma, i);
		}
	};


	enterRule(listener) {
		if (listener instanceof FeiyanFormulaParserListener) {
			listener.enterExpression(this);
		}
	}

	exitRule(listener) {
		if (listener instanceof FeiyanFormulaParserListener) {
			listener.exitExpression(this);
		}
	}

	accept(visitor) {
		if (visitor instanceof FeiyanFormulaParserVisitor) {
			return visitor.visitExpression(this);
		} else {
			return visitor.visitChildren(this);
		}
	}


}



class ConstantExpressionContext extends antlr4.ParserRuleContext {

	constructor(parser, parent, invokingState) {
		if (parent === undefined) {
			parent = null;
		}
		if (invokingState === undefined || invokingState === null) {
			invokingState = -1;
		}
		super(parent, invokingState);
		this.parser = parser;
		this.ruleIndex = FeiyanFormulaParser.RULE_constantExpression;
	}

	conditionalExpression() {
		return this.getTypedRuleContext(ConditionalExpressionContext, 0);
	};

	enterRule(listener) {
		if (listener instanceof FeiyanFormulaParserListener) {
			listener.enterConstantExpression(this);
		}
	}

	exitRule(listener) {
		if (listener instanceof FeiyanFormulaParserListener) {
			listener.exitConstantExpression(this);
		}
	}

	accept(visitor) {
		if (visitor instanceof FeiyanFormulaParserVisitor) {
			return visitor.visitConstantExpression(this);
		} else {
			return visitor.visitChildren(this);
		}
	}


}



class StatementContext extends antlr4.ParserRuleContext {

	constructor(parser, parent, invokingState) {
		if (parent === undefined) {
			parent = null;
		}
		if (invokingState === undefined || invokingState === null) {
			invokingState = -1;
		}
		super(parent, invokingState);
		this.parser = parser;
		this.ruleIndex = FeiyanFormulaParser.RULE_statement;
	}

	labeledStatement() {
		return this.getTypedRuleContext(LabeledStatementContext, 0);
	};

	declarationStatement() {
		return this.getTypedRuleContext(DeclarationStatementContext, 0);
	};

	expressionStatement() {
		return this.getTypedRuleContext(ExpressionStatementContext, 0);
	};

	compoundStatement() {
		return this.getTypedRuleContext(CompoundStatementContext, 0);
	};

	selectionStatement() {
		return this.getTypedRuleContext(SelectionStatementContext, 0);
	};

	iterationStatement() {
		return this.getTypedRuleContext(IterationStatementContext, 0);
	};

	jumpStatement() {
		return this.getTypedRuleContext(JumpStatementContext, 0);
	};

	enterRule(listener) {
		if (listener instanceof FeiyanFormulaParserListener) {
			listener.enterStatement(this);
		}
	}

	exitRule(listener) {
		if (listener instanceof FeiyanFormulaParserListener) {
			listener.exitStatement(this);
		}
	}

	accept(visitor) {
		if (visitor instanceof FeiyanFormulaParserVisitor) {
			return visitor.visitStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}


}



class LabeledStatementContext extends antlr4.ParserRuleContext {

	constructor(parser, parent, invokingState) {
		if (parent === undefined) {
			parent = null;
		}
		if (invokingState === undefined || invokingState === null) {
			invokingState = -1;
		}
		super(parent, invokingState);
		this.parser = parser;
		this.ruleIndex = FeiyanFormulaParser.RULE_labeledStatement;
	}

	Colon() {
		return this.getToken(FeiyanFormulaParser.Colon, 0);
	};

	statement() {
		return this.getTypedRuleContext(StatementContext, 0);
	};

	Identifier() {
		return this.getToken(FeiyanFormulaParser.Identifier, 0);
	};

	Case() {
		return this.getToken(FeiyanFormulaParser.Case, 0);
	};

	constantExpression() {
		return this.getTypedRuleContext(ConstantExpressionContext, 0);
	};

	Default() {
		return this.getToken(FeiyanFormulaParser.Default, 0);
	};

	enterRule(listener) {
		if (listener instanceof FeiyanFormulaParserListener) {
			listener.enterLabeledStatement(this);
		}
	}

	exitRule(listener) {
		if (listener instanceof FeiyanFormulaParserListener) {
			listener.exitLabeledStatement(this);
		}
	}

	accept(visitor) {
		if (visitor instanceof FeiyanFormulaParserVisitor) {
			return visitor.visitLabeledStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}


}



class ExpressionStatementContext extends antlr4.ParserRuleContext {

	constructor(parser, parent, invokingState) {
		if (parent === undefined) {
			parent = null;
		}
		if (invokingState === undefined || invokingState === null) {
			invokingState = -1;
		}
		super(parent, invokingState);
		this.parser = parser;
		this.ruleIndex = FeiyanFormulaParser.RULE_expressionStatement;
	}

	Semi() {
		return this.getToken(FeiyanFormulaParser.Semi, 0);
	};

	expression() {
		return this.getTypedRuleContext(ExpressionContext, 0);
	};

	enterRule(listener) {
		if (listener instanceof FeiyanFormulaParserListener) {
			listener.enterExpressionStatement(this);
		}
	}

	exitRule(listener) {
		if (listener instanceof FeiyanFormulaParserListener) {
			listener.exitExpressionStatement(this);
		}
	}

	accept(visitor) {
		if (visitor instanceof FeiyanFormulaParserVisitor) {
			return visitor.visitExpressionStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}


}



class CompoundStatementContext extends antlr4.ParserRuleContext {

	constructor(parser, parent, invokingState) {
		if (parent === undefined) {
			parent = null;
		}
		if (invokingState === undefined || invokingState === null) {
			invokingState = -1;
		}
		super(parent, invokingState);
		this.parser = parser;
		this.ruleIndex = FeiyanFormulaParser.RULE_compoundStatement;
	}

	LeftBrace() {
		return this.getToken(FeiyanFormulaParser.LeftBrace, 0);
	};

	RightBrace() {
		return this.getToken(FeiyanFormulaParser.RightBrace, 0);
	};

	statementSeq() {
		return this.getTypedRuleContext(StatementSeqContext, 0);
	};

	enterRule(listener) {
		if (listener instanceof FeiyanFormulaParserListener) {
			listener.enterCompoundStatement(this);
		}
	}

	exitRule(listener) {
		if (listener instanceof FeiyanFormulaParserListener) {
			listener.exitCompoundStatement(this);
		}
	}

	accept(visitor) {
		if (visitor instanceof FeiyanFormulaParserVisitor) {
			return visitor.visitCompoundStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}


}



class StatementSeqContext extends antlr4.ParserRuleContext {

	constructor(parser, parent, invokingState) {
		if (parent === undefined) {
			parent = null;
		}
		if (invokingState === undefined || invokingState === null) {
			invokingState = -1;
		}
		super(parent, invokingState);
		this.parser = parser;
		this.ruleIndex = FeiyanFormulaParser.RULE_statementSeq;
	}

	statement = function (i) {
		if (i === undefined) {
			i = null;
		}
		if (i === null) {
			return this.getTypedRuleContexts(StatementContext);
		} else {
			return this.getTypedRuleContext(StatementContext, i);
		}
	};

	enterRule(listener) {
		if (listener instanceof FeiyanFormulaParserListener) {
			listener.enterStatementSeq(this);
		}
	}

	exitRule(listener) {
		if (listener instanceof FeiyanFormulaParserListener) {
			listener.exitStatementSeq(this);
		}
	}

	accept(visitor) {
		if (visitor instanceof FeiyanFormulaParserVisitor) {
			return visitor.visitStatementSeq(this);
		} else {
			return visitor.visitChildren(this);
		}
	}


}



class SelectionStatementContext extends antlr4.ParserRuleContext {

	constructor(parser, parent, invokingState) {
		if (parent === undefined) {
			parent = null;
		}
		if (invokingState === undefined || invokingState === null) {
			invokingState = -1;
		}
		super(parent, invokingState);
		this.parser = parser;
		this.ruleIndex = FeiyanFormulaParser.RULE_selectionStatement;
	}

	If() {
		return this.getToken(FeiyanFormulaParser.If, 0);
	};

	LeftParen() {
		return this.getToken(FeiyanFormulaParser.LeftParen, 0);
	};

	condition() {
		return this.getTypedRuleContext(ConditionContext, 0);
	};

	RightParen() {
		return this.getToken(FeiyanFormulaParser.RightParen, 0);
	};

	statement = function (i) {
		if (i === undefined) {
			i = null;
		}
		if (i === null) {
			return this.getTypedRuleContexts(StatementContext);
		} else {
			return this.getTypedRuleContext(StatementContext, i);
		}
	};

	Else() {
		return this.getToken(FeiyanFormulaParser.Else, 0);
	};

	Switch() {
		return this.getToken(FeiyanFormulaParser.Switch, 0);
	};

	enterRule(listener) {
		if (listener instanceof FeiyanFormulaParserListener) {
			listener.enterSelectionStatement(this);
		}
	}

	exitRule(listener) {
		if (listener instanceof FeiyanFormulaParserListener) {
			listener.exitSelectionStatement(this);
		}
	}

	accept(visitor) {
		if (visitor instanceof FeiyanFormulaParserVisitor) {
			return visitor.visitSelectionStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}


}



class ConditionContext extends antlr4.ParserRuleContext {

	constructor(parser, parent, invokingState) {
		if (parent === undefined) {
			parent = null;
		}
		if (invokingState === undefined || invokingState === null) {
			invokingState = -1;
		}
		super(parent, invokingState);
		this.parser = parser;
		this.ruleIndex = FeiyanFormulaParser.RULE_condition;
	}

	expression() {
		return this.getTypedRuleContext(ExpressionContext, 0);
	};

	declSpecifierSeq() {
		return this.getTypedRuleContext(DeclSpecifierSeqContext, 0);
	};

	declarator() {
		return this.getTypedRuleContext(DeclaratorContext, 0);
	};

	Assign() {
		return this.getToken(FeiyanFormulaParser.Assign, 0);
	};

	initializerClause() {
		return this.getTypedRuleContext(InitializerClauseContext, 0);
	};

	bracedInitList() {
		return this.getTypedRuleContext(BracedInitListContext, 0);
	};

	attributeSpecifierSeq() {
		return this.getTypedRuleContext(AttributeSpecifierSeqContext, 0);
	};

	enterRule(listener) {
		if (listener instanceof FeiyanFormulaParserListener) {
			listener.enterCondition(this);
		}
	}

	exitRule(listener) {
		if (listener instanceof FeiyanFormulaParserListener) {
			listener.exitCondition(this);
		}
	}

	accept(visitor) {
		if (visitor instanceof FeiyanFormulaParserVisitor) {
			return visitor.visitCondition(this);
		} else {
			return visitor.visitChildren(this);
		}
	}


}



class IterationStatementContext extends antlr4.ParserRuleContext {

	constructor(parser, parent, invokingState) {
		if (parent === undefined) {
			parent = null;
		}
		if (invokingState === undefined || invokingState === null) {
			invokingState = -1;
		}
		super(parent, invokingState);
		this.parser = parser;
		this.ruleIndex = FeiyanFormulaParser.RULE_iterationStatement;
	}

	While() {
		return this.getToken(FeiyanFormulaParser.While, 0);
	};

	LeftParen() {
		return this.getToken(FeiyanFormulaParser.LeftParen, 0);
	};

	condition() {
		return this.getTypedRuleContext(ConditionContext, 0);
	};

	RightParen() {
		return this.getToken(FeiyanFormulaParser.RightParen, 0);
	};

	statement() {
		return this.getTypedRuleContext(StatementContext, 0);
	};

	Do() {
		return this.getToken(FeiyanFormulaParser.Do, 0);
	};

	expression() {
		return this.getTypedRuleContext(ExpressionContext, 0);
	};

	Semi() {
		return this.getToken(FeiyanFormulaParser.Semi, 0);
	};

	For() {
		return this.getToken(FeiyanFormulaParser.For, 0);
	};

	forInitStatement() {
		return this.getTypedRuleContext(ForInitStatementContext, 0);
	};

	forRangeDeclaration() {
		return this.getTypedRuleContext(ForRangeDeclarationContext, 0);
	};

	Colon() {
		return this.getToken(FeiyanFormulaParser.Colon, 0);
	};

	forRangeInitializer() {
		return this.getTypedRuleContext(ForRangeInitializerContext, 0);
	};

	enterRule(listener) {
		if (listener instanceof FeiyanFormulaParserListener) {
			listener.enterIterationStatement(this);
		}
	}

	exitRule(listener) {
		if (listener instanceof FeiyanFormulaParserListener) {
			listener.exitIterationStatement(this);
		}
	}

	accept(visitor) {
		if (visitor instanceof FeiyanFormulaParserVisitor) {
			return visitor.visitIterationStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}


}



class ForInitStatementContext extends antlr4.ParserRuleContext {

	constructor(parser, parent, invokingState) {
		if (parent === undefined) {
			parent = null;
		}
		if (invokingState === undefined || invokingState === null) {
			invokingState = -1;
		}
		super(parent, invokingState);
		this.parser = parser;
		this.ruleIndex = FeiyanFormulaParser.RULE_forInitStatement;
	}

	expressionStatement() {
		return this.getTypedRuleContext(ExpressionStatementContext, 0);
	};

	simpleDeclaration() {
		return this.getTypedRuleContext(SimpleDeclarationContext, 0);
	};

	enterRule(listener) {
		if (listener instanceof FeiyanFormulaParserListener) {
			listener.enterForInitStatement(this);
		}
	}

	exitRule(listener) {
		if (listener instanceof FeiyanFormulaParserListener) {
			listener.exitForInitStatement(this);
		}
	}

	accept(visitor) {
		if (visitor instanceof FeiyanFormulaParserVisitor) {
			return visitor.visitForInitStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}


}



class ForRangeDeclarationContext extends antlr4.ParserRuleContext {

	constructor(parser, parent, invokingState) {
		if (parent === undefined) {
			parent = null;
		}
		if (invokingState === undefined || invokingState === null) {
			invokingState = -1;
		}
		super(parent, invokingState);
		this.parser = parser;
		this.ruleIndex = FeiyanFormulaParser.RULE_forRangeDeclaration;
	}

	declSpecifierSeq() {
		return this.getTypedRuleContext(DeclSpecifierSeqContext, 0);
	};

	declarator() {
		return this.getTypedRuleContext(DeclaratorContext, 0);
	};

	attributeSpecifierSeq() {
		return this.getTypedRuleContext(AttributeSpecifierSeqContext, 0);
	};

	enterRule(listener) {
		if (listener instanceof FeiyanFormulaParserListener) {
			listener.enterForRangeDeclaration(this);
		}
	}

	exitRule(listener) {
		if (listener instanceof FeiyanFormulaParserListener) {
			listener.exitForRangeDeclaration(this);
		}
	}

	accept(visitor) {
		if (visitor instanceof FeiyanFormulaParserVisitor) {
			return visitor.visitForRangeDeclaration(this);
		} else {
			return visitor.visitChildren(this);
		}
	}


}



class ForRangeInitializerContext extends antlr4.ParserRuleContext {

	constructor(parser, parent, invokingState) {
		if (parent === undefined) {
			parent = null;
		}
		if (invokingState === undefined || invokingState === null) {
			invokingState = -1;
		}
		super(parent, invokingState);
		this.parser = parser;
		this.ruleIndex = FeiyanFormulaParser.RULE_forRangeInitializer;
	}

	expression() {
		return this.getTypedRuleContext(ExpressionContext, 0);
	};

	bracedInitList() {
		return this.getTypedRuleContext(BracedInitListContext, 0);
	};

	enterRule(listener) {
		if (listener instanceof FeiyanFormulaParserListener) {
			listener.enterForRangeInitializer(this);
		}
	}

	exitRule(listener) {
		if (listener instanceof FeiyanFormulaParserListener) {
			listener.exitForRangeInitializer(this);
		}
	}

	accept(visitor) {
		if (visitor instanceof FeiyanFormulaParserVisitor) {
			return visitor.visitForRangeInitializer(this);
		} else {
			return visitor.visitChildren(this);
		}
	}


}



class JumpStatementContext extends antlr4.ParserRuleContext {

	constructor(parser, parent, invokingState) {
		if (parent === undefined) {
			parent = null;
		}
		if (invokingState === undefined || invokingState === null) {
			invokingState = -1;
		}
		super(parent, invokingState);
		this.parser = parser;
		this.ruleIndex = FeiyanFormulaParser.RULE_jumpStatement;
	}

	Semi() {
		return this.getToken(FeiyanFormulaParser.Semi, 0);
	};

	Break() {
		return this.getToken(FeiyanFormulaParser.Break, 0);
	};

	Continue() {
		return this.getToken(FeiyanFormulaParser.Continue, 0);
	};

	Return() {
		return this.getToken(FeiyanFormulaParser.Return, 0);
	};

	Goto() {
		return this.getToken(FeiyanFormulaParser.Goto, 0);
	};

	Identifier() {
		return this.getToken(FeiyanFormulaParser.Identifier, 0);
	};

	expression() {
		return this.getTypedRuleContext(ExpressionContext, 0);
	};

	bracedInitList() {
		return this.getTypedRuleContext(BracedInitListContext, 0);
	};

	enterRule(listener) {
		if (listener instanceof FeiyanFormulaParserListener) {
			listener.enterJumpStatement(this);
		}
	}

	exitRule(listener) {
		if (listener instanceof FeiyanFormulaParserListener) {
			listener.exitJumpStatement(this);
		}
	}

	accept(visitor) {
		if (visitor instanceof FeiyanFormulaParserVisitor) {
			return visitor.visitJumpStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}


}



class DeclarationStatementContext extends antlr4.ParserRuleContext {

	constructor(parser, parent, invokingState) {
		if (parent === undefined) {
			parent = null;
		}
		if (invokingState === undefined || invokingState === null) {
			invokingState = -1;
		}
		super(parent, invokingState);
		this.parser = parser;
		this.ruleIndex = FeiyanFormulaParser.RULE_declarationStatement;
	}

	blockDeclaration() {
		return this.getTypedRuleContext(BlockDeclarationContext, 0);
	};

	enterRule(listener) {
		if (listener instanceof FeiyanFormulaParserListener) {
			listener.enterDeclarationStatement(this);
		}
	}

	exitRule(listener) {
		if (listener instanceof FeiyanFormulaParserListener) {
			listener.exitDeclarationStatement(this);
		}
	}

	accept(visitor) {
		if (visitor instanceof FeiyanFormulaParserVisitor) {
			return visitor.visitDeclarationStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}


}



class BlockDeclarationContext extends antlr4.ParserRuleContext {

	constructor(parser, parent, invokingState) {
		if (parent === undefined) {
			parent = null;
		}
		if (invokingState === undefined || invokingState === null) {
			invokingState = -1;
		}
		super(parent, invokingState);
		this.parser = parser;
		this.ruleIndex = FeiyanFormulaParser.RULE_blockDeclaration;
	}

	simpleDeclaration() {
		return this.getTypedRuleContext(SimpleDeclarationContext, 0);
	};

	enterRule(listener) {
		if (listener instanceof FeiyanFormulaParserListener) {
			listener.enterBlockDeclaration(this);
		}
	}

	exitRule(listener) {
		if (listener instanceof FeiyanFormulaParserListener) {
			listener.exitBlockDeclaration(this);
		}
	}

	accept(visitor) {
		if (visitor instanceof FeiyanFormulaParserVisitor) {
			return visitor.visitBlockDeclaration(this);
		} else {
			return visitor.visitChildren(this);
		}
	}


}



class SimpleDeclarationContext extends antlr4.ParserRuleContext {

	constructor(parser, parent, invokingState) {
		if (parent === undefined) {
			parent = null;
		}
		if (invokingState === undefined || invokingState === null) {
			invokingState = -1;
		}
		super(parent, invokingState);
		this.parser = parser;
		this.ruleIndex = FeiyanFormulaParser.RULE_simpleDeclaration;
	}

	Semi() {
		return this.getToken(FeiyanFormulaParser.Semi, 0);
	};

	declSpecifierSeq() {
		return this.getTypedRuleContext(DeclSpecifierSeqContext, 0);
	};

	initDeclaratorList() {
		return this.getTypedRuleContext(InitDeclaratorListContext, 0);
	};

	attributeSpecifierSeq() {
		return this.getTypedRuleContext(AttributeSpecifierSeqContext, 0);
	};

	enterRule(listener) {
		if (listener instanceof FeiyanFormulaParserListener) {
			listener.enterSimpleDeclaration(this);
		}
	}

	exitRule(listener) {
		if (listener instanceof FeiyanFormulaParserListener) {
			listener.exitSimpleDeclaration(this);
		}
	}

	accept(visitor) {
		if (visitor instanceof FeiyanFormulaParserVisitor) {
			return visitor.visitSimpleDeclaration(this);
		} else {
			return visitor.visitChildren(this);
		}
	}


}



class DeclSpecifierContext extends antlr4.ParserRuleContext {

	constructor(parser, parent, invokingState) {
		if (parent === undefined) {
			parent = null;
		}
		if (invokingState === undefined || invokingState === null) {
			invokingState = -1;
		}
		super(parent, invokingState);
		this.parser = parser;
		this.ruleIndex = FeiyanFormulaParser.RULE_declSpecifier;
	}

	typeSpecifier() {
		return this.getTypedRuleContext(TypeSpecifierContext, 0);
	};

	functionSpecifier() {
		return this.getTypedRuleContext(FunctionSpecifierContext, 0);
	};

	enterRule(listener) {
		if (listener instanceof FeiyanFormulaParserListener) {
			listener.enterDeclSpecifier(this);
		}
	}

	exitRule(listener) {
		if (listener instanceof FeiyanFormulaParserListener) {
			listener.exitDeclSpecifier(this);
		}
	}

	accept(visitor) {
		if (visitor instanceof FeiyanFormulaParserVisitor) {
			return visitor.visitDeclSpecifier(this);
		} else {
			return visitor.visitChildren(this);
		}
	}


}



class DeclSpecifierSeqContext extends antlr4.ParserRuleContext {

	constructor(parser, parent, invokingState) {
		if (parent === undefined) {
			parent = null;
		}
		if (invokingState === undefined || invokingState === null) {
			invokingState = -1;
		}
		super(parent, invokingState);
		this.parser = parser;
		this.ruleIndex = FeiyanFormulaParser.RULE_declSpecifierSeq;
	}

	declSpecifier = function (i) {
		if (i === undefined) {
			i = null;
		}
		if (i === null) {
			return this.getTypedRuleContexts(DeclSpecifierContext);
		} else {
			return this.getTypedRuleContext(DeclSpecifierContext, i);
		}
	};

	attributeSpecifierSeq() {
		return this.getTypedRuleContext(AttributeSpecifierSeqContext, 0);
	};

	enterRule(listener) {
		if (listener instanceof FeiyanFormulaParserListener) {
			listener.enterDeclSpecifierSeq(this);
		}
	}

	exitRule(listener) {
		if (listener instanceof FeiyanFormulaParserListener) {
			listener.exitDeclSpecifierSeq(this);
		}
	}

	accept(visitor) {
		if (visitor instanceof FeiyanFormulaParserVisitor) {
			return visitor.visitDeclSpecifierSeq(this);
		} else {
			return visitor.visitChildren(this);
		}
	}


}



class FunctionSpecifierContext extends antlr4.ParserRuleContext {

	constructor(parser, parent, invokingState) {
		if (parent === undefined) {
			parent = null;
		}
		if (invokingState === undefined || invokingState === null) {
			invokingState = -1;
		}
		super(parent, invokingState);
		this.parser = parser;
		this.ruleIndex = FeiyanFormulaParser.RULE_functionSpecifier;
	}

	Inline() {
		return this.getToken(FeiyanFormulaParser.Inline, 0);
	};

	Virtual() {
		return this.getToken(FeiyanFormulaParser.Virtual, 0);
	};

	Explicit() {
		return this.getToken(FeiyanFormulaParser.Explicit, 0);
	};

	enterRule(listener) {
		if (listener instanceof FeiyanFormulaParserListener) {
			listener.enterFunctionSpecifier(this);
		}
	}

	exitRule(listener) {
		if (listener instanceof FeiyanFormulaParserListener) {
			listener.exitFunctionSpecifier(this);
		}
	}

	accept(visitor) {
		if (visitor instanceof FeiyanFormulaParserVisitor) {
			return visitor.visitFunctionSpecifier(this);
		} else {
			return visitor.visitChildren(this);
		}
	}


}



class TypedefNameContext extends antlr4.ParserRuleContext {

	constructor(parser, parent, invokingState) {
		if (parent === undefined) {
			parent = null;
		}
		if (invokingState === undefined || invokingState === null) {
			invokingState = -1;
		}
		super(parent, invokingState);
		this.parser = parser;
		this.ruleIndex = FeiyanFormulaParser.RULE_typedefName;
	}

	Identifier() {
		return this.getToken(FeiyanFormulaParser.Identifier, 0);
	};

	enterRule(listener) {
		if (listener instanceof FeiyanFormulaParserListener) {
			listener.enterTypedefName(this);
		}
	}

	exitRule(listener) {
		if (listener instanceof FeiyanFormulaParserListener) {
			listener.exitTypedefName(this);
		}
	}

	accept(visitor) {
		if (visitor instanceof FeiyanFormulaParserVisitor) {
			return visitor.visitTypedefName(this);
		} else {
			return visitor.visitChildren(this);
		}
	}


}



class TypeSpecifierContext extends antlr4.ParserRuleContext {

	constructor(parser, parent, invokingState) {
		if (parent === undefined) {
			parent = null;
		}
		if (invokingState === undefined || invokingState === null) {
			invokingState = -1;
		}
		super(parent, invokingState);
		this.parser = parser;
		this.ruleIndex = FeiyanFormulaParser.RULE_typeSpecifier;
	}

	trailingTypeSpecifier() {
		return this.getTypedRuleContext(TrailingTypeSpecifierContext, 0);
	};

	enumSpecifier() {
		return this.getTypedRuleContext(EnumSpecifierContext, 0);
	};

	enterRule(listener) {
		if (listener instanceof FeiyanFormulaParserListener) {
			listener.enterTypeSpecifier(this);
		}
	}

	exitRule(listener) {
		if (listener instanceof FeiyanFormulaParserListener) {
			listener.exitTypeSpecifier(this);
		}
	}

	accept(visitor) {
		if (visitor instanceof FeiyanFormulaParserVisitor) {
			return visitor.visitTypeSpecifier(this);
		} else {
			return visitor.visitChildren(this);
		}
	}


}



class TrailingTypeSpecifierContext extends antlr4.ParserRuleContext {

	constructor(parser, parent, invokingState) {
		if (parent === undefined) {
			parent = null;
		}
		if (invokingState === undefined || invokingState === null) {
			invokingState = -1;
		}
		super(parent, invokingState);
		this.parser = parser;
		this.ruleIndex = FeiyanFormulaParser.RULE_trailingTypeSpecifier;
	}

	simpleTypeSpecifier() {
		return this.getTypedRuleContext(SimpleTypeSpecifierContext, 0);
	};

	cvQualifier() {
		return this.getTypedRuleContext(CvQualifierContext, 0);
	};

	enterRule(listener) {
		if (listener instanceof FeiyanFormulaParserListener) {
			listener.enterTrailingTypeSpecifier(this);
		}
	}

	exitRule(listener) {
		if (listener instanceof FeiyanFormulaParserListener) {
			listener.exitTrailingTypeSpecifier(this);
		}
	}

	accept(visitor) {
		if (visitor instanceof FeiyanFormulaParserVisitor) {
			return visitor.visitTrailingTypeSpecifier(this);
		} else {
			return visitor.visitChildren(this);
		}
	}


}



class TypeSpecifierSeqContext extends antlr4.ParserRuleContext {

	constructor(parser, parent, invokingState) {
		if (parent === undefined) {
			parent = null;
		}
		if (invokingState === undefined || invokingState === null) {
			invokingState = -1;
		}
		super(parent, invokingState);
		this.parser = parser;
		this.ruleIndex = FeiyanFormulaParser.RULE_typeSpecifierSeq;
	}

	typeSpecifier = function (i) {
		if (i === undefined) {
			i = null;
		}
		if (i === null) {
			return this.getTypedRuleContexts(TypeSpecifierContext);
		} else {
			return this.getTypedRuleContext(TypeSpecifierContext, i);
		}
	};

	attributeSpecifierSeq() {
		return this.getTypedRuleContext(AttributeSpecifierSeqContext, 0);
	};

	enterRule(listener) {
		if (listener instanceof FeiyanFormulaParserListener) {
			listener.enterTypeSpecifierSeq(this);
		}
	}

	exitRule(listener) {
		if (listener instanceof FeiyanFormulaParserListener) {
			listener.exitTypeSpecifierSeq(this);
		}
	}

	accept(visitor) {
		if (visitor instanceof FeiyanFormulaParserVisitor) {
			return visitor.visitTypeSpecifierSeq(this);
		} else {
			return visitor.visitChildren(this);
		}
	}


}



class TrailingTypeSpecifierSeqContext extends antlr4.ParserRuleContext {

	constructor(parser, parent, invokingState) {
		if (parent === undefined) {
			parent = null;
		}
		if (invokingState === undefined || invokingState === null) {
			invokingState = -1;
		}
		super(parent, invokingState);
		this.parser = parser;
		this.ruleIndex = FeiyanFormulaParser.RULE_trailingTypeSpecifierSeq;
	}

	trailingTypeSpecifier = function (i) {
		if (i === undefined) {
			i = null;
		}
		if (i === null) {
			return this.getTypedRuleContexts(TrailingTypeSpecifierContext);
		} else {
			return this.getTypedRuleContext(TrailingTypeSpecifierContext, i);
		}
	};

	attributeSpecifierSeq() {
		return this.getTypedRuleContext(AttributeSpecifierSeqContext, 0);
	};

	enterRule(listener) {
		if (listener instanceof FeiyanFormulaParserListener) {
			listener.enterTrailingTypeSpecifierSeq(this);
		}
	}

	exitRule(listener) {
		if (listener instanceof FeiyanFormulaParserListener) {
			listener.exitTrailingTypeSpecifierSeq(this);
		}
	}

	accept(visitor) {
		if (visitor instanceof FeiyanFormulaParserVisitor) {
			return visitor.visitTrailingTypeSpecifierSeq(this);
		} else {
			return visitor.visitChildren(this);
		}
	}


}



class SimpleTypeLengthModifierContext extends antlr4.ParserRuleContext {

	constructor(parser, parent, invokingState) {
		if (parent === undefined) {
			parent = null;
		}
		if (invokingState === undefined || invokingState === null) {
			invokingState = -1;
		}
		super(parent, invokingState);
		this.parser = parser;
		this.ruleIndex = FeiyanFormulaParser.RULE_simpleTypeLengthModifier;
	}

	Short() {
		return this.getToken(FeiyanFormulaParser.Short, 0);
	};

	Long() {
		return this.getToken(FeiyanFormulaParser.Long, 0);
	};

	enterRule(listener) {
		if (listener instanceof FeiyanFormulaParserListener) {
			listener.enterSimpleTypeLengthModifier(this);
		}
	}

	exitRule(listener) {
		if (listener instanceof FeiyanFormulaParserListener) {
			listener.exitSimpleTypeLengthModifier(this);
		}
	}

	accept(visitor) {
		if (visitor instanceof FeiyanFormulaParserVisitor) {
			return visitor.visitSimpleTypeLengthModifier(this);
		} else {
			return visitor.visitChildren(this);
		}
	}


}



class SimpleTypeSignednessModifierContext extends antlr4.ParserRuleContext {

	constructor(parser, parent, invokingState) {
		if (parent === undefined) {
			parent = null;
		}
		if (invokingState === undefined || invokingState === null) {
			invokingState = -1;
		}
		super(parent, invokingState);
		this.parser = parser;
		this.ruleIndex = FeiyanFormulaParser.RULE_simpleTypeSignednessModifier;
	}

	Unsigned() {
		return this.getToken(FeiyanFormulaParser.Unsigned, 0);
	};

	Signed() {
		return this.getToken(FeiyanFormulaParser.Signed, 0);
	};

	enterRule(listener) {
		if (listener instanceof FeiyanFormulaParserListener) {
			listener.enterSimpleTypeSignednessModifier(this);
		}
	}

	exitRule(listener) {
		if (listener instanceof FeiyanFormulaParserListener) {
			listener.exitSimpleTypeSignednessModifier(this);
		}
	}

	accept(visitor) {
		if (visitor instanceof FeiyanFormulaParserVisitor) {
			return visitor.visitSimpleTypeSignednessModifier(this);
		} else {
			return visitor.visitChildren(this);
		}
	}


}



class SimpleTypeSpecifierContext extends antlr4.ParserRuleContext {

	constructor(parser, parent, invokingState) {
		if (parent === undefined) {
			parent = null;
		}
		if (invokingState === undefined || invokingState === null) {
			invokingState = -1;
		}
		super(parent, invokingState);
		this.parser = parser;
		this.ruleIndex = FeiyanFormulaParser.RULE_simpleTypeSpecifier;
	}

	theTypeName() {
		return this.getTypedRuleContext(TheTypeNameContext, 0);
	};

	nestedNameSpecifier() {
		return this.getTypedRuleContext(NestedNameSpecifierContext, 0);
	};

	simpleTypeSignednessModifier() {
		return this.getTypedRuleContext(SimpleTypeSignednessModifierContext, 0);
	};

	simpleTypeLengthModifier = function (i) {
		if (i === undefined) {
			i = null;
		}
		if (i === null) {
			return this.getTypedRuleContexts(SimpleTypeLengthModifierContext);
		} else {
			return this.getTypedRuleContext(SimpleTypeLengthModifierContext, i);
		}
	};

	Char() {
		return this.getToken(FeiyanFormulaParser.Char, 0);
	};

	Char16() {
		return this.getToken(FeiyanFormulaParser.Char16, 0);
	};

	Char32() {
		return this.getToken(FeiyanFormulaParser.Char32, 0);
	};

	Wchar() {
		return this.getToken(FeiyanFormulaParser.Wchar, 0);
	};

	Bool() {
		return this.getToken(FeiyanFormulaParser.Bool, 0);
	};

	Int() {
		return this.getToken(FeiyanFormulaParser.Int, 0);
	};

	Float() {
		return this.getToken(FeiyanFormulaParser.Float, 0);
	};

	Double() {
		return this.getToken(FeiyanFormulaParser.Double, 0);
	};

	Void() {
		return this.getToken(FeiyanFormulaParser.Void, 0);
	};

	Auto() {
		return this.getToken(FeiyanFormulaParser.Auto, 0);
	};

	enterRule(listener) {
		if (listener instanceof FeiyanFormulaParserListener) {
			listener.enterSimpleTypeSpecifier(this);
		}
	}

	exitRule(listener) {
		if (listener instanceof FeiyanFormulaParserListener) {
			listener.exitSimpleTypeSpecifier(this);
		}
	}

	accept(visitor) {
		if (visitor instanceof FeiyanFormulaParserVisitor) {
			return visitor.visitSimpleTypeSpecifier(this);
		} else {
			return visitor.visitChildren(this);
		}
	}


}



class TheTypeNameContext extends antlr4.ParserRuleContext {

	constructor(parser, parent, invokingState) {
		if (parent === undefined) {
			parent = null;
		}
		if (invokingState === undefined || invokingState === null) {
			invokingState = -1;
		}
		super(parent, invokingState);
		this.parser = parser;
		this.ruleIndex = FeiyanFormulaParser.RULE_theTypeName;
	}

	className() {
		return this.getTypedRuleContext(ClassNameContext, 0);
	};

	enumName() {
		return this.getTypedRuleContext(EnumNameContext, 0);
	};

	typedefName() {
		return this.getTypedRuleContext(TypedefNameContext, 0);
	};

	simpleTemplateId() {
		return this.getTypedRuleContext(SimpleTemplateIdContext, 0);
	};

	enterRule(listener) {
		if (listener instanceof FeiyanFormulaParserListener) {
			listener.enterTheTypeName(this);
		}
	}

	exitRule(listener) {
		if (listener instanceof FeiyanFormulaParserListener) {
			listener.exitTheTypeName(this);
		}
	}

	accept(visitor) {
		if (visitor instanceof FeiyanFormulaParserVisitor) {
			return visitor.visitTheTypeName(this);
		} else {
			return visitor.visitChildren(this);
		}
	}


}



class DecltypeSpecifierContext extends antlr4.ParserRuleContext {

	constructor(parser, parent, invokingState) {
		if (parent === undefined) {
			parent = null;
		}
		if (invokingState === undefined || invokingState === null) {
			invokingState = -1;
		}
		super(parent, invokingState);
		this.parser = parser;
		this.ruleIndex = FeiyanFormulaParser.RULE_decltypeSpecifier;
	}

	Decltype() {
		return this.getToken(FeiyanFormulaParser.Decltype, 0);
	};

	LeftParen() {
		return this.getToken(FeiyanFormulaParser.LeftParen, 0);
	};

	RightParen() {
		return this.getToken(FeiyanFormulaParser.RightParen, 0);
	};

	expression() {
		return this.getTypedRuleContext(ExpressionContext, 0);
	};

	Auto() {
		return this.getToken(FeiyanFormulaParser.Auto, 0);
	};

	enterRule(listener) {
		if (listener instanceof FeiyanFormulaParserListener) {
			listener.enterDecltypeSpecifier(this);
		}
	}

	exitRule(listener) {
		if (listener instanceof FeiyanFormulaParserListener) {
			listener.exitDecltypeSpecifier(this);
		}
	}

	accept(visitor) {
		if (visitor instanceof FeiyanFormulaParserVisitor) {
			return visitor.visitDecltypeSpecifier(this);
		} else {
			return visitor.visitChildren(this);
		}
	}


}



class EnumNameContext extends antlr4.ParserRuleContext {

	constructor(parser, parent, invokingState) {
		if (parent === undefined) {
			parent = null;
		}
		if (invokingState === undefined || invokingState === null) {
			invokingState = -1;
		}
		super(parent, invokingState);
		this.parser = parser;
		this.ruleIndex = FeiyanFormulaParser.RULE_enumName;
	}

	Identifier() {
		return this.getToken(FeiyanFormulaParser.Identifier, 0);
	};

	enterRule(listener) {
		if (listener instanceof FeiyanFormulaParserListener) {
			listener.enterEnumName(this);
		}
	}

	exitRule(listener) {
		if (listener instanceof FeiyanFormulaParserListener) {
			listener.exitEnumName(this);
		}
	}

	accept(visitor) {
		if (visitor instanceof FeiyanFormulaParserVisitor) {
			return visitor.visitEnumName(this);
		} else {
			return visitor.visitChildren(this);
		}
	}


}



class EnumSpecifierContext extends antlr4.ParserRuleContext {

	constructor(parser, parent, invokingState) {
		if (parent === undefined) {
			parent = null;
		}
		if (invokingState === undefined || invokingState === null) {
			invokingState = -1;
		}
		super(parent, invokingState);
		this.parser = parser;
		this.ruleIndex = FeiyanFormulaParser.RULE_enumSpecifier;
	}

	enumHead() {
		return this.getTypedRuleContext(EnumHeadContext, 0);
	};

	LeftBrace() {
		return this.getToken(FeiyanFormulaParser.LeftBrace, 0);
	};

	RightBrace() {
		return this.getToken(FeiyanFormulaParser.RightBrace, 0);
	};

	enumeratorList() {
		return this.getTypedRuleContext(EnumeratorListContext, 0);
	};

	Comma() {
		return this.getToken(FeiyanFormulaParser.Comma, 0);
	};

	enterRule(listener) {
		if (listener instanceof FeiyanFormulaParserListener) {
			listener.enterEnumSpecifier(this);
		}
	}

	exitRule(listener) {
		if (listener instanceof FeiyanFormulaParserListener) {
			listener.exitEnumSpecifier(this);
		}
	}

	accept(visitor) {
		if (visitor instanceof FeiyanFormulaParserVisitor) {
			return visitor.visitEnumSpecifier(this);
		} else {
			return visitor.visitChildren(this);
		}
	}


}



class EnumHeadContext extends antlr4.ParserRuleContext {

	constructor(parser, parent, invokingState) {
		if (parent === undefined) {
			parent = null;
		}
		if (invokingState === undefined || invokingState === null) {
			invokingState = -1;
		}
		super(parent, invokingState);
		this.parser = parser;
		this.ruleIndex = FeiyanFormulaParser.RULE_enumHead;
	}

	enumkey() {
		return this.getTypedRuleContext(EnumkeyContext, 0);
	};

	attributeSpecifierSeq() {
		return this.getTypedRuleContext(AttributeSpecifierSeqContext, 0);
	};

	Identifier() {
		return this.getToken(FeiyanFormulaParser.Identifier, 0);
	};

	enumbase() {
		return this.getTypedRuleContext(EnumbaseContext, 0);
	};

	enterRule(listener) {
		if (listener instanceof FeiyanFormulaParserListener) {
			listener.enterEnumHead(this);
		}
	}

	exitRule(listener) {
		if (listener instanceof FeiyanFormulaParserListener) {
			listener.exitEnumHead(this);
		}
	}

	accept(visitor) {
		if (visitor instanceof FeiyanFormulaParserVisitor) {
			return visitor.visitEnumHead(this);
		} else {
			return visitor.visitChildren(this);
		}
	}


}



class OpaqueEnumDeclarationContext extends antlr4.ParserRuleContext {

	constructor(parser, parent, invokingState) {
		if (parent === undefined) {
			parent = null;
		}
		if (invokingState === undefined || invokingState === null) {
			invokingState = -1;
		}
		super(parent, invokingState);
		this.parser = parser;
		this.ruleIndex = FeiyanFormulaParser.RULE_opaqueEnumDeclaration;
	}

	enumkey() {
		return this.getTypedRuleContext(EnumkeyContext, 0);
	};

	Identifier() {
		return this.getToken(FeiyanFormulaParser.Identifier, 0);
	};

	Semi() {
		return this.getToken(FeiyanFormulaParser.Semi, 0);
	};

	attributeSpecifierSeq() {
		return this.getTypedRuleContext(AttributeSpecifierSeqContext, 0);
	};

	enumbase() {
		return this.getTypedRuleContext(EnumbaseContext, 0);
	};

	enterRule(listener) {
		if (listener instanceof FeiyanFormulaParserListener) {
			listener.enterOpaqueEnumDeclaration(this);
		}
	}

	exitRule(listener) {
		if (listener instanceof FeiyanFormulaParserListener) {
			listener.exitOpaqueEnumDeclaration(this);
		}
	}

	accept(visitor) {
		if (visitor instanceof FeiyanFormulaParserVisitor) {
			return visitor.visitOpaqueEnumDeclaration(this);
		} else {
			return visitor.visitChildren(this);
		}
	}


}



class EnumkeyContext extends antlr4.ParserRuleContext {

	constructor(parser, parent, invokingState) {
		if (parent === undefined) {
			parent = null;
		}
		if (invokingState === undefined || invokingState === null) {
			invokingState = -1;
		}
		super(parent, invokingState);
		this.parser = parser;
		this.ruleIndex = FeiyanFormulaParser.RULE_enumkey;
	}

	Enum() {
		return this.getToken(FeiyanFormulaParser.Enum, 0);
	};

	Class() {
		return this.getToken(FeiyanFormulaParser.Class, 0);
	};

	Struct() {
		return this.getToken(FeiyanFormulaParser.Struct, 0);
	};

	enterRule(listener) {
		if (listener instanceof FeiyanFormulaParserListener) {
			listener.enterEnumkey(this);
		}
	}

	exitRule(listener) {
		if (listener instanceof FeiyanFormulaParserListener) {
			listener.exitEnumkey(this);
		}
	}

	accept(visitor) {
		if (visitor instanceof FeiyanFormulaParserVisitor) {
			return visitor.visitEnumkey(this);
		} else {
			return visitor.visitChildren(this);
		}
	}


}



class EnumbaseContext extends antlr4.ParserRuleContext {

	constructor(parser, parent, invokingState) {
		if (parent === undefined) {
			parent = null;
		}
		if (invokingState === undefined || invokingState === null) {
			invokingState = -1;
		}
		super(parent, invokingState);
		this.parser = parser;
		this.ruleIndex = FeiyanFormulaParser.RULE_enumbase;
	}

	Colon() {
		return this.getToken(FeiyanFormulaParser.Colon, 0);
	};

	typeSpecifierSeq() {
		return this.getTypedRuleContext(TypeSpecifierSeqContext, 0);
	};

	enterRule(listener) {
		if (listener instanceof FeiyanFormulaParserListener) {
			listener.enterEnumbase(this);
		}
	}

	exitRule(listener) {
		if (listener instanceof FeiyanFormulaParserListener) {
			listener.exitEnumbase(this);
		}
	}

	accept(visitor) {
		if (visitor instanceof FeiyanFormulaParserVisitor) {
			return visitor.visitEnumbase(this);
		} else {
			return visitor.visitChildren(this);
		}
	}


}



class EnumeratorListContext extends antlr4.ParserRuleContext {

	constructor(parser, parent, invokingState) {
		if (parent === undefined) {
			parent = null;
		}
		if (invokingState === undefined || invokingState === null) {
			invokingState = -1;
		}
		super(parent, invokingState);
		this.parser = parser;
		this.ruleIndex = FeiyanFormulaParser.RULE_enumeratorList;
	}

	enumeratorDefinition = function (i) {
		if (i === undefined) {
			i = null;
		}
		if (i === null) {
			return this.getTypedRuleContexts(EnumeratorDefinitionContext);
		} else {
			return this.getTypedRuleContext(EnumeratorDefinitionContext, i);
		}
	};

	Comma = function (i) {
		if (i === undefined) {
			i = null;
		}
		if (i === null) {
			return this.getTokens(FeiyanFormulaParser.Comma);
		} else {
			return this.getToken(FeiyanFormulaParser.Comma, i);
		}
	};


	enterRule(listener) {
		if (listener instanceof FeiyanFormulaParserListener) {
			listener.enterEnumeratorList(this);
		}
	}

	exitRule(listener) {
		if (listener instanceof FeiyanFormulaParserListener) {
			listener.exitEnumeratorList(this);
		}
	}

	accept(visitor) {
		if (visitor instanceof FeiyanFormulaParserVisitor) {
			return visitor.visitEnumeratorList(this);
		} else {
			return visitor.visitChildren(this);
		}
	}


}



class EnumeratorDefinitionContext extends antlr4.ParserRuleContext {

	constructor(parser, parent, invokingState) {
		if (parent === undefined) {
			parent = null;
		}
		if (invokingState === undefined || invokingState === null) {
			invokingState = -1;
		}
		super(parent, invokingState);
		this.parser = parser;
		this.ruleIndex = FeiyanFormulaParser.RULE_enumeratorDefinition;
	}

	enumerator() {
		return this.getTypedRuleContext(EnumeratorContext, 0);
	};

	Assign() {
		return this.getToken(FeiyanFormulaParser.Assign, 0);
	};

	constantExpression() {
		return this.getTypedRuleContext(ConstantExpressionContext, 0);
	};

	enterRule(listener) {
		if (listener instanceof FeiyanFormulaParserListener) {
			listener.enterEnumeratorDefinition(this);
		}
	}

	exitRule(listener) {
		if (listener instanceof FeiyanFormulaParserListener) {
			listener.exitEnumeratorDefinition(this);
		}
	}

	accept(visitor) {
		if (visitor instanceof FeiyanFormulaParserVisitor) {
			return visitor.visitEnumeratorDefinition(this);
		} else {
			return visitor.visitChildren(this);
		}
	}


}



class EnumeratorContext extends antlr4.ParserRuleContext {

	constructor(parser, parent, invokingState) {
		if (parent === undefined) {
			parent = null;
		}
		if (invokingState === undefined || invokingState === null) {
			invokingState = -1;
		}
		super(parent, invokingState);
		this.parser = parser;
		this.ruleIndex = FeiyanFormulaParser.RULE_enumerator;
	}

	Identifier() {
		return this.getToken(FeiyanFormulaParser.Identifier, 0);
	};

	enterRule(listener) {
		if (listener instanceof FeiyanFormulaParserListener) {
			listener.enterEnumerator(this);
		}
	}

	exitRule(listener) {
		if (listener instanceof FeiyanFormulaParserListener) {
			listener.exitEnumerator(this);
		}
	}

	accept(visitor) {
		if (visitor instanceof FeiyanFormulaParserVisitor) {
			return visitor.visitEnumerator(this);
		} else {
			return visitor.visitChildren(this);
		}
	}


}



class NamespaceNameContext extends antlr4.ParserRuleContext {

	constructor(parser, parent, invokingState) {
		if (parent === undefined) {
			parent = null;
		}
		if (invokingState === undefined || invokingState === null) {
			invokingState = -1;
		}
		super(parent, invokingState);
		this.parser = parser;
		this.ruleIndex = FeiyanFormulaParser.RULE_namespaceName;
	}

	originalNamespaceName() {
		return this.getTypedRuleContext(OriginalNamespaceNameContext, 0);
	};

	namespaceAlias() {
		return this.getTypedRuleContext(NamespaceAliasContext, 0);
	};

	enterRule(listener) {
		if (listener instanceof FeiyanFormulaParserListener) {
			listener.enterNamespaceName(this);
		}
	}

	exitRule(listener) {
		if (listener instanceof FeiyanFormulaParserListener) {
			listener.exitNamespaceName(this);
		}
	}

	accept(visitor) {
		if (visitor instanceof FeiyanFormulaParserVisitor) {
			return visitor.visitNamespaceName(this);
		} else {
			return visitor.visitChildren(this);
		}
	}


}



class OriginalNamespaceNameContext extends antlr4.ParserRuleContext {

	constructor(parser, parent, invokingState) {
		if (parent === undefined) {
			parent = null;
		}
		if (invokingState === undefined || invokingState === null) {
			invokingState = -1;
		}
		super(parent, invokingState);
		this.parser = parser;
		this.ruleIndex = FeiyanFormulaParser.RULE_originalNamespaceName;
	}

	Identifier() {
		return this.getToken(FeiyanFormulaParser.Identifier, 0);
	};

	enterRule(listener) {
		if (listener instanceof FeiyanFormulaParserListener) {
			listener.enterOriginalNamespaceName(this);
		}
	}

	exitRule(listener) {
		if (listener instanceof FeiyanFormulaParserListener) {
			listener.exitOriginalNamespaceName(this);
		}
	}

	accept(visitor) {
		if (visitor instanceof FeiyanFormulaParserVisitor) {
			return visitor.visitOriginalNamespaceName(this);
		} else {
			return visitor.visitChildren(this);
		}
	}


}



class NamespaceAliasContext extends antlr4.ParserRuleContext {

	constructor(parser, parent, invokingState) {
		if (parent === undefined) {
			parent = null;
		}
		if (invokingState === undefined || invokingState === null) {
			invokingState = -1;
		}
		super(parent, invokingState);
		this.parser = parser;
		this.ruleIndex = FeiyanFormulaParser.RULE_namespaceAlias;
	}

	Identifier() {
		return this.getToken(FeiyanFormulaParser.Identifier, 0);
	};

	enterRule(listener) {
		if (listener instanceof FeiyanFormulaParserListener) {
			listener.enterNamespaceAlias(this);
		}
	}

	exitRule(listener) {
		if (listener instanceof FeiyanFormulaParserListener) {
			listener.exitNamespaceAlias(this);
		}
	}

	accept(visitor) {
		if (visitor instanceof FeiyanFormulaParserVisitor) {
			return visitor.visitNamespaceAlias(this);
		} else {
			return visitor.visitChildren(this);
		}
	}


}



class AttributeSpecifierSeqContext extends antlr4.ParserRuleContext {

	constructor(parser, parent, invokingState) {
		if (parent === undefined) {
			parent = null;
		}
		if (invokingState === undefined || invokingState === null) {
			invokingState = -1;
		}
		super(parent, invokingState);
		this.parser = parser;
		this.ruleIndex = FeiyanFormulaParser.RULE_attributeSpecifierSeq;
	}

	attributeSpecifier = function (i) {
		if (i === undefined) {
			i = null;
		}
		if (i === null) {
			return this.getTypedRuleContexts(AttributeSpecifierContext);
		} else {
			return this.getTypedRuleContext(AttributeSpecifierContext, i);
		}
	};

	enterRule(listener) {
		if (listener instanceof FeiyanFormulaParserListener) {
			listener.enterAttributeSpecifierSeq(this);
		}
	}

	exitRule(listener) {
		if (listener instanceof FeiyanFormulaParserListener) {
			listener.exitAttributeSpecifierSeq(this);
		}
	}

	accept(visitor) {
		if (visitor instanceof FeiyanFormulaParserVisitor) {
			return visitor.visitAttributeSpecifierSeq(this);
		} else {
			return visitor.visitChildren(this);
		}
	}


}



class AttributeSpecifierContext extends antlr4.ParserRuleContext {

	constructor(parser, parent, invokingState) {
		if (parent === undefined) {
			parent = null;
		}
		if (invokingState === undefined || invokingState === null) {
			invokingState = -1;
		}
		super(parent, invokingState);
		this.parser = parser;
		this.ruleIndex = FeiyanFormulaParser.RULE_attributeSpecifier;
	}

	LeftBracket = function (i) {
		if (i === undefined) {
			i = null;
		}
		if (i === null) {
			return this.getTokens(FeiyanFormulaParser.LeftBracket);
		} else {
			return this.getToken(FeiyanFormulaParser.LeftBracket, i);
		}
	};


	RightBracket = function (i) {
		if (i === undefined) {
			i = null;
		}
		if (i === null) {
			return this.getTokens(FeiyanFormulaParser.RightBracket);
		} else {
			return this.getToken(FeiyanFormulaParser.RightBracket, i);
		}
	};


	attributeList() {
		return this.getTypedRuleContext(AttributeListContext, 0);
	};

	alignmentspecifier() {
		return this.getTypedRuleContext(AlignmentspecifierContext, 0);
	};

	enterRule(listener) {
		if (listener instanceof FeiyanFormulaParserListener) {
			listener.enterAttributeSpecifier(this);
		}
	}

	exitRule(listener) {
		if (listener instanceof FeiyanFormulaParserListener) {
			listener.exitAttributeSpecifier(this);
		}
	}

	accept(visitor) {
		if (visitor instanceof FeiyanFormulaParserVisitor) {
			return visitor.visitAttributeSpecifier(this);
		} else {
			return visitor.visitChildren(this);
		}
	}


}



class AlignmentspecifierContext extends antlr4.ParserRuleContext {

	constructor(parser, parent, invokingState) {
		if (parent === undefined) {
			parent = null;
		}
		if (invokingState === undefined || invokingState === null) {
			invokingState = -1;
		}
		super(parent, invokingState);
		this.parser = parser;
		this.ruleIndex = FeiyanFormulaParser.RULE_alignmentspecifier;
	}

	Alignas() {
		return this.getToken(FeiyanFormulaParser.Alignas, 0);
	};

	LeftParen() {
		return this.getToken(FeiyanFormulaParser.LeftParen, 0);
	};

	RightParen() {
		return this.getToken(FeiyanFormulaParser.RightParen, 0);
	};

	theTypeId() {
		return this.getTypedRuleContext(TheTypeIdContext, 0);
	};

	constantExpression() {
		return this.getTypedRuleContext(ConstantExpressionContext, 0);
	};

	Ellipsis() {
		return this.getToken(FeiyanFormulaParser.Ellipsis, 0);
	};

	enterRule(listener) {
		if (listener instanceof FeiyanFormulaParserListener) {
			listener.enterAlignmentspecifier(this);
		}
	}

	exitRule(listener) {
		if (listener instanceof FeiyanFormulaParserListener) {
			listener.exitAlignmentspecifier(this);
		}
	}

	accept(visitor) {
		if (visitor instanceof FeiyanFormulaParserVisitor) {
			return visitor.visitAlignmentspecifier(this);
		} else {
			return visitor.visitChildren(this);
		}
	}


}



class AttributeListContext extends antlr4.ParserRuleContext {

	constructor(parser, parent, invokingState) {
		if (parent === undefined) {
			parent = null;
		}
		if (invokingState === undefined || invokingState === null) {
			invokingState = -1;
		}
		super(parent, invokingState);
		this.parser = parser;
		this.ruleIndex = FeiyanFormulaParser.RULE_attributeList;
	}

	attribute = function (i) {
		if (i === undefined) {
			i = null;
		}
		if (i === null) {
			return this.getTypedRuleContexts(AttributeContext);
		} else {
			return this.getTypedRuleContext(AttributeContext, i);
		}
	};

	Comma = function (i) {
		if (i === undefined) {
			i = null;
		}
		if (i === null) {
			return this.getTokens(FeiyanFormulaParser.Comma);
		} else {
			return this.getToken(FeiyanFormulaParser.Comma, i);
		}
	};


	Ellipsis() {
		return this.getToken(FeiyanFormulaParser.Ellipsis, 0);
	};

	enterRule(listener) {
		if (listener instanceof FeiyanFormulaParserListener) {
			listener.enterAttributeList(this);
		}
	}

	exitRule(listener) {
		if (listener instanceof FeiyanFormulaParserListener) {
			listener.exitAttributeList(this);
		}
	}

	accept(visitor) {
		if (visitor instanceof FeiyanFormulaParserVisitor) {
			return visitor.visitAttributeList(this);
		} else {
			return visitor.visitChildren(this);
		}
	}


}



class AttributeContext extends antlr4.ParserRuleContext {

	constructor(parser, parent, invokingState) {
		if (parent === undefined) {
			parent = null;
		}
		if (invokingState === undefined || invokingState === null) {
			invokingState = -1;
		}
		super(parent, invokingState);
		this.parser = parser;
		this.ruleIndex = FeiyanFormulaParser.RULE_attribute;
	}

	Identifier() {
		return this.getToken(FeiyanFormulaParser.Identifier, 0);
	};

	attributeNamespace() {
		return this.getTypedRuleContext(AttributeNamespaceContext, 0);
	};

	Doublecolon() {
		return this.getToken(FeiyanFormulaParser.Doublecolon, 0);
	};

	attributeArgumentClause() {
		return this.getTypedRuleContext(AttributeArgumentClauseContext, 0);
	};

	enterRule(listener) {
		if (listener instanceof FeiyanFormulaParserListener) {
			listener.enterAttribute(this);
		}
	}

	exitRule(listener) {
		if (listener instanceof FeiyanFormulaParserListener) {
			listener.exitAttribute(this);
		}
	}

	accept(visitor) {
		if (visitor instanceof FeiyanFormulaParserVisitor) {
			return visitor.visitAttribute(this);
		} else {
			return visitor.visitChildren(this);
		}
	}


}



class AttributeNamespaceContext extends antlr4.ParserRuleContext {

	constructor(parser, parent, invokingState) {
		if (parent === undefined) {
			parent = null;
		}
		if (invokingState === undefined || invokingState === null) {
			invokingState = -1;
		}
		super(parent, invokingState);
		this.parser = parser;
		this.ruleIndex = FeiyanFormulaParser.RULE_attributeNamespace;
	}

	Identifier() {
		return this.getToken(FeiyanFormulaParser.Identifier, 0);
	};

	enterRule(listener) {
		if (listener instanceof FeiyanFormulaParserListener) {
			listener.enterAttributeNamespace(this);
		}
	}

	exitRule(listener) {
		if (listener instanceof FeiyanFormulaParserListener) {
			listener.exitAttributeNamespace(this);
		}
	}

	accept(visitor) {
		if (visitor instanceof FeiyanFormulaParserVisitor) {
			return visitor.visitAttributeNamespace(this);
		} else {
			return visitor.visitChildren(this);
		}
	}


}



class AttributeArgumentClauseContext extends antlr4.ParserRuleContext {

	constructor(parser, parent, invokingState) {
		if (parent === undefined) {
			parent = null;
		}
		if (invokingState === undefined || invokingState === null) {
			invokingState = -1;
		}
		super(parent, invokingState);
		this.parser = parser;
		this.ruleIndex = FeiyanFormulaParser.RULE_attributeArgumentClause;
	}

	LeftParen() {
		return this.getToken(FeiyanFormulaParser.LeftParen, 0);
	};

	RightParen() {
		return this.getToken(FeiyanFormulaParser.RightParen, 0);
	};

	balancedTokenSeq() {
		return this.getTypedRuleContext(BalancedTokenSeqContext, 0);
	};

	enterRule(listener) {
		if (listener instanceof FeiyanFormulaParserListener) {
			listener.enterAttributeArgumentClause(this);
		}
	}

	exitRule(listener) {
		if (listener instanceof FeiyanFormulaParserListener) {
			listener.exitAttributeArgumentClause(this);
		}
	}

	accept(visitor) {
		if (visitor instanceof FeiyanFormulaParserVisitor) {
			return visitor.visitAttributeArgumentClause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}


}



class BalancedTokenSeqContext extends antlr4.ParserRuleContext {

	constructor(parser, parent, invokingState) {
		if (parent === undefined) {
			parent = null;
		}
		if (invokingState === undefined || invokingState === null) {
			invokingState = -1;
		}
		super(parent, invokingState);
		this.parser = parser;
		this.ruleIndex = FeiyanFormulaParser.RULE_balancedTokenSeq;
	}

	balancedtoken = function (i) {
		if (i === undefined) {
			i = null;
		}
		if (i === null) {
			return this.getTypedRuleContexts(BalancedtokenContext);
		} else {
			return this.getTypedRuleContext(BalancedtokenContext, i);
		}
	};

	enterRule(listener) {
		if (listener instanceof FeiyanFormulaParserListener) {
			listener.enterBalancedTokenSeq(this);
		}
	}

	exitRule(listener) {
		if (listener instanceof FeiyanFormulaParserListener) {
			listener.exitBalancedTokenSeq(this);
		}
	}

	accept(visitor) {
		if (visitor instanceof FeiyanFormulaParserVisitor) {
			return visitor.visitBalancedTokenSeq(this);
		} else {
			return visitor.visitChildren(this);
		}
	}


}



class BalancedtokenContext extends antlr4.ParserRuleContext {

	constructor(parser, parent, invokingState) {
		if (parent === undefined) {
			parent = null;
		}
		if (invokingState === undefined || invokingState === null) {
			invokingState = -1;
		}
		super(parent, invokingState);
		this.parser = parser;
		this.ruleIndex = FeiyanFormulaParser.RULE_balancedtoken;
	}

	LeftParen = function (i) {
		if (i === undefined) {
			i = null;
		}
		if (i === null) {
			return this.getTokens(FeiyanFormulaParser.LeftParen);
		} else {
			return this.getToken(FeiyanFormulaParser.LeftParen, i);
		}
	};


	balancedTokenSeq() {
		return this.getTypedRuleContext(BalancedTokenSeqContext, 0);
	};

	RightParen = function (i) {
		if (i === undefined) {
			i = null;
		}
		if (i === null) {
			return this.getTokens(FeiyanFormulaParser.RightParen);
		} else {
			return this.getToken(FeiyanFormulaParser.RightParen, i);
		}
	};


	LeftBracket = function (i) {
		if (i === undefined) {
			i = null;
		}
		if (i === null) {
			return this.getTokens(FeiyanFormulaParser.LeftBracket);
		} else {
			return this.getToken(FeiyanFormulaParser.LeftBracket, i);
		}
	};


	RightBracket = function (i) {
		if (i === undefined) {
			i = null;
		}
		if (i === null) {
			return this.getTokens(FeiyanFormulaParser.RightBracket);
		} else {
			return this.getToken(FeiyanFormulaParser.RightBracket, i);
		}
	};


	LeftBrace = function (i) {
		if (i === undefined) {
			i = null;
		}
		if (i === null) {
			return this.getTokens(FeiyanFormulaParser.LeftBrace);
		} else {
			return this.getToken(FeiyanFormulaParser.LeftBrace, i);
		}
	};


	RightBrace = function (i) {
		if (i === undefined) {
			i = null;
		}
		if (i === null) {
			return this.getTokens(FeiyanFormulaParser.RightBrace);
		} else {
			return this.getToken(FeiyanFormulaParser.RightBrace, i);
		}
	};


	enterRule(listener) {
		if (listener instanceof FeiyanFormulaParserListener) {
			listener.enterBalancedtoken(this);
		}
	}

	exitRule(listener) {
		if (listener instanceof FeiyanFormulaParserListener) {
			listener.exitBalancedtoken(this);
		}
	}

	accept(visitor) {
		if (visitor instanceof FeiyanFormulaParserVisitor) {
			return visitor.visitBalancedtoken(this);
		} else {
			return visitor.visitChildren(this);
		}
	}


}



class InitDeclaratorListContext extends antlr4.ParserRuleContext {

	constructor(parser, parent, invokingState) {
		if (parent === undefined) {
			parent = null;
		}
		if (invokingState === undefined || invokingState === null) {
			invokingState = -1;
		}
		super(parent, invokingState);
		this.parser = parser;
		this.ruleIndex = FeiyanFormulaParser.RULE_initDeclaratorList;
	}

	initDeclarator = function (i) {
		if (i === undefined) {
			i = null;
		}
		if (i === null) {
			return this.getTypedRuleContexts(InitDeclaratorContext);
		} else {
			return this.getTypedRuleContext(InitDeclaratorContext, i);
		}
	};

	Comma = function (i) {
		if (i === undefined) {
			i = null;
		}
		if (i === null) {
			return this.getTokens(FeiyanFormulaParser.Comma);
		} else {
			return this.getToken(FeiyanFormulaParser.Comma, i);
		}
	};


	enterRule(listener) {
		if (listener instanceof FeiyanFormulaParserListener) {
			listener.enterInitDeclaratorList(this);
		}
	}

	exitRule(listener) {
		if (listener instanceof FeiyanFormulaParserListener) {
			listener.exitInitDeclaratorList(this);
		}
	}

	accept(visitor) {
		if (visitor instanceof FeiyanFormulaParserVisitor) {
			return visitor.visitInitDeclaratorList(this);
		} else {
			return visitor.visitChildren(this);
		}
	}


}



class InitDeclaratorContext extends antlr4.ParserRuleContext {

	constructor(parser, parent, invokingState) {
		if (parent === undefined) {
			parent = null;
		}
		if (invokingState === undefined || invokingState === null) {
			invokingState = -1;
		}
		super(parent, invokingState);
		this.parser = parser;
		this.ruleIndex = FeiyanFormulaParser.RULE_initDeclarator;
	}

	declarator() {
		return this.getTypedRuleContext(DeclaratorContext, 0);
	};

	initializer() {
		return this.getTypedRuleContext(InitializerContext, 0);
	};

	enterRule(listener) {
		if (listener instanceof FeiyanFormulaParserListener) {
			listener.enterInitDeclarator(this);
		}
	}

	exitRule(listener) {
		if (listener instanceof FeiyanFormulaParserListener) {
			listener.exitInitDeclarator(this);
		}
	}

	accept(visitor) {
		if (visitor instanceof FeiyanFormulaParserVisitor) {
			return visitor.visitInitDeclarator(this);
		} else {
			return visitor.visitChildren(this);
		}
	}


}



class DeclaratorContext extends antlr4.ParserRuleContext {

	constructor(parser, parent, invokingState) {
		if (parent === undefined) {
			parent = null;
		}
		if (invokingState === undefined || invokingState === null) {
			invokingState = -1;
		}
		super(parent, invokingState);
		this.parser = parser;
		this.ruleIndex = FeiyanFormulaParser.RULE_declarator;
	}

	pointerDeclarator() {
		return this.getTypedRuleContext(PointerDeclaratorContext, 0);
	};

	noPointerDeclarator() {
		return this.getTypedRuleContext(NoPointerDeclaratorContext, 0);
	};

	parametersAndQualifiers() {
		return this.getTypedRuleContext(ParametersAndQualifiersContext, 0);
	};

	trailingReturnType() {
		return this.getTypedRuleContext(TrailingReturnTypeContext, 0);
	};

	enterRule(listener) {
		if (listener instanceof FeiyanFormulaParserListener) {
			listener.enterDeclarator(this);
		}
	}

	exitRule(listener) {
		if (listener instanceof FeiyanFormulaParserListener) {
			listener.exitDeclarator(this);
		}
	}

	accept(visitor) {
		if (visitor instanceof FeiyanFormulaParserVisitor) {
			return visitor.visitDeclarator(this);
		} else {
			return visitor.visitChildren(this);
		}
	}


}



class PointerDeclaratorContext extends antlr4.ParserRuleContext {

	constructor(parser, parent, invokingState) {
		if (parent === undefined) {
			parent = null;
		}
		if (invokingState === undefined || invokingState === null) {
			invokingState = -1;
		}
		super(parent, invokingState);
		this.parser = parser;
		this.ruleIndex = FeiyanFormulaParser.RULE_pointerDeclarator;
	}

	noPointerDeclarator() {
		return this.getTypedRuleContext(NoPointerDeclaratorContext, 0);
	};

	pointerOperator = function (i) {
		if (i === undefined) {
			i = null;
		}
		if (i === null) {
			return this.getTypedRuleContexts(PointerOperatorContext);
		} else {
			return this.getTypedRuleContext(PointerOperatorContext, i);
		}
	};

	Const = function (i) {
		if (i === undefined) {
			i = null;
		}
		if (i === null) {
			return this.getTokens(FeiyanFormulaParser.Const);
		} else {
			return this.getToken(FeiyanFormulaParser.Const, i);
		}
	};


	enterRule(listener) {
		if (listener instanceof FeiyanFormulaParserListener) {
			listener.enterPointerDeclarator(this);
		}
	}

	exitRule(listener) {
		if (listener instanceof FeiyanFormulaParserListener) {
			listener.exitPointerDeclarator(this);
		}
	}

	accept(visitor) {
		if (visitor instanceof FeiyanFormulaParserVisitor) {
			return visitor.visitPointerDeclarator(this);
		} else {
			return visitor.visitChildren(this);
		}
	}


}



class NoPointerDeclaratorContext extends antlr4.ParserRuleContext {

	constructor(parser, parent, invokingState) {
		if (parent === undefined) {
			parent = null;
		}
		if (invokingState === undefined || invokingState === null) {
			invokingState = -1;
		}
		super(parent, invokingState);
		this.parser = parser;
		this.ruleIndex = FeiyanFormulaParser.RULE_noPointerDeclarator;
	}

	declaratorid() {
		return this.getTypedRuleContext(DeclaratoridContext, 0);
	};

	attributeSpecifierSeq() {
		return this.getTypedRuleContext(AttributeSpecifierSeqContext, 0);
	};

	LeftParen() {
		return this.getToken(FeiyanFormulaParser.LeftParen, 0);
	};

	pointerDeclarator() {
		return this.getTypedRuleContext(PointerDeclaratorContext, 0);
	};

	RightParen() {
		return this.getToken(FeiyanFormulaParser.RightParen, 0);
	};

	noPointerDeclarator() {
		return this.getTypedRuleContext(NoPointerDeclaratorContext, 0);
	};

	parametersAndQualifiers() {
		return this.getTypedRuleContext(ParametersAndQualifiersContext, 0);
	};

	LeftBracket() {
		return this.getToken(FeiyanFormulaParser.LeftBracket, 0);
	};

	RightBracket() {
		return this.getToken(FeiyanFormulaParser.RightBracket, 0);
	};

	constantExpression() {
		return this.getTypedRuleContext(ConstantExpressionContext, 0);
	};

	enterRule(listener) {
		if (listener instanceof FeiyanFormulaParserListener) {
			listener.enterNoPointerDeclarator(this);
		}
	}

	exitRule(listener) {
		if (listener instanceof FeiyanFormulaParserListener) {
			listener.exitNoPointerDeclarator(this);
		}
	}

	accept(visitor) {
		if (visitor instanceof FeiyanFormulaParserVisitor) {
			return visitor.visitNoPointerDeclarator(this);
		} else {
			return visitor.visitChildren(this);
		}
	}


}



class ParametersAndQualifiersContext extends antlr4.ParserRuleContext {

	constructor(parser, parent, invokingState) {
		if (parent === undefined) {
			parent = null;
		}
		if (invokingState === undefined || invokingState === null) {
			invokingState = -1;
		}
		super(parent, invokingState);
		this.parser = parser;
		this.ruleIndex = FeiyanFormulaParser.RULE_parametersAndQualifiers;
	}

	LeftParen() {
		return this.getToken(FeiyanFormulaParser.LeftParen, 0);
	};

	RightParen() {
		return this.getToken(FeiyanFormulaParser.RightParen, 0);
	};

	parameterDeclarationClause() {
		return this.getTypedRuleContext(ParameterDeclarationClauseContext, 0);
	};

	cvqualifierseq() {
		return this.getTypedRuleContext(CvqualifierseqContext, 0);
	};

	refqualifier() {
		return this.getTypedRuleContext(RefqualifierContext, 0);
	};

	exceptionSpecification() {
		return this.getTypedRuleContext(ExceptionSpecificationContext, 0);
	};

	attributeSpecifierSeq() {
		return this.getTypedRuleContext(AttributeSpecifierSeqContext, 0);
	};

	enterRule(listener) {
		if (listener instanceof FeiyanFormulaParserListener) {
			listener.enterParametersAndQualifiers(this);
		}
	}

	exitRule(listener) {
		if (listener instanceof FeiyanFormulaParserListener) {
			listener.exitParametersAndQualifiers(this);
		}
	}

	accept(visitor) {
		if (visitor instanceof FeiyanFormulaParserVisitor) {
			return visitor.visitParametersAndQualifiers(this);
		} else {
			return visitor.visitChildren(this);
		}
	}


}



class TrailingReturnTypeContext extends antlr4.ParserRuleContext {

	constructor(parser, parent, invokingState) {
		if (parent === undefined) {
			parent = null;
		}
		if (invokingState === undefined || invokingState === null) {
			invokingState = -1;
		}
		super(parent, invokingState);
		this.parser = parser;
		this.ruleIndex = FeiyanFormulaParser.RULE_trailingReturnType;
	}

	Arrow() {
		return this.getToken(FeiyanFormulaParser.Arrow, 0);
	};

	trailingTypeSpecifierSeq() {
		return this.getTypedRuleContext(TrailingTypeSpecifierSeqContext, 0);
	};

	abstractDeclarator() {
		return this.getTypedRuleContext(AbstractDeclaratorContext, 0);
	};

	enterRule(listener) {
		if (listener instanceof FeiyanFormulaParserListener) {
			listener.enterTrailingReturnType(this);
		}
	}

	exitRule(listener) {
		if (listener instanceof FeiyanFormulaParserListener) {
			listener.exitTrailingReturnType(this);
		}
	}

	accept(visitor) {
		if (visitor instanceof FeiyanFormulaParserVisitor) {
			return visitor.visitTrailingReturnType(this);
		} else {
			return visitor.visitChildren(this);
		}
	}


}



class PointerOperatorContext extends antlr4.ParserRuleContext {

	constructor(parser, parent, invokingState) {
		if (parent === undefined) {
			parent = null;
		}
		if (invokingState === undefined || invokingState === null) {
			invokingState = -1;
		}
		super(parent, invokingState);
		this.parser = parser;
		this.ruleIndex = FeiyanFormulaParser.RULE_pointerOperator;
	}

	And() {
		return this.getToken(FeiyanFormulaParser.And, 0);
	};

	AndAnd() {
		return this.getToken(FeiyanFormulaParser.AndAnd, 0);
	};

	attributeSpecifierSeq() {
		return this.getTypedRuleContext(AttributeSpecifierSeqContext, 0);
	};

	Star() {
		return this.getToken(FeiyanFormulaParser.Star, 0);
	};

	cvqualifierseq() {
		return this.getTypedRuleContext(CvqualifierseqContext, 0);
	};

	enterRule(listener) {
		if (listener instanceof FeiyanFormulaParserListener) {
			listener.enterPointerOperator(this);
		}
	}

	exitRule(listener) {
		if (listener instanceof FeiyanFormulaParserListener) {
			listener.exitPointerOperator(this);
		}
	}

	accept(visitor) {
		if (visitor instanceof FeiyanFormulaParserVisitor) {
			return visitor.visitPointerOperator(this);
		} else {
			return visitor.visitChildren(this);
		}
	}


}



class CvqualifierseqContext extends antlr4.ParserRuleContext {

	constructor(parser, parent, invokingState) {
		if (parent === undefined) {
			parent = null;
		}
		if (invokingState === undefined || invokingState === null) {
			invokingState = -1;
		}
		super(parent, invokingState);
		this.parser = parser;
		this.ruleIndex = FeiyanFormulaParser.RULE_cvqualifierseq;
	}

	cvQualifier = function (i) {
		if (i === undefined) {
			i = null;
		}
		if (i === null) {
			return this.getTypedRuleContexts(CvQualifierContext);
		} else {
			return this.getTypedRuleContext(CvQualifierContext, i);
		}
	};

	enterRule(listener) {
		if (listener instanceof FeiyanFormulaParserListener) {
			listener.enterCvqualifierseq(this);
		}
	}

	exitRule(listener) {
		if (listener instanceof FeiyanFormulaParserListener) {
			listener.exitCvqualifierseq(this);
		}
	}

	accept(visitor) {
		if (visitor instanceof FeiyanFormulaParserVisitor) {
			return visitor.visitCvqualifierseq(this);
		} else {
			return visitor.visitChildren(this);
		}
	}


}



class CvQualifierContext extends antlr4.ParserRuleContext {

	constructor(parser, parent, invokingState) {
		if (parent === undefined) {
			parent = null;
		}
		if (invokingState === undefined || invokingState === null) {
			invokingState = -1;
		}
		super(parent, invokingState);
		this.parser = parser;
		this.ruleIndex = FeiyanFormulaParser.RULE_cvQualifier;
	}

	Const() {
		return this.getToken(FeiyanFormulaParser.Const, 0);
	};

	Volatile() {
		return this.getToken(FeiyanFormulaParser.Volatile, 0);
	};

	enterRule(listener) {
		if (listener instanceof FeiyanFormulaParserListener) {
			listener.enterCvQualifier(this);
		}
	}

	exitRule(listener) {
		if (listener instanceof FeiyanFormulaParserListener) {
			listener.exitCvQualifier(this);
		}
	}

	accept(visitor) {
		if (visitor instanceof FeiyanFormulaParserVisitor) {
			return visitor.visitCvQualifier(this);
		} else {
			return visitor.visitChildren(this);
		}
	}


}



class RefqualifierContext extends antlr4.ParserRuleContext {

	constructor(parser, parent, invokingState) {
		if (parent === undefined) {
			parent = null;
		}
		if (invokingState === undefined || invokingState === null) {
			invokingState = -1;
		}
		super(parent, invokingState);
		this.parser = parser;
		this.ruleIndex = FeiyanFormulaParser.RULE_refqualifier;
	}

	And() {
		return this.getToken(FeiyanFormulaParser.And, 0);
	};

	AndAnd() {
		return this.getToken(FeiyanFormulaParser.AndAnd, 0);
	};

	enterRule(listener) {
		if (listener instanceof FeiyanFormulaParserListener) {
			listener.enterRefqualifier(this);
		}
	}

	exitRule(listener) {
		if (listener instanceof FeiyanFormulaParserListener) {
			listener.exitRefqualifier(this);
		}
	}

	accept(visitor) {
		if (visitor instanceof FeiyanFormulaParserVisitor) {
			return visitor.visitRefqualifier(this);
		} else {
			return visitor.visitChildren(this);
		}
	}


}



class DeclaratoridContext extends antlr4.ParserRuleContext {

	constructor(parser, parent, invokingState) {
		if (parent === undefined) {
			parent = null;
		}
		if (invokingState === undefined || invokingState === null) {
			invokingState = -1;
		}
		super(parent, invokingState);
		this.parser = parser;
		this.ruleIndex = FeiyanFormulaParser.RULE_declaratorid;
	}

	idExpression() {
		return this.getTypedRuleContext(IdExpressionContext, 0);
	};

	Ellipsis() {
		return this.getToken(FeiyanFormulaParser.Ellipsis, 0);
	};

	enterRule(listener) {
		if (listener instanceof FeiyanFormulaParserListener) {
			listener.enterDeclaratorid(this);
		}
	}

	exitRule(listener) {
		if (listener instanceof FeiyanFormulaParserListener) {
			listener.exitDeclaratorid(this);
		}
	}

	accept(visitor) {
		if (visitor instanceof FeiyanFormulaParserVisitor) {
			return visitor.visitDeclaratorid(this);
		} else {
			return visitor.visitChildren(this);
		}
	}


}



class TheTypeIdContext extends antlr4.ParserRuleContext {

	constructor(parser, parent, invokingState) {
		if (parent === undefined) {
			parent = null;
		}
		if (invokingState === undefined || invokingState === null) {
			invokingState = -1;
		}
		super(parent, invokingState);
		this.parser = parser;
		this.ruleIndex = FeiyanFormulaParser.RULE_theTypeId;
	}

	typeSpecifierSeq() {
		return this.getTypedRuleContext(TypeSpecifierSeqContext, 0);
	};

	abstractDeclarator() {
		return this.getTypedRuleContext(AbstractDeclaratorContext, 0);
	};

	enterRule(listener) {
		if (listener instanceof FeiyanFormulaParserListener) {
			listener.enterTheTypeId(this);
		}
	}

	exitRule(listener) {
		if (listener instanceof FeiyanFormulaParserListener) {
			listener.exitTheTypeId(this);
		}
	}

	accept(visitor) {
		if (visitor instanceof FeiyanFormulaParserVisitor) {
			return visitor.visitTheTypeId(this);
		} else {
			return visitor.visitChildren(this);
		}
	}


}



class AbstractDeclaratorContext extends antlr4.ParserRuleContext {

	constructor(parser, parent, invokingState) {
		if (parent === undefined) {
			parent = null;
		}
		if (invokingState === undefined || invokingState === null) {
			invokingState = -1;
		}
		super(parent, invokingState);
		this.parser = parser;
		this.ruleIndex = FeiyanFormulaParser.RULE_abstractDeclarator;
	}

	pointerAbstractDeclarator() {
		return this.getTypedRuleContext(PointerAbstractDeclaratorContext, 0);
	};

	parametersAndQualifiers() {
		return this.getTypedRuleContext(ParametersAndQualifiersContext, 0);
	};

	trailingReturnType() {
		return this.getTypedRuleContext(TrailingReturnTypeContext, 0);
	};

	noPointerAbstractDeclarator() {
		return this.getTypedRuleContext(NoPointerAbstractDeclaratorContext, 0);
	};

	abstractPackDeclarator() {
		return this.getTypedRuleContext(AbstractPackDeclaratorContext, 0);
	};

	enterRule(listener) {
		if (listener instanceof FeiyanFormulaParserListener) {
			listener.enterAbstractDeclarator(this);
		}
	}

	exitRule(listener) {
		if (listener instanceof FeiyanFormulaParserListener) {
			listener.exitAbstractDeclarator(this);
		}
	}

	accept(visitor) {
		if (visitor instanceof FeiyanFormulaParserVisitor) {
			return visitor.visitAbstractDeclarator(this);
		} else {
			return visitor.visitChildren(this);
		}
	}


}



class PointerAbstractDeclaratorContext extends antlr4.ParserRuleContext {

	constructor(parser, parent, invokingState) {
		if (parent === undefined) {
			parent = null;
		}
		if (invokingState === undefined || invokingState === null) {
			invokingState = -1;
		}
		super(parent, invokingState);
		this.parser = parser;
		this.ruleIndex = FeiyanFormulaParser.RULE_pointerAbstractDeclarator;
	}

	noPointerAbstractDeclarator() {
		return this.getTypedRuleContext(NoPointerAbstractDeclaratorContext, 0);
	};

	pointerOperator = function (i) {
		if (i === undefined) {
			i = null;
		}
		if (i === null) {
			return this.getTypedRuleContexts(PointerOperatorContext);
		} else {
			return this.getTypedRuleContext(PointerOperatorContext, i);
		}
	};

	enterRule(listener) {
		if (listener instanceof FeiyanFormulaParserListener) {
			listener.enterPointerAbstractDeclarator(this);
		}
	}

	exitRule(listener) {
		if (listener instanceof FeiyanFormulaParserListener) {
			listener.exitPointerAbstractDeclarator(this);
		}
	}

	accept(visitor) {
		if (visitor instanceof FeiyanFormulaParserVisitor) {
			return visitor.visitPointerAbstractDeclarator(this);
		} else {
			return visitor.visitChildren(this);
		}
	}


}



class NoPointerAbstractDeclaratorContext extends antlr4.ParserRuleContext {

	constructor(parser, parent, invokingState) {
		if (parent === undefined) {
			parent = null;
		}
		if (invokingState === undefined || invokingState === null) {
			invokingState = -1;
		}
		super(parent, invokingState);
		this.parser = parser;
		this.ruleIndex = FeiyanFormulaParser.RULE_noPointerAbstractDeclarator;
	}

	parametersAndQualifiers() {
		return this.getTypedRuleContext(ParametersAndQualifiersContext, 0);
	};

	LeftBracket() {
		return this.getToken(FeiyanFormulaParser.LeftBracket, 0);
	};

	RightBracket() {
		return this.getToken(FeiyanFormulaParser.RightBracket, 0);
	};

	constantExpression() {
		return this.getTypedRuleContext(ConstantExpressionContext, 0);
	};

	attributeSpecifierSeq() {
		return this.getTypedRuleContext(AttributeSpecifierSeqContext, 0);
	};

	LeftParen() {
		return this.getToken(FeiyanFormulaParser.LeftParen, 0);
	};

	pointerAbstractDeclarator() {
		return this.getTypedRuleContext(PointerAbstractDeclaratorContext, 0);
	};

	RightParen() {
		return this.getToken(FeiyanFormulaParser.RightParen, 0);
	};

	noPointerAbstractDeclarator = function (i) {
		if (i === undefined) {
			i = null;
		}
		if (i === null) {
			return this.getTypedRuleContexts(NoPointerAbstractDeclaratorContext);
		} else {
			return this.getTypedRuleContext(NoPointerAbstractDeclaratorContext, i);
		}
	};

	enterRule(listener) {
		if (listener instanceof FeiyanFormulaParserListener) {
			listener.enterNoPointerAbstractDeclarator(this);
		}
	}

	exitRule(listener) {
		if (listener instanceof FeiyanFormulaParserListener) {
			listener.exitNoPointerAbstractDeclarator(this);
		}
	}

	accept(visitor) {
		if (visitor instanceof FeiyanFormulaParserVisitor) {
			return visitor.visitNoPointerAbstractDeclarator(this);
		} else {
			return visitor.visitChildren(this);
		}
	}


}



class AbstractPackDeclaratorContext extends antlr4.ParserRuleContext {

	constructor(parser, parent, invokingState) {
		if (parent === undefined) {
			parent = null;
		}
		if (invokingState === undefined || invokingState === null) {
			invokingState = -1;
		}
		super(parent, invokingState);
		this.parser = parser;
		this.ruleIndex = FeiyanFormulaParser.RULE_abstractPackDeclarator;
	}

	noPointerAbstractPackDeclarator() {
		return this.getTypedRuleContext(NoPointerAbstractPackDeclaratorContext, 0);
	};

	pointerOperator = function (i) {
		if (i === undefined) {
			i = null;
		}
		if (i === null) {
			return this.getTypedRuleContexts(PointerOperatorContext);
		} else {
			return this.getTypedRuleContext(PointerOperatorContext, i);
		}
	};

	enterRule(listener) {
		if (listener instanceof FeiyanFormulaParserListener) {
			listener.enterAbstractPackDeclarator(this);
		}
	}

	exitRule(listener) {
		if (listener instanceof FeiyanFormulaParserListener) {
			listener.exitAbstractPackDeclarator(this);
		}
	}

	accept(visitor) {
		if (visitor instanceof FeiyanFormulaParserVisitor) {
			return visitor.visitAbstractPackDeclarator(this);
		} else {
			return visitor.visitChildren(this);
		}
	}


}



class NoPointerAbstractPackDeclaratorContext extends antlr4.ParserRuleContext {

	constructor(parser, parent, invokingState) {
		if (parent === undefined) {
			parent = null;
		}
		if (invokingState === undefined || invokingState === null) {
			invokingState = -1;
		}
		super(parent, invokingState);
		this.parser = parser;
		this.ruleIndex = FeiyanFormulaParser.RULE_noPointerAbstractPackDeclarator;
	}

	Ellipsis() {
		return this.getToken(FeiyanFormulaParser.Ellipsis, 0);
	};

	noPointerAbstractPackDeclarator() {
		return this.getTypedRuleContext(NoPointerAbstractPackDeclaratorContext, 0);
	};

	parametersAndQualifiers() {
		return this.getTypedRuleContext(ParametersAndQualifiersContext, 0);
	};

	LeftBracket() {
		return this.getToken(FeiyanFormulaParser.LeftBracket, 0);
	};

	RightBracket() {
		return this.getToken(FeiyanFormulaParser.RightBracket, 0);
	};

	constantExpression() {
		return this.getTypedRuleContext(ConstantExpressionContext, 0);
	};

	attributeSpecifierSeq() {
		return this.getTypedRuleContext(AttributeSpecifierSeqContext, 0);
	};

	enterRule(listener) {
		if (listener instanceof FeiyanFormulaParserListener) {
			listener.enterNoPointerAbstractPackDeclarator(this);
		}
	}

	exitRule(listener) {
		if (listener instanceof FeiyanFormulaParserListener) {
			listener.exitNoPointerAbstractPackDeclarator(this);
		}
	}

	accept(visitor) {
		if (visitor instanceof FeiyanFormulaParserVisitor) {
			return visitor.visitNoPointerAbstractPackDeclarator(this);
		} else {
			return visitor.visitChildren(this);
		}
	}


}



class ParameterDeclarationClauseContext extends antlr4.ParserRuleContext {

	constructor(parser, parent, invokingState) {
		if (parent === undefined) {
			parent = null;
		}
		if (invokingState === undefined || invokingState === null) {
			invokingState = -1;
		}
		super(parent, invokingState);
		this.parser = parser;
		this.ruleIndex = FeiyanFormulaParser.RULE_parameterDeclarationClause;
	}

	parameterDeclarationList() {
		return this.getTypedRuleContext(ParameterDeclarationListContext, 0);
	};

	Ellipsis() {
		return this.getToken(FeiyanFormulaParser.Ellipsis, 0);
	};

	Comma() {
		return this.getToken(FeiyanFormulaParser.Comma, 0);
	};

	enterRule(listener) {
		if (listener instanceof FeiyanFormulaParserListener) {
			listener.enterParameterDeclarationClause(this);
		}
	}

	exitRule(listener) {
		if (listener instanceof FeiyanFormulaParserListener) {
			listener.exitParameterDeclarationClause(this);
		}
	}

	accept(visitor) {
		if (visitor instanceof FeiyanFormulaParserVisitor) {
			return visitor.visitParameterDeclarationClause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}


}



class ParameterDeclarationListContext extends antlr4.ParserRuleContext {

	constructor(parser, parent, invokingState) {
		if (parent === undefined) {
			parent = null;
		}
		if (invokingState === undefined || invokingState === null) {
			invokingState = -1;
		}
		super(parent, invokingState);
		this.parser = parser;
		this.ruleIndex = FeiyanFormulaParser.RULE_parameterDeclarationList;
	}

	parameterDeclaration = function (i) {
		if (i === undefined) {
			i = null;
		}
		if (i === null) {
			return this.getTypedRuleContexts(ParameterDeclarationContext);
		} else {
			return this.getTypedRuleContext(ParameterDeclarationContext, i);
		}
	};

	Comma = function (i) {
		if (i === undefined) {
			i = null;
		}
		if (i === null) {
			return this.getTokens(FeiyanFormulaParser.Comma);
		} else {
			return this.getToken(FeiyanFormulaParser.Comma, i);
		}
	};


	enterRule(listener) {
		if (listener instanceof FeiyanFormulaParserListener) {
			listener.enterParameterDeclarationList(this);
		}
	}

	exitRule(listener) {
		if (listener instanceof FeiyanFormulaParserListener) {
			listener.exitParameterDeclarationList(this);
		}
	}

	accept(visitor) {
		if (visitor instanceof FeiyanFormulaParserVisitor) {
			return visitor.visitParameterDeclarationList(this);
		} else {
			return visitor.visitChildren(this);
		}
	}


}



class ParameterDeclarationContext extends antlr4.ParserRuleContext {

	constructor(parser, parent, invokingState) {
		if (parent === undefined) {
			parent = null;
		}
		if (invokingState === undefined || invokingState === null) {
			invokingState = -1;
		}
		super(parent, invokingState);
		this.parser = parser;
		this.ruleIndex = FeiyanFormulaParser.RULE_parameterDeclaration;
	}

	declSpecifierSeq() {
		return this.getTypedRuleContext(DeclSpecifierSeqContext, 0);
	};

	attributeSpecifierSeq() {
		return this.getTypedRuleContext(AttributeSpecifierSeqContext, 0);
	};

	declarator() {
		return this.getTypedRuleContext(DeclaratorContext, 0);
	};

	Assign() {
		return this.getToken(FeiyanFormulaParser.Assign, 0);
	};

	initializerClause() {
		return this.getTypedRuleContext(InitializerClauseContext, 0);
	};

	abstractDeclarator() {
		return this.getTypedRuleContext(AbstractDeclaratorContext, 0);
	};

	enterRule(listener) {
		if (listener instanceof FeiyanFormulaParserListener) {
			listener.enterParameterDeclaration(this);
		}
	}

	exitRule(listener) {
		if (listener instanceof FeiyanFormulaParserListener) {
			listener.exitParameterDeclaration(this);
		}
	}

	accept(visitor) {
		if (visitor instanceof FeiyanFormulaParserVisitor) {
			return visitor.visitParameterDeclaration(this);
		} else {
			return visitor.visitChildren(this);
		}
	}


}



class InitializerContext extends antlr4.ParserRuleContext {

	constructor(parser, parent, invokingState) {
		if (parent === undefined) {
			parent = null;
		}
		if (invokingState === undefined || invokingState === null) {
			invokingState = -1;
		}
		super(parent, invokingState);
		this.parser = parser;
		this.ruleIndex = FeiyanFormulaParser.RULE_initializer;
	}

	braceOrEqualInitializer() {
		return this.getTypedRuleContext(BraceOrEqualInitializerContext, 0);
	};

	LeftParen() {
		return this.getToken(FeiyanFormulaParser.LeftParen, 0);
	};

	expressionList() {
		return this.getTypedRuleContext(ExpressionListContext, 0);
	};

	RightParen() {
		return this.getToken(FeiyanFormulaParser.RightParen, 0);
	};

	enterRule(listener) {
		if (listener instanceof FeiyanFormulaParserListener) {
			listener.enterInitializer(this);
		}
	}

	exitRule(listener) {
		if (listener instanceof FeiyanFormulaParserListener) {
			listener.exitInitializer(this);
		}
	}

	accept(visitor) {
		if (visitor instanceof FeiyanFormulaParserVisitor) {
			return visitor.visitInitializer(this);
		} else {
			return visitor.visitChildren(this);
		}
	}


}



class BraceOrEqualInitializerContext extends antlr4.ParserRuleContext {

	constructor(parser, parent, invokingState) {
		if (parent === undefined) {
			parent = null;
		}
		if (invokingState === undefined || invokingState === null) {
			invokingState = -1;
		}
		super(parent, invokingState);
		this.parser = parser;
		this.ruleIndex = FeiyanFormulaParser.RULE_braceOrEqualInitializer;
	}

	Assign() {
		return this.getToken(FeiyanFormulaParser.Assign, 0);
	};

	initializerClause() {
		return this.getTypedRuleContext(InitializerClauseContext, 0);
	};

	bracedInitList() {
		return this.getTypedRuleContext(BracedInitListContext, 0);
	};

	enterRule(listener) {
		if (listener instanceof FeiyanFormulaParserListener) {
			listener.enterBraceOrEqualInitializer(this);
		}
	}

	exitRule(listener) {
		if (listener instanceof FeiyanFormulaParserListener) {
			listener.exitBraceOrEqualInitializer(this);
		}
	}

	accept(visitor) {
		if (visitor instanceof FeiyanFormulaParserVisitor) {
			return visitor.visitBraceOrEqualInitializer(this);
		} else {
			return visitor.visitChildren(this);
		}
	}


}



class InitializerClauseContext extends antlr4.ParserRuleContext {

	constructor(parser, parent, invokingState) {
		if (parent === undefined) {
			parent = null;
		}
		if (invokingState === undefined || invokingState === null) {
			invokingState = -1;
		}
		super(parent, invokingState);
		this.parser = parser;
		this.ruleIndex = FeiyanFormulaParser.RULE_initializerClause;
	}

	assignmentExpression() {
		return this.getTypedRuleContext(AssignmentExpressionContext, 0);
	};

	bracedInitList() {
		return this.getTypedRuleContext(BracedInitListContext, 0);
	};

	enterRule(listener) {
		if (listener instanceof FeiyanFormulaParserListener) {
			listener.enterInitializerClause(this);
		}
	}

	exitRule(listener) {
		if (listener instanceof FeiyanFormulaParserListener) {
			listener.exitInitializerClause(this);
		}
	}

	accept(visitor) {
		if (visitor instanceof FeiyanFormulaParserVisitor) {
			return visitor.visitInitializerClause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}


}



class InitializerListContext extends antlr4.ParserRuleContext {

	constructor(parser, parent, invokingState) {
		if (parent === undefined) {
			parent = null;
		}
		if (invokingState === undefined || invokingState === null) {
			invokingState = -1;
		}
		super(parent, invokingState);
		this.parser = parser;
		this.ruleIndex = FeiyanFormulaParser.RULE_initializerList;
	}

	initializerClause = function (i) {
		if (i === undefined) {
			i = null;
		}
		if (i === null) {
			return this.getTypedRuleContexts(InitializerClauseContext);
		} else {
			return this.getTypedRuleContext(InitializerClauseContext, i);
		}
	};

	Ellipsis = function (i) {
		if (i === undefined) {
			i = null;
		}
		if (i === null) {
			return this.getTokens(FeiyanFormulaParser.Ellipsis);
		} else {
			return this.getToken(FeiyanFormulaParser.Ellipsis, i);
		}
	};


	Comma = function (i) {
		if (i === undefined) {
			i = null;
		}
		if (i === null) {
			return this.getTokens(FeiyanFormulaParser.Comma);
		} else {
			return this.getToken(FeiyanFormulaParser.Comma, i);
		}
	};


	enterRule(listener) {
		if (listener instanceof FeiyanFormulaParserListener) {
			listener.enterInitializerList(this);
		}
	}

	exitRule(listener) {
		if (listener instanceof FeiyanFormulaParserListener) {
			listener.exitInitializerList(this);
		}
	}

	accept(visitor) {
		if (visitor instanceof FeiyanFormulaParserVisitor) {
			return visitor.visitInitializerList(this);
		} else {
			return visitor.visitChildren(this);
		}
	}


}



class BracedInitListContext extends antlr4.ParserRuleContext {

	constructor(parser, parent, invokingState) {
		if (parent === undefined) {
			parent = null;
		}
		if (invokingState === undefined || invokingState === null) {
			invokingState = -1;
		}
		super(parent, invokingState);
		this.parser = parser;
		this.ruleIndex = FeiyanFormulaParser.RULE_bracedInitList;
	}

	LeftBrace() {
		return this.getToken(FeiyanFormulaParser.LeftBrace, 0);
	};

	RightBrace() {
		return this.getToken(FeiyanFormulaParser.RightBrace, 0);
	};

	initializerList() {
		return this.getTypedRuleContext(InitializerListContext, 0);
	};

	Comma() {
		return this.getToken(FeiyanFormulaParser.Comma, 0);
	};

	enterRule(listener) {
		if (listener instanceof FeiyanFormulaParserListener) {
			listener.enterBracedInitList(this);
		}
	}

	exitRule(listener) {
		if (listener instanceof FeiyanFormulaParserListener) {
			listener.exitBracedInitList(this);
		}
	}

	accept(visitor) {
		if (visitor instanceof FeiyanFormulaParserVisitor) {
			return visitor.visitBracedInitList(this);
		} else {
			return visitor.visitChildren(this);
		}
	}


}



class ClassNameContext extends antlr4.ParserRuleContext {

	constructor(parser, parent, invokingState) {
		if (parent === undefined) {
			parent = null;
		}
		if (invokingState === undefined || invokingState === null) {
			invokingState = -1;
		}
		super(parent, invokingState);
		this.parser = parser;
		this.ruleIndex = FeiyanFormulaParser.RULE_className;
	}

	Identifier() {
		return this.getToken(FeiyanFormulaParser.Identifier, 0);
	};

	simpleTemplateId() {
		return this.getTypedRuleContext(SimpleTemplateIdContext, 0);
	};

	enterRule(listener) {
		if (listener instanceof FeiyanFormulaParserListener) {
			listener.enterClassName(this);
		}
	}

	exitRule(listener) {
		if (listener instanceof FeiyanFormulaParserListener) {
			listener.exitClassName(this);
		}
	}

	accept(visitor) {
		if (visitor instanceof FeiyanFormulaParserVisitor) {
			return visitor.visitClassName(this);
		} else {
			return visitor.visitChildren(this);
		}
	}


}



class OperatorFunctionIdContext extends antlr4.ParserRuleContext {

	constructor(parser, parent, invokingState) {
		if (parent === undefined) {
			parent = null;
		}
		if (invokingState === undefined || invokingState === null) {
			invokingState = -1;
		}
		super(parent, invokingState);
		this.parser = parser;
		this.ruleIndex = FeiyanFormulaParser.RULE_operatorFunctionId;
	}

	Operator() {
		return this.getToken(FeiyanFormulaParser.Operator, 0);
	};

	theOperator() {
		return this.getTypedRuleContext(TheOperatorContext, 0);
	};

	enterRule(listener) {
		if (listener instanceof FeiyanFormulaParserListener) {
			listener.enterOperatorFunctionId(this);
		}
	}

	exitRule(listener) {
		if (listener instanceof FeiyanFormulaParserListener) {
			listener.exitOperatorFunctionId(this);
		}
	}

	accept(visitor) {
		if (visitor instanceof FeiyanFormulaParserVisitor) {
			return visitor.visitOperatorFunctionId(this);
		} else {
			return visitor.visitChildren(this);
		}
	}


}



class LiteralOperatorIdContext extends antlr4.ParserRuleContext {

	constructor(parser, parent, invokingState) {
		if (parent === undefined) {
			parent = null;
		}
		if (invokingState === undefined || invokingState === null) {
			invokingState = -1;
		}
		super(parent, invokingState);
		this.parser = parser;
		this.ruleIndex = FeiyanFormulaParser.RULE_literalOperatorId;
	}

	Operator() {
		return this.getToken(FeiyanFormulaParser.Operator, 0);
	};

	StringLiteral() {
		return this.getToken(FeiyanFormulaParser.StringLiteral, 0);
	};

	Identifier() {
		return this.getToken(FeiyanFormulaParser.Identifier, 0);
	};

	UserDefinedStringLiteral() {
		return this.getToken(FeiyanFormulaParser.UserDefinedStringLiteral, 0);
	};

	enterRule(listener) {
		if (listener instanceof FeiyanFormulaParserListener) {
			listener.enterLiteralOperatorId(this);
		}
	}

	exitRule(listener) {
		if (listener instanceof FeiyanFormulaParserListener) {
			listener.exitLiteralOperatorId(this);
		}
	}

	accept(visitor) {
		if (visitor instanceof FeiyanFormulaParserVisitor) {
			return visitor.visitLiteralOperatorId(this);
		} else {
			return visitor.visitChildren(this);
		}
	}


}



class SimpleTemplateIdContext extends antlr4.ParserRuleContext {

	constructor(parser, parent, invokingState) {
		if (parent === undefined) {
			parent = null;
		}
		if (invokingState === undefined || invokingState === null) {
			invokingState = -1;
		}
		super(parent, invokingState);
		this.parser = parser;
		this.ruleIndex = FeiyanFormulaParser.RULE_simpleTemplateId;
	}

	templateName() {
		return this.getTypedRuleContext(TemplateNameContext, 0);
	};

	Less() {
		return this.getToken(FeiyanFormulaParser.Less, 0);
	};

	Greater() {
		return this.getToken(FeiyanFormulaParser.Greater, 0);
	};

	templateArgumentList() {
		return this.getTypedRuleContext(TemplateArgumentListContext, 0);
	};

	enterRule(listener) {
		if (listener instanceof FeiyanFormulaParserListener) {
			listener.enterSimpleTemplateId(this);
		}
	}

	exitRule(listener) {
		if (listener instanceof FeiyanFormulaParserListener) {
			listener.exitSimpleTemplateId(this);
		}
	}

	accept(visitor) {
		if (visitor instanceof FeiyanFormulaParserVisitor) {
			return visitor.visitSimpleTemplateId(this);
		} else {
			return visitor.visitChildren(this);
		}
	}


}



class TemplateNameContext extends antlr4.ParserRuleContext {

	constructor(parser, parent, invokingState) {
		if (parent === undefined) {
			parent = null;
		}
		if (invokingState === undefined || invokingState === null) {
			invokingState = -1;
		}
		super(parent, invokingState);
		this.parser = parser;
		this.ruleIndex = FeiyanFormulaParser.RULE_templateName;
	}

	Identifier() {
		return this.getToken(FeiyanFormulaParser.Identifier, 0);
	};

	enterRule(listener) {
		if (listener instanceof FeiyanFormulaParserListener) {
			listener.enterTemplateName(this);
		}
	}

	exitRule(listener) {
		if (listener instanceof FeiyanFormulaParserListener) {
			listener.exitTemplateName(this);
		}
	}

	accept(visitor) {
		if (visitor instanceof FeiyanFormulaParserVisitor) {
			return visitor.visitTemplateName(this);
		} else {
			return visitor.visitChildren(this);
		}
	}


}



class TemplateArgumentListContext extends antlr4.ParserRuleContext {

	constructor(parser, parent, invokingState) {
		if (parent === undefined) {
			parent = null;
		}
		if (invokingState === undefined || invokingState === null) {
			invokingState = -1;
		}
		super(parent, invokingState);
		this.parser = parser;
		this.ruleIndex = FeiyanFormulaParser.RULE_templateArgumentList;
	}

	templateArgument = function (i) {
		if (i === undefined) {
			i = null;
		}
		if (i === null) {
			return this.getTypedRuleContexts(TemplateArgumentContext);
		} else {
			return this.getTypedRuleContext(TemplateArgumentContext, i);
		}
	};

	Ellipsis = function (i) {
		if (i === undefined) {
			i = null;
		}
		if (i === null) {
			return this.getTokens(FeiyanFormulaParser.Ellipsis);
		} else {
			return this.getToken(FeiyanFormulaParser.Ellipsis, i);
		}
	};


	Comma = function (i) {
		if (i === undefined) {
			i = null;
		}
		if (i === null) {
			return this.getTokens(FeiyanFormulaParser.Comma);
		} else {
			return this.getToken(FeiyanFormulaParser.Comma, i);
		}
	};


	enterRule(listener) {
		if (listener instanceof FeiyanFormulaParserListener) {
			listener.enterTemplateArgumentList(this);
		}
	}

	exitRule(listener) {
		if (listener instanceof FeiyanFormulaParserListener) {
			listener.exitTemplateArgumentList(this);
		}
	}

	accept(visitor) {
		if (visitor instanceof FeiyanFormulaParserVisitor) {
			return visitor.visitTemplateArgumentList(this);
		} else {
			return visitor.visitChildren(this);
		}
	}


}



class TemplateArgumentContext extends antlr4.ParserRuleContext {

	constructor(parser, parent, invokingState) {
		if (parent === undefined) {
			parent = null;
		}
		if (invokingState === undefined || invokingState === null) {
			invokingState = -1;
		}
		super(parent, invokingState);
		this.parser = parser;
		this.ruleIndex = FeiyanFormulaParser.RULE_templateArgument;
	}

	theTypeId() {
		return this.getTypedRuleContext(TheTypeIdContext, 0);
	};

	constantExpression() {
		return this.getTypedRuleContext(ConstantExpressionContext, 0);
	};

	idExpression() {
		return this.getTypedRuleContext(IdExpressionContext, 0);
	};

	enterRule(listener) {
		if (listener instanceof FeiyanFormulaParserListener) {
			listener.enterTemplateArgument(this);
		}
	}

	exitRule(listener) {
		if (listener instanceof FeiyanFormulaParserListener) {
			listener.exitTemplateArgument(this);
		}
	}

	accept(visitor) {
		if (visitor instanceof FeiyanFormulaParserVisitor) {
			return visitor.visitTemplateArgument(this);
		} else {
			return visitor.visitChildren(this);
		}
	}


}



class ThrowExpressionContext extends antlr4.ParserRuleContext {

	constructor(parser, parent, invokingState) {
		if (parent === undefined) {
			parent = null;
		}
		if (invokingState === undefined || invokingState === null) {
			invokingState = -1;
		}
		super(parent, invokingState);
		this.parser = parser;
		this.ruleIndex = FeiyanFormulaParser.RULE_throwExpression;
	}

	Throw() {
		return this.getToken(FeiyanFormulaParser.Throw, 0);
	};

	assignmentExpression() {
		return this.getTypedRuleContext(AssignmentExpressionContext, 0);
	};

	enterRule(listener) {
		if (listener instanceof FeiyanFormulaParserListener) {
			listener.enterThrowExpression(this);
		}
	}

	exitRule(listener) {
		if (listener instanceof FeiyanFormulaParserListener) {
			listener.exitThrowExpression(this);
		}
	}

	accept(visitor) {
		if (visitor instanceof FeiyanFormulaParserVisitor) {
			return visitor.visitThrowExpression(this);
		} else {
			return visitor.visitChildren(this);
		}
	}


}



class ExceptionSpecificationContext extends antlr4.ParserRuleContext {

	constructor(parser, parent, invokingState) {
		if (parent === undefined) {
			parent = null;
		}
		if (invokingState === undefined || invokingState === null) {
			invokingState = -1;
		}
		super(parent, invokingState);
		this.parser = parser;
		this.ruleIndex = FeiyanFormulaParser.RULE_exceptionSpecification;
	}

	dynamicExceptionSpecification() {
		return this.getTypedRuleContext(DynamicExceptionSpecificationContext, 0);
	};

	noeExceptSpecification() {
		return this.getTypedRuleContext(NoeExceptSpecificationContext, 0);
	};

	enterRule(listener) {
		if (listener instanceof FeiyanFormulaParserListener) {
			listener.enterExceptionSpecification(this);
		}
	}

	exitRule(listener) {
		if (listener instanceof FeiyanFormulaParserListener) {
			listener.exitExceptionSpecification(this);
		}
	}

	accept(visitor) {
		if (visitor instanceof FeiyanFormulaParserVisitor) {
			return visitor.visitExceptionSpecification(this);
		} else {
			return visitor.visitChildren(this);
		}
	}


}



class DynamicExceptionSpecificationContext extends antlr4.ParserRuleContext {

	constructor(parser, parent, invokingState) {
		if (parent === undefined) {
			parent = null;
		}
		if (invokingState === undefined || invokingState === null) {
			invokingState = -1;
		}
		super(parent, invokingState);
		this.parser = parser;
		this.ruleIndex = FeiyanFormulaParser.RULE_dynamicExceptionSpecification;
	}

	Throw() {
		return this.getToken(FeiyanFormulaParser.Throw, 0);
	};

	LeftParen() {
		return this.getToken(FeiyanFormulaParser.LeftParen, 0);
	};

	RightParen() {
		return this.getToken(FeiyanFormulaParser.RightParen, 0);
	};

	typeIdList() {
		return this.getTypedRuleContext(TypeIdListContext, 0);
	};

	enterRule(listener) {
		if (listener instanceof FeiyanFormulaParserListener) {
			listener.enterDynamicExceptionSpecification(this);
		}
	}

	exitRule(listener) {
		if (listener instanceof FeiyanFormulaParserListener) {
			listener.exitDynamicExceptionSpecification(this);
		}
	}

	accept(visitor) {
		if (visitor instanceof FeiyanFormulaParserVisitor) {
			return visitor.visitDynamicExceptionSpecification(this);
		} else {
			return visitor.visitChildren(this);
		}
	}


}



class TypeIdListContext extends antlr4.ParserRuleContext {

	constructor(parser, parent, invokingState) {
		if (parent === undefined) {
			parent = null;
		}
		if (invokingState === undefined || invokingState === null) {
			invokingState = -1;
		}
		super(parent, invokingState);
		this.parser = parser;
		this.ruleIndex = FeiyanFormulaParser.RULE_typeIdList;
	}

	theTypeId = function (i) {
		if (i === undefined) {
			i = null;
		}
		if (i === null) {
			return this.getTypedRuleContexts(TheTypeIdContext);
		} else {
			return this.getTypedRuleContext(TheTypeIdContext, i);
		}
	};

	Ellipsis = function (i) {
		if (i === undefined) {
			i = null;
		}
		if (i === null) {
			return this.getTokens(FeiyanFormulaParser.Ellipsis);
		} else {
			return this.getToken(FeiyanFormulaParser.Ellipsis, i);
		}
	};


	Comma = function (i) {
		if (i === undefined) {
			i = null;
		}
		if (i === null) {
			return this.getTokens(FeiyanFormulaParser.Comma);
		} else {
			return this.getToken(FeiyanFormulaParser.Comma, i);
		}
	};


	enterRule(listener) {
		if (listener instanceof FeiyanFormulaParserListener) {
			listener.enterTypeIdList(this);
		}
	}

	exitRule(listener) {
		if (listener instanceof FeiyanFormulaParserListener) {
			listener.exitTypeIdList(this);
		}
	}

	accept(visitor) {
		if (visitor instanceof FeiyanFormulaParserVisitor) {
			return visitor.visitTypeIdList(this);
		} else {
			return visitor.visitChildren(this);
		}
	}


}



class NoeExceptSpecificationContext extends antlr4.ParserRuleContext {

	constructor(parser, parent, invokingState) {
		if (parent === undefined) {
			parent = null;
		}
		if (invokingState === undefined || invokingState === null) {
			invokingState = -1;
		}
		super(parent, invokingState);
		this.parser = parser;
		this.ruleIndex = FeiyanFormulaParser.RULE_noeExceptSpecification;
	}

	Noexcept() {
		return this.getToken(FeiyanFormulaParser.Noexcept, 0);
	};

	LeftParen() {
		return this.getToken(FeiyanFormulaParser.LeftParen, 0);
	};

	constantExpression() {
		return this.getTypedRuleContext(ConstantExpressionContext, 0);
	};

	RightParen() {
		return this.getToken(FeiyanFormulaParser.RightParen, 0);
	};

	enterRule(listener) {
		if (listener instanceof FeiyanFormulaParserListener) {
			listener.enterNoeExceptSpecification(this);
		}
	}

	exitRule(listener) {
		if (listener instanceof FeiyanFormulaParserListener) {
			listener.exitNoeExceptSpecification(this);
		}
	}

	accept(visitor) {
		if (visitor instanceof FeiyanFormulaParserVisitor) {
			return visitor.visitNoeExceptSpecification(this);
		} else {
			return visitor.visitChildren(this);
		}
	}


}



class TheOperatorContext extends antlr4.ParserRuleContext {

	constructor(parser, parent, invokingState) {
		if (parent === undefined) {
			parent = null;
		}
		if (invokingState === undefined || invokingState === null) {
			invokingState = -1;
		}
		super(parent, invokingState);
		this.parser = parser;
		this.ruleIndex = FeiyanFormulaParser.RULE_theOperator;
	}

	New() {
		return this.getToken(FeiyanFormulaParser.New, 0);
	};

	LeftBracket() {
		return this.getToken(FeiyanFormulaParser.LeftBracket, 0);
	};

	RightBracket() {
		return this.getToken(FeiyanFormulaParser.RightBracket, 0);
	};

	Delete() {
		return this.getToken(FeiyanFormulaParser.Delete, 0);
	};

	Plus() {
		return this.getToken(FeiyanFormulaParser.Plus, 0);
	};

	Minus() {
		return this.getToken(FeiyanFormulaParser.Minus, 0);
	};

	Star() {
		return this.getToken(FeiyanFormulaParser.Star, 0);
	};

	Div() {
		return this.getToken(FeiyanFormulaParser.Div, 0);
	};

	Mod() {
		return this.getToken(FeiyanFormulaParser.Mod, 0);
	};

	Caret() {
		return this.getToken(FeiyanFormulaParser.Caret, 0);
	};

	And() {
		return this.getToken(FeiyanFormulaParser.And, 0);
	};

	Or() {
		return this.getToken(FeiyanFormulaParser.Or, 0);
	};

	Tilde() {
		return this.getToken(FeiyanFormulaParser.Tilde, 0);
	};

	Not() {
		return this.getToken(FeiyanFormulaParser.Not, 0);
	};

	Assign() {
		return this.getToken(FeiyanFormulaParser.Assign, 0);
	};

	Greater = function (i) {
		if (i === undefined) {
			i = null;
		}
		if (i === null) {
			return this.getTokens(FeiyanFormulaParser.Greater);
		} else {
			return this.getToken(FeiyanFormulaParser.Greater, i);
		}
	};


	Less = function (i) {
		if (i === undefined) {
			i = null;
		}
		if (i === null) {
			return this.getTokens(FeiyanFormulaParser.Less);
		} else {
			return this.getToken(FeiyanFormulaParser.Less, i);
		}
	};


	GreaterEqual() {
		return this.getToken(FeiyanFormulaParser.GreaterEqual, 0);
	};

	PlusAssign() {
		return this.getToken(FeiyanFormulaParser.PlusAssign, 0);
	};

	MinusAssign() {
		return this.getToken(FeiyanFormulaParser.MinusAssign, 0);
	};

	StarAssign() {
		return this.getToken(FeiyanFormulaParser.StarAssign, 0);
	};

	ModAssign() {
		return this.getToken(FeiyanFormulaParser.ModAssign, 0);
	};

	XorAssign() {
		return this.getToken(FeiyanFormulaParser.XorAssign, 0);
	};

	AndAssign() {
		return this.getToken(FeiyanFormulaParser.AndAssign, 0);
	};

	OrAssign() {
		return this.getToken(FeiyanFormulaParser.OrAssign, 0);
	};

	RightShiftAssign() {
		return this.getToken(FeiyanFormulaParser.RightShiftAssign, 0);
	};

	LeftShiftAssign() {
		return this.getToken(FeiyanFormulaParser.LeftShiftAssign, 0);
	};

	Equal() {
		return this.getToken(FeiyanFormulaParser.Equal, 0);
	};

	NotEqual() {
		return this.getToken(FeiyanFormulaParser.NotEqual, 0);
	};

	LessEqual() {
		return this.getToken(FeiyanFormulaParser.LessEqual, 0);
	};

	AndAnd() {
		return this.getToken(FeiyanFormulaParser.AndAnd, 0);
	};

	OrOr() {
		return this.getToken(FeiyanFormulaParser.OrOr, 0);
	};

	PlusPlus() {
		return this.getToken(FeiyanFormulaParser.PlusPlus, 0);
	};

	MinusMinus() {
		return this.getToken(FeiyanFormulaParser.MinusMinus, 0);
	};

	Comma() {
		return this.getToken(FeiyanFormulaParser.Comma, 0);
	};

	ArrowStar() {
		return this.getToken(FeiyanFormulaParser.ArrowStar, 0);
	};

	Arrow() {
		return this.getToken(FeiyanFormulaParser.Arrow, 0);
	};

	LeftParen() {
		return this.getToken(FeiyanFormulaParser.LeftParen, 0);
	};

	RightParen() {
		return this.getToken(FeiyanFormulaParser.RightParen, 0);
	};

	enterRule(listener) {
		if (listener instanceof FeiyanFormulaParserListener) {
			listener.enterTheOperator(this);
		}
	}

	exitRule(listener) {
		if (listener instanceof FeiyanFormulaParserListener) {
			listener.exitTheOperator(this);
		}
	}

	accept(visitor) {
		if (visitor instanceof FeiyanFormulaParserVisitor) {
			return visitor.visitTheOperator(this);
		} else {
			return visitor.visitChildren(this);
		}
	}


}



class LiteralContext extends antlr4.ParserRuleContext {

	constructor(parser, parent, invokingState) {
		if (parent === undefined) {
			parent = null;
		}
		if (invokingState === undefined || invokingState === null) {
			invokingState = -1;
		}
		super(parent, invokingState);
		this.parser = parser;
		this.ruleIndex = FeiyanFormulaParser.RULE_literal;
	}

	IntegerLiteral() {
		return this.getToken(FeiyanFormulaParser.IntegerLiteral, 0);
	};

	CharacterLiteral() {
		return this.getToken(FeiyanFormulaParser.CharacterLiteral, 0);
	};

	FloatingLiteral() {
		return this.getToken(FeiyanFormulaParser.FloatingLiteral, 0);
	};

	StringLiteral() {
		return this.getToken(FeiyanFormulaParser.StringLiteral, 0);
	};

	BooleanLiteral() {
		return this.getToken(FeiyanFormulaParser.BooleanLiteral, 0);
	};

	PointerLiteral() {
		return this.getToken(FeiyanFormulaParser.PointerLiteral, 0);
	};

	UserDefinedLiteral() {
		return this.getToken(FeiyanFormulaParser.UserDefinedLiteral, 0);
	};

	enterRule(listener) {
		if (listener instanceof FeiyanFormulaParserListener) {
			listener.enterLiteral(this);
		}
	}

	exitRule(listener) {
		if (listener instanceof FeiyanFormulaParserListener) {
			listener.exitLiteral(this);
		}
	}

	accept(visitor) {
		if (visitor instanceof FeiyanFormulaParserVisitor) {
			return visitor.visitLiteral(this);
		} else {
			return visitor.visitChildren(this);
		}
	}


}




FeiyanFormulaParser.FormulaDefinitionContext = FormulaDefinitionContext;
FeiyanFormulaParser.PrimaryExpressionContext = PrimaryExpressionContext;
FeiyanFormulaParser.IdExpressionContext = IdExpressionContext;
FeiyanFormulaParser.UnqualifiedIdContext = UnqualifiedIdContext;
FeiyanFormulaParser.QualifiedIdContext = QualifiedIdContext;
FeiyanFormulaParser.NestedNameSpecifierContext = NestedNameSpecifierContext;
FeiyanFormulaParser.LambdaExpressionContext = LambdaExpressionContext;
FeiyanFormulaParser.LambdaIntroducerContext = LambdaIntroducerContext;
FeiyanFormulaParser.LambdaCaptureContext = LambdaCaptureContext;
FeiyanFormulaParser.CaptureDefaultContext = CaptureDefaultContext;
FeiyanFormulaParser.CaptureListContext = CaptureListContext;
FeiyanFormulaParser.CaptureContext = CaptureContext;
FeiyanFormulaParser.SimpleCaptureContext = SimpleCaptureContext;
FeiyanFormulaParser.InitcaptureContext = InitcaptureContext;
FeiyanFormulaParser.LambdaDeclaratorContext = LambdaDeclaratorContext;
FeiyanFormulaParser.PostfixExpressionContext = PostfixExpressionContext;
FeiyanFormulaParser.ExpressionListContext = ExpressionListContext;
FeiyanFormulaParser.UnaryExpressionContext = UnaryExpressionContext;
FeiyanFormulaParser.UnaryOperatorContext = UnaryOperatorContext;
FeiyanFormulaParser.NewExpressionContext = NewExpressionContext;
FeiyanFormulaParser.NewPlacementContext = NewPlacementContext;
FeiyanFormulaParser.NewTypeIdContext = NewTypeIdContext;
FeiyanFormulaParser.NewDeclaratorContext = NewDeclaratorContext;
FeiyanFormulaParser.NoPointerNewDeclaratorContext = NoPointerNewDeclaratorContext;
FeiyanFormulaParser.NewInitializerContext = NewInitializerContext;
FeiyanFormulaParser.CastExpressionContext = CastExpressionContext;
FeiyanFormulaParser.PointerMemberExpressionContext = PointerMemberExpressionContext;
FeiyanFormulaParser.MultiplicativeExpressionContext = MultiplicativeExpressionContext;
FeiyanFormulaParser.AdditiveExpressionContext = AdditiveExpressionContext;
FeiyanFormulaParser.ShiftExpressionContext = ShiftExpressionContext;
FeiyanFormulaParser.ShiftOperatorContext = ShiftOperatorContext;
FeiyanFormulaParser.RelationalExpressionContext = RelationalExpressionContext;
FeiyanFormulaParser.EqualityExpressionContext = EqualityExpressionContext;
FeiyanFormulaParser.AndExpressionContext = AndExpressionContext;
FeiyanFormulaParser.ExclusiveOrExpressionContext = ExclusiveOrExpressionContext;
FeiyanFormulaParser.InclusiveOrExpressionContext = InclusiveOrExpressionContext;
FeiyanFormulaParser.LogicalAndExpressionContext = LogicalAndExpressionContext;
FeiyanFormulaParser.LogicalOrExpressionContext = LogicalOrExpressionContext;
FeiyanFormulaParser.ConditionalExpressionContext = ConditionalExpressionContext;
FeiyanFormulaParser.AssignmentExpressionContext = AssignmentExpressionContext;
FeiyanFormulaParser.AssignmentOperatorContext = AssignmentOperatorContext;
FeiyanFormulaParser.ExpressionContext = ExpressionContext;
FeiyanFormulaParser.ConstantExpressionContext = ConstantExpressionContext;
FeiyanFormulaParser.StatementContext = StatementContext;
FeiyanFormulaParser.LabeledStatementContext = LabeledStatementContext;
FeiyanFormulaParser.ExpressionStatementContext = ExpressionStatementContext;
FeiyanFormulaParser.CompoundStatementContext = CompoundStatementContext;
FeiyanFormulaParser.StatementSeqContext = StatementSeqContext;
FeiyanFormulaParser.SelectionStatementContext = SelectionStatementContext;
FeiyanFormulaParser.ConditionContext = ConditionContext;
FeiyanFormulaParser.IterationStatementContext = IterationStatementContext;
FeiyanFormulaParser.ForInitStatementContext = ForInitStatementContext;
FeiyanFormulaParser.ForRangeDeclarationContext = ForRangeDeclarationContext;
FeiyanFormulaParser.ForRangeInitializerContext = ForRangeInitializerContext;
FeiyanFormulaParser.JumpStatementContext = JumpStatementContext;
FeiyanFormulaParser.DeclarationStatementContext = DeclarationStatementContext;
FeiyanFormulaParser.BlockDeclarationContext = BlockDeclarationContext;
FeiyanFormulaParser.SimpleDeclarationContext = SimpleDeclarationContext;
FeiyanFormulaParser.DeclSpecifierContext = DeclSpecifierContext;
FeiyanFormulaParser.DeclSpecifierSeqContext = DeclSpecifierSeqContext;
FeiyanFormulaParser.FunctionSpecifierContext = FunctionSpecifierContext;
FeiyanFormulaParser.TypedefNameContext = TypedefNameContext;
FeiyanFormulaParser.TypeSpecifierContext = TypeSpecifierContext;
FeiyanFormulaParser.TrailingTypeSpecifierContext = TrailingTypeSpecifierContext;
FeiyanFormulaParser.TypeSpecifierSeqContext = TypeSpecifierSeqContext;
FeiyanFormulaParser.TrailingTypeSpecifierSeqContext = TrailingTypeSpecifierSeqContext;
FeiyanFormulaParser.SimpleTypeLengthModifierContext = SimpleTypeLengthModifierContext;
FeiyanFormulaParser.SimpleTypeSignednessModifierContext = SimpleTypeSignednessModifierContext;
FeiyanFormulaParser.SimpleTypeSpecifierContext = SimpleTypeSpecifierContext;
FeiyanFormulaParser.TheTypeNameContext = TheTypeNameContext;
FeiyanFormulaParser.DecltypeSpecifierContext = DecltypeSpecifierContext;
FeiyanFormulaParser.EnumNameContext = EnumNameContext;
FeiyanFormulaParser.EnumSpecifierContext = EnumSpecifierContext;
FeiyanFormulaParser.EnumHeadContext = EnumHeadContext;
FeiyanFormulaParser.OpaqueEnumDeclarationContext = OpaqueEnumDeclarationContext;
FeiyanFormulaParser.EnumkeyContext = EnumkeyContext;
FeiyanFormulaParser.EnumbaseContext = EnumbaseContext;
FeiyanFormulaParser.EnumeratorListContext = EnumeratorListContext;
FeiyanFormulaParser.EnumeratorDefinitionContext = EnumeratorDefinitionContext;
FeiyanFormulaParser.EnumeratorContext = EnumeratorContext;
FeiyanFormulaParser.NamespaceNameContext = NamespaceNameContext;
FeiyanFormulaParser.OriginalNamespaceNameContext = OriginalNamespaceNameContext;
FeiyanFormulaParser.NamespaceAliasContext = NamespaceAliasContext;
FeiyanFormulaParser.AttributeSpecifierSeqContext = AttributeSpecifierSeqContext;
FeiyanFormulaParser.AttributeSpecifierContext = AttributeSpecifierContext;
FeiyanFormulaParser.AlignmentspecifierContext = AlignmentspecifierContext;
FeiyanFormulaParser.AttributeListContext = AttributeListContext;
FeiyanFormulaParser.AttributeContext = AttributeContext;
FeiyanFormulaParser.AttributeNamespaceContext = AttributeNamespaceContext;
FeiyanFormulaParser.AttributeArgumentClauseContext = AttributeArgumentClauseContext;
FeiyanFormulaParser.BalancedTokenSeqContext = BalancedTokenSeqContext;
FeiyanFormulaParser.BalancedtokenContext = BalancedtokenContext;
FeiyanFormulaParser.InitDeclaratorListContext = InitDeclaratorListContext;
FeiyanFormulaParser.InitDeclaratorContext = InitDeclaratorContext;
FeiyanFormulaParser.DeclaratorContext = DeclaratorContext;
FeiyanFormulaParser.PointerDeclaratorContext = PointerDeclaratorContext;
FeiyanFormulaParser.NoPointerDeclaratorContext = NoPointerDeclaratorContext;
FeiyanFormulaParser.ParametersAndQualifiersContext = ParametersAndQualifiersContext;
FeiyanFormulaParser.TrailingReturnTypeContext = TrailingReturnTypeContext;
FeiyanFormulaParser.PointerOperatorContext = PointerOperatorContext;
FeiyanFormulaParser.CvqualifierseqContext = CvqualifierseqContext;
FeiyanFormulaParser.CvQualifierContext = CvQualifierContext;
FeiyanFormulaParser.RefqualifierContext = RefqualifierContext;
FeiyanFormulaParser.DeclaratoridContext = DeclaratoridContext;
FeiyanFormulaParser.TheTypeIdContext = TheTypeIdContext;
FeiyanFormulaParser.AbstractDeclaratorContext = AbstractDeclaratorContext;
FeiyanFormulaParser.PointerAbstractDeclaratorContext = PointerAbstractDeclaratorContext;
FeiyanFormulaParser.NoPointerAbstractDeclaratorContext = NoPointerAbstractDeclaratorContext;
FeiyanFormulaParser.AbstractPackDeclaratorContext = AbstractPackDeclaratorContext;
FeiyanFormulaParser.NoPointerAbstractPackDeclaratorContext = NoPointerAbstractPackDeclaratorContext;
FeiyanFormulaParser.ParameterDeclarationClauseContext = ParameterDeclarationClauseContext;
FeiyanFormulaParser.ParameterDeclarationListContext = ParameterDeclarationListContext;
FeiyanFormulaParser.ParameterDeclarationContext = ParameterDeclarationContext;
FeiyanFormulaParser.InitializerContext = InitializerContext;
FeiyanFormulaParser.BraceOrEqualInitializerContext = BraceOrEqualInitializerContext;
FeiyanFormulaParser.InitializerClauseContext = InitializerClauseContext;
FeiyanFormulaParser.InitializerListContext = InitializerListContext;
FeiyanFormulaParser.BracedInitListContext = BracedInitListContext;
FeiyanFormulaParser.ClassNameContext = ClassNameContext;
FeiyanFormulaParser.OperatorFunctionIdContext = OperatorFunctionIdContext;
FeiyanFormulaParser.LiteralOperatorIdContext = LiteralOperatorIdContext;
FeiyanFormulaParser.SimpleTemplateIdContext = SimpleTemplateIdContext;
FeiyanFormulaParser.TemplateNameContext = TemplateNameContext;
FeiyanFormulaParser.TemplateArgumentListContext = TemplateArgumentListContext;
FeiyanFormulaParser.TemplateArgumentContext = TemplateArgumentContext;
FeiyanFormulaParser.ThrowExpressionContext = ThrowExpressionContext;
FeiyanFormulaParser.ExceptionSpecificationContext = ExceptionSpecificationContext;
FeiyanFormulaParser.DynamicExceptionSpecificationContext = DynamicExceptionSpecificationContext;
FeiyanFormulaParser.TypeIdListContext = TypeIdListContext;
FeiyanFormulaParser.NoeExceptSpecificationContext = NoeExceptSpecificationContext;
FeiyanFormulaParser.TheOperatorContext = TheOperatorContext;
FeiyanFormulaParser.LiteralContext = LiteralContext; 
